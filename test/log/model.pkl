ccopy_reg
_reconstructor
p1
(cmodels.deep_rnn
DeepRecurrentNetwork
p2
c__builtin__
object
p3
NtRp4
(dp5
S'delta_params'
p6
(lp7
sS'dropout_rate'
p8
F0
sS'finetune_cost'
p9
g1
(ctheano.tensor.var
TensorVariable
p10
g3
NtRp11
(dp12
S'auto_name'
p13
S'auto_2402'
p14
sS'index'
p15
I0
sS'tag'
p16
g1
(ctheano.gof.utils
scratchpad
p17
g3
NtRp18
(dp19
S'trace'
p20
(lp21
(lp22
(S'./test_classes.py'
p23
I52
S'<module>'
p24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp25
a(S'./test_classes.py'
p26
I22
S'build_model'
p27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp28
a(S'../src/models/deep_rnn.py'
p29
I129
S'__init__'
p30
S'self.finetune_cost = T.mean(T.sum((self.final_layer.output - self.y) ** 2, axis=1))'
tp31
aasbsS'name'
p32
S'mean'
p33
sS'owner'
p34
g1
(ctheano.gof.graph
Apply
p35
g3
NtRp36
(dp37
S'inputs'
p38
(lp39
g1
(g10
g3
NtRp40
(dp41
g13
S'auto_2392'
p42
sg15
I0
sg16
g1
(g17
g3
NtRp43
(dp44
g20
(lp45
(lp46
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp47
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp48
a(g29
I129
g30
S'self.finetune_cost = T.mean(T.sum((self.final_layer.output - self.y) ** 2, axis=1))'
tp49
aasbsg32
Nsg34
g1
(g35
g3
NtRp50
(dp51
g38
(lp52
g1
(g10
g3
NtRp53
(dp54
g13
S'auto_2391'
p55
sg15
I0
sg16
g1
(g17
g3
NtRp56
(dp57
g20
(lp58
(lp59
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp60
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp61
a(g29
I129
g30
S'self.finetune_cost = T.mean(T.sum((self.final_layer.output - self.y) ** 2, axis=1))'
tp62
aasbsg32
Nsg34
g1
(g35
g3
NtRp63
(dp64
g38
(lp65
g1
(g10
g3
NtRp66
(dp67
g13
S'auto_2390'
p68
sg15
I0
sg16
g1
(g17
g3
NtRp69
(dp70
g20
(lp71
(lp72
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp73
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp74
a(g29
I129
g30
S'self.finetune_cost = T.mean(T.sum((self.final_layer.output - self.y) ** 2, axis=1))'
tp75
aasbsg32
Nsg34
g1
(g35
g3
NtRp76
(dp77
g38
(lp78
g1
(g10
g3
NtRp79
(dp80
g13
S'auto_2384'
p81
sg15
I0
sg16
g1
(g17
g3
NtRp82
(dp83
g20
(lp84
(lp85
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp86
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp87
a(g29
I129
g30
S'self.finetune_cost = T.mean(T.sum((self.final_layer.output - self.y) ** 2, axis=1))'
tp88
aasbsg32
Nsg34
g1
(g35
g3
NtRp89
(dp90
g38
(lp91
g1
(g10
g3
NtRp92
(dp93
g13
S'auto_2366'
p94
sg15
I0
sg16
g1
(g17
g3
NtRp95
(dp96
g20
(lp97
(lp98
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp99
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp100
a(g29
I115
g30
S'self.final_layer = LinearLayer(rng, self.rnn_layers[-1].output, input_size, self.n_out)'
tp101
a(S'../src/layers/layers.py'
p102
I111
g30
S'self.output = T.dot(self.input, self.W) + self.b'
tp103
aasbsg32
Nsg34
g1
(g35
g3
NtRp104
(dp105
g38
(lp106
g1
(g10
g3
NtRp107
(dp108
g13
S'auto_2361'
p109
sg15
I0
sg16
g1
(g17
g3
NtRp110
(dp111
g20
(lp112
(lp113
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp114
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp115
a(g29
I115
g30
S'self.final_layer = LinearLayer(rng, self.rnn_layers[-1].output, input_size, self.n_out)'
tp116
a(g102
I111
g30
S'self.output = T.dot(self.input, self.W) + self.b'
tp117
aasbsg32
Nsg34
g1
(g35
g3
NtRp118
(dp119
g38
(lp120
g1
(g10
g3
NtRp121
(dp122
g13
S'auto_2314'
p123
sg15
I0
sg16
g1
(g17
g3
NtRp124
(dp125
g20
(lp126
(lp127
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp128
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp129
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp130
a(S'../src/layers/gating.py'
p131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp132
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp133
aasbsg32
Nsg34
g1
(g35
g3
NtRp134
(dp135
g38
(lp136
g1
(g10
g3
NtRp137
(dp138
g13
S'auto_2311'
p139
sg15
I0
sg16
g1
(g17
g3
NtRp140
(dp141
g20
(lp142
(lp143
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp144
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp145
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp146
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp147
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp148
aasbsg32
Nsg34
g1
(g35
g3
NtRp149
(dp150
g38
(lp151
g1
(g10
g3
NtRp152
(dp153
g13
S'auto_2010'
p154
sg15
I0
sg16
g1
(g17
g3
NtRp155
(dp156
g20
(lp157
(lp158
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp159
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp160
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp161
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp162
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp163
aasbsg32
Nsg34
g1
(g35
g3
NtRp164
(dp165
g38
(lp166
g1
(g10
g3
NtRp167
(dp168
g13
S'auto_2006'
p169
sg15
I0
sg16
g1
(g17
g3
NtRp170
(dp171
g20
(lp172
(lp173
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp174
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp175
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp176
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp177
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp178
aasbsg32
Nsg34
g1
(g35
g3
NtRp179
(dp180
g38
(lp181
g1
(g10
g3
NtRp182
(dp183
g13
S'auto_2002'
p184
sg15
I0
sg16
g1
(g17
g3
NtRp185
(dp186
g20
(lp187
(lp188
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp189
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp190
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp191
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp192
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp193
aasbsg32
Nsg34
g1
(g35
g3
NtRp194
(dp195
g38
(lp196
g1
(g10
g3
NtRp197
(dp198
g13
S'auto_1989'
p199
sg15
I0
sg16
g1
(g17
g3
NtRp200
(dp201
g20
(lp202
(lp203
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp204
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp205
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp206
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp207
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp208
aasbsg32
Nsg34
g1
(g35
g3
NtRp209
(dp210
g38
(lp211
g1
(g10
g3
NtRp212
(dp213
g13
S'auto_1987'
p214
sg15
I0
sg16
g1
(g17
g3
NtRp215
(dp216
g20
(lp217
(lp218
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp219
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp220
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp221
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp222
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp223
aasbsg32
Nsg34
g1
(g35
g3
NtRp224
(dp225
g38
(lp226
g1
(g10
g3
NtRp227
(dp228
g13
S'auto_1965'
p229
sg15
I0
sg16
g1
(g17
g3
NtRp230
(dp231
g20
(lp232
(lp233
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp234
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp235
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp236
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp237
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp238
aasbsg32
Nsg34
g1
(g35
g3
NtRp239
(dp240
g38
(lp241
g1
(g10
g3
NtRp242
(dp243
g13
S'auto_1955'
p244
sg15
I0
sg16
g1
(g17
g3
NtRp245
(dp246
g20
(lp247
(lp248
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp249
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp250
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp251
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp252
a(g131
I266
g30
S'self.Wix = T.dot(self.input, self.W_xi)'
tp253
aasbsg32
Nsg34
g1
(g35
g3
NtRp254
(dp255
g38
(lp256
g1
(g10
g3
NtRp257
(dp258
g13
S'auto_1895'
p259
sg15
I0
sg16
g1
(g17
g3
NtRp260
(dp261
g20
(lp262
(lp263
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp264
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp265
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp266
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp267
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp268
aasbsg32
Nsg34
g1
(g35
g3
NtRp269
(dp270
g38
(lp271
g1
(g10
g3
NtRp272
(dp273
g13
S'auto_1892'
p274
sg15
I0
sg16
g1
(g17
g3
NtRp275
(dp276
g20
(lp277
(lp278
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp279
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp280
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp281
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp282
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp283
aasbsg32
Nsg34
g1
(g35
g3
NtRp284
(dp285
g38
(lp286
g1
(g10
g3
NtRp287
(dp288
g13
S'auto_1591'
p289
sg15
I0
sg16
g1
(g17
g3
NtRp290
(dp291
g20
(lp292
(lp293
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp294
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp295
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp296
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp297
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp298
aasbsg32
Nsg34
g1
(g35
g3
NtRp299
(dp300
g38
(lp301
g1
(g10
g3
NtRp302
(dp303
g13
S'auto_1587'
p304
sg15
I0
sg16
g1
(g17
g3
NtRp305
(dp306
g20
(lp307
(lp308
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp309
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp310
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp311
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp312
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp313
aasbsg32
Nsg34
g1
(g35
g3
NtRp314
(dp315
g38
(lp316
g1
(g10
g3
NtRp317
(dp318
g13
S'auto_1583'
p319
sg15
I0
sg16
g1
(g17
g3
NtRp320
(dp321
g20
(lp322
(lp323
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp324
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp325
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp326
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp327
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp328
aasbsg32
Nsg34
g1
(g35
g3
NtRp329
(dp330
g38
(lp331
g1
(g10
g3
NtRp332
(dp333
g13
S'auto_1570'
p334
sg15
I0
sg16
g1
(g17
g3
NtRp335
(dp336
g20
(lp337
(lp338
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp339
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp340
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp341
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp342
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp343
aasbsg32
Nsg34
g1
(g35
g3
NtRp344
(dp345
g38
(lp346
g1
(g10
g3
NtRp347
(dp348
g13
S'auto_1568'
p349
sg15
I0
sg16
g1
(g17
g3
NtRp350
(dp351
g20
(lp352
(lp353
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp354
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp355
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp356
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp357
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp358
aasbsg32
Nsg34
g1
(g35
g3
NtRp359
(dp360
g38
(lp361
g1
(g10
g3
NtRp362
(dp363
g13
S'auto_1546'
p364
sg15
I0
sg16
g1
(g17
g3
NtRp365
(dp366
g20
(lp367
(lp368
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp369
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp370
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp371
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp372
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp373
aasbsg32
Nsg34
g1
(g35
g3
NtRp374
(dp375
g38
(lp376
g1
(g10
g3
NtRp377
(dp378
g13
S'auto_1536'
p379
sg15
I0
sg16
g1
(g17
g3
NtRp380
(dp381
g20
(lp382
(lp383
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp384
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp385
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp386
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp387
a(g131
I266
g30
S'self.Wix = T.dot(self.input, self.W_xi)'
tp388
aasbsg32
Nsg34
g1
(g35
g3
NtRp389
(dp390
g38
(lp391
g1
(g10
g3
NtRp392
(dp393
g13
S'auto_1517'
p394
sg15
Nsg16
g1
(g17
g3
NtRp395
(dp396
g20
(lp397
(lp398
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp399
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp400
a(g29
I52
g30
S"self.x = T.matrix('x')"
tp401
aasbsg32
S'x'
sg34
NsS'type'
p402
g1
(ctheano.tensor.type
TensorType
p403
g3
NtRp404
(dp405
S'broadcastable'
p406
(I00
I00
tp407
sS'dtype'
p408
S'float64'
p409
sS'numpy_dtype'
p410
cnumpy
dtype
p411
(S'f8'
I0
I1
tRp412
(I3
S'<'
NNNI-1
I-1
I0
tbsS'sparse_grad'
p413
I00
sg32
Nsbsbag1
(ctheano.tensor.sharedvar
TensorSharedVariable
p414
g3
NtRp415
(dp416
g13
S'auto_1519'
p417
sg15
Nsg16
g1
(g17
g3
NtRp418
(dp419
g20
(lp420
(lp421
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp422
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp423
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp424
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp425
a(g131
I220
g30
S"self.W_xi = theano.shared(value=Wx_value, name='W_xi')"
tp426
aasbsS'container'
p427
g1
(ctheano.gof.link
Container
p428
g3
NtRp429
(dp430
g32
S'W_xi'
p431
sS'storage'
p432
(lp433
cnumpy.core.multiarray
_reconstruct
p434
(cnumpy
ndarray
p435
(I0
tS'b'
tRp436
(I1
(I8
I16
tg412
I00
S'Zk\xa0\xe9\xa4\x90\xd8\xbf\xbe\x8a}\xef=\x91\xd6?\xdb~\x08\x08\xbf\x9c\xb9?\t}t\x0c\xb2\n\xe1\xbf\x0f\xf1\xa0\xa98/\xca\xbf\xf6{M5\x12\xaf\xe2?\xd5u\xb7\xf1it\xeb\xbfk\x10\x12\xff\ri\xc3\xbfl\x0cT\x0b\x16\xa5\xdc?\xef\xe9`[\xb2\x9c\xd3\xbf\xac\xcay\xab\x0e\xb9\xce\xbfNx\x03R\xe7$\xa1\xbfI-\x03\x98\x86\xdf\xe0?\x9f|\xd7\xd4\xd4\xe9\xcc\xbf\x86:[\xee\xa2\x17\xc4\xbf\xb9\xfeM\x0c\x10\xa8\xc3\xbf\x03d\xc2T\x0e\xf5\xe8?n\xdd\xd8\xea\x9b\xbd\xe8?\xbb\x8d\xbb\xf7\x19\xb8\xd6?\xf40\xd8\xa7\x0fz\xc1?\x84;\xb5\x87K\xaf\xd0?G0\xad\x03\x9f\xdd\xe0?Rq\xc7\xc6\xed,\xd5\xbf\xacw\x9c\x1e!\x9b\xda?S\xa6\xdb\xae@_\xdc\xbfY\xef\xf3\xab\x80\xdc\xcc\xbf\xf7\xa4\xa5\xba\x83\x86\xd4?EG\x0e\xbc\xe6)\xe0\xbf\xc1u>\xe5\xeaZ\xa9\xbfB\xa52L\xd1\x7f\xd3\xbf-p\r~\xd2"\xb7\xbf\x1b0\x08r\x94\xa9\xef\xbf\xaf\xed\xc1n\xe8\n\xe4\xbf\xa2S\xd9u>\xac\xcf\xbf\xd3\xb6\x9e\xafo\xfc\xd4?\xd3\x93rGqn\xaf\xbf\xe8S\x0c\x00=|P?\xca\x99m;9%\xcf?+\xe6.\x97\xd1\xe6\xd3\xbf\x8e\xd4\x1a\xa2\xc7\xab\xb9?\x93\xef\xc0b.9\xd2\xbf\xa0\x00\xd7\x87\xdd\x8b\xe3\xbf"\xc9D\xbd\xaa\xb0\xc1\xbf\xb4\xda\xc0\\\xad\xf7\xc9?\xbf\x1e\x96\xe6D\xa5\xbe?zW-\r\xe4!q\xbf\x8as\xcc\xaa\x07\x11\xeb?\xf3sSy\xaf\xaf\xc2?\x83\nl\xcdq%\xd6?\xe1\x94`\x04[R\xe9?\xe6y\xae\x95$H\xdd\xbf\x98_8\xd7M\x81\xd7\xbf\xfb38\x7fT\xba\xe3?>\x0f\xbe\x87\xdf\x0e\xd2\xbf!\xa6\x16E2~\x85?\x99\xc5\xb8\xc5#2\xd8?\x1c\x0ev\xc5\x85\'\xd4?8>A|\xb1\xda\xe3?oO\x7f\x1f\xd9\xeb\xe0?;%\x12\x83\x952\xd8?r%\xf0\xc9\x01|\xd1\xbfu\x02\xf0\x1dV\xfc\xd1?\xcf\x109\xd6\xd4q\xbc?\x8b\x15\x1e\xd8\x8c\x02\xde\xbf\xa1@\x8c\xbf\xef\x08\xe0?7\xa6\xe3s\x03D\xd2?Y\xbe=k\x1bx\x90?\xa9\x03\xe0\x90\xda\x18\xb5\xbfN\x80\xf2:M\x1d\xdb\xbfP\xd1\x93K\x11\x0f\xb2?\xa9\xbe\xfd{\xfa2\xc5?\xa5\x8a\xd6^\x90\xce\xd2\xbf\x0e\x10\xc6x4L\xda?\xa6\xd0\x17\xcf\xad\xd3\xd8\xbfe@\x89\xcb\'\x05\xe8\xbf\x1e\'\xdc\x1d\xbe\x86\xd7?\xe4\xec\xd8b\x17A\xc2\xbf\xa4~\x9b\xa9T\xd0\xa6\xbf\xd9\xa7>Bj\xf3\xd2\xbf\xe0\xdd\xb3p]+\xe2\xbf\xcf\x08\xd4\x8e\x1cg\xdc?)\x1c\x17\xf6\xb5,\xcf\xbfo\x11\x0f\xdc\xa1\xca\xe2?\x05\x04\xa5\xb4mD\xd2?:\xeay\x84\x18}\xbc\xbf5\xb8\xe4\xf67\x92\xd8\xbfuE|\x7f\xdf\x92\xd0\xbf4\xcbk)\xafo\xdb\xbfX7\xc9\r\xed\x9c\xe7?2\xb6l\xe2\\\xc4\xad?QB\xf9\xc2\xb3\x06\xda?\xe1\xab\xcf\x88I\xad\xdc\xbf\xd6\xb6\x8c\x81\xabb\xb0?\xa8\x0f"\xb8\xe7\xa6\xda?`t\xbe\xc5[R\xbe\xbfE\xe4\xe8Z\xdaT\xd7?\xb0\x9f`\t}\x8a\xd8\xbfT\xb6V"\x12\xda\xde\xbf%\xa4$:r+\xc1?\x01\x10X[\xd9(\xc1\xbf9\'\x15\'[\x0e\xcd?\x83\xc9\xceJ\x93`\xe6\xbfOA\xc1\xa2\xe0\x1d\xd0?gNc\xf5}e\xed?\t\xe2\xad\xf7\xc3\xd4\x81\xbf\x1f\x1aG\xfa\xb6\xb8\x88??\x1eO1?@\xb0?\xfe\xe2\xc9\x92\xdb\x10\xe5\xbf\x8c]s\x91\x02I\xc3?\xf2\xe23g\xc3)\xe2\xbf\x1c8U\x0c\xc5Z\xc3\xbfZ\xa6q.x\x1f\xdc?\xa3\x89\xe8\xde\xd4\xa2\xd0\xbf\x8do\xfb\xad\x16\xaf\xc6?\x9e\xbe\xa6Fi\xea\xd6?\x14\xe5\xa9\xdb\x8e:\xb9?\x96\xcc\xa3\xbea\x05\xdf\xbf\xd5g\xbc,\x9c\x17\xbe\xbf\x18\xdf\xa7\xba\x0f+\xe6?\xc7)+\xb6(\xe9\xe6\xbf\xb2\xbd\xff\xca\x17\xf6\xb8\xbf\xcf\x9cI\x9aM\xfc\xc8\xbf\xde\xc7\x18*\x8c\xdb\xa5?\xa9\x99o\xb8 \xee\xd0?\xf5\t\xa3HD3\xe2?\xe2\x1d\xd2\xb2iu\xb8\xbfVN)h\x95a\xd2?\x92\x12t\xb7\x9b\x9d\xc6?'
tbasS'strict'
p437
I00
sS'readonly'
p438
I00
sg402
g1
(g403
g3
NtRp439
(dp440
g406
(I00
I00
tp441
sg408
S'float64'
p442
sg410
g412
sg413
I00
sg32
NsbsS'allow_downcast'
p443
Nsbsg32
g431
sg34
Nsg402
g439
sbasg16
g1
(g17
g3
NtRp444
sS'outputs'
p445
(lp446
g377
asS'op'
p447
g1
(ctheano.tensor.basic
Dot
p448
g3
NtRp449
sbsg402
g1
(g403
g3
NtRp450
(dp451
g406
(I00
I00
tp452
sg408
S'float64'
p453
sg410
g412
sg413
I00
sg32
Nsbsbag1
(ctheano.scalar.basic
ScalarConstant
p454
g3
NtRp455
(dp456
g13
S'auto_1545'
p457
sg15
Nsg16
g1
(g17
g3
NtRp458
sg32
Nsg402
g1
(ctheano.scalar.basic
Scalar
p459
g3
NtRp460
(dp461
g408
S'int64'
p462
sbsS'data'
p463
cnumpy.core.multiarray
scalar
p464
(g411
(S'i8'
I0
I1
tRp465
(I3
S'<'
NNNI-1
I-1
I0
tbS'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp466
sbasg16
g1
(g17
g3
NtRp467
sg445
(lp468
g362
asg447
g1
(ctheano.tensor.subtensor
Subtensor
p469
g3
NtRp470
(dp471
S'idx_list'
p472
(c__builtin__
slice
p473
(g460
NNtRp474
tp475
sbsbsg402
g1
(g403
g3
NtRp476
(dp477
g406
(I00
I00
tp478
sg408
g453
sg410
g412
sg413
I00
sg32
Nsbsbasg16
g1
(g17
g3
NtRp479
sg445
(lp480
g347
asg447
g1
(ctheano.compile.ops
Shape
p481
g3
NtRp482
sbsg402
g1
(g403
g3
NtRp483
(dp484
g406
(I00
tp485
sg408
g462
sg410
g465
sg413
I00
sg32
Nsbsbag1
(g454
g3
NtRp486
(dp487
g13
S'auto_1569'
p488
sg15
Nsg16
g1
(g17
g3
NtRp489
sg32
Nsg402
g460
sg463
g464
(g465
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp490
sbasg16
g1
(g17
g3
NtRp491
sg445
(lp492
g332
asg447
g1
(g469
g3
NtRp493
(dp494
g472
(g460
tp495
sbsbsg402
g1
(g403
g3
NtRp496
(dp497
g406
(tsg408
g462
sg410
g465
sg413
I00
sg32
Nsbsbag1
(g10
g3
NtRp498
(dp499
g13
S'auto_1573'
p500
sg15
I0
sg16
g1
(g17
g3
NtRp501
(dp502
g20
(lp503
(lp504
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp505
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp506
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp507
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp508
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp509
aasbsg32
Nsg34
g1
(g35
g3
NtRp510
(dp511
g38
(lp512
g1
(g10
g3
NtRp513
(dp514
g13
S'auto_1571'
p515
sg15
I0
sg16
g1
(g17
g3
NtRp516
(dp517
g20
(lp518
(lp519
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp520
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp521
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp522
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp523
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp524
aasbsg32
Nsg34
g1
(g35
g3
NtRp525
(dp526
g38
(lp527
g1
(g10
g3
NtRp528
(dp529
g13
S'auto_1553'
p530
sg15
I0
sg16
g1
(g17
g3
NtRp531
(dp532
g20
(lp533
(lp534
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp535
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp536
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp537
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp538
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp539
aasbsg32
Nsg34
g1
(g35
g3
NtRp540
(dp541
g38
(lp542
g1
(g10
g3
NtRp543
(dp544
g13
S'auto_1537'
p545
sg15
I0
sg16
g1
(g17
g3
NtRp546
(dp547
g20
(lp548
(lp549
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp550
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp551
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp552
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp553
a(g131
I267
g30
S'self.Wfx = T.dot(self.input, self.W_xf)'
tp554
aasbsg32
Nsg34
g1
(g35
g3
NtRp555
(dp556
g38
(lp557
g392
ag1
(g414
g3
NtRp558
(dp559
g13
S'auto_1522'
p560
sg15
Nsg16
g1
(g17
g3
NtRp561
(dp562
g20
(lp563
(lp564
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp565
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp566
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp567
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp568
a(g131
I230
g30
S"self.W_xf = theano.shared(value=Wx_value, name='W_xf')"
tp569
aasbsg427
g1
(g428
g3
NtRp570
(dp571
g32
S'W_xf'
p572
sg432
(lp573
g434
(g435
(I0
tS'b'
tRp574
(I1
(I8
I16
tg412
I00
S'\xe2\xfc\xf983[\xe1?Y\xab\x9fA.\xfb\xc7\xbfv\x1e\xe8\xce\x078\xc6\xbf\xe2\xd2B\xdc~\x9f\xdd\xbf\xb1\x020\x1dY\x15i\xbf\xef\x95\x84!N\x1a\xd6?\xef\xd8_7\xa4\xcf\xe3\xbf\xd0\x06pq\x1c"\xce\xbf\xe1\x8fKp\x11\x06\x8a?\xfanIhR<\xd3?<o\xd6\x84\xa4S\xc1?\xe3\xae\xc1\x98%u\xbd?\xc8\x83\x92\roM\xb4\xbf\x84s\xdf\xb1\xa0\xce\xc5?\x90f-\xc7y\xf3\xd6?\xb3[\xfd\xd6\xc4U\xe3\xbf\n\xc5\x12\xb9 |\xd0?st\xcb\x8b\x9f\xe0\xa1\xbf]zf\xff\x0b\xfc\xc7\xbf%\x1e\xf3>\xe7\xa3\xeb\xbf*\x95\x82U\xd9;\xdf\xbf\x81\x19\x87\xab\x1a6\xe3?\xae_V\x8f\xff(\xcf\xbf\xb1\xed\x94\xe4\xa6\x8b\xd8\xbf\x14\xa6@\x98\xcd\xa7\xc4\xbf\xd6\xe3\xaa\x90Z\xdc\xd0\xbf\xc9\xa2p\xad\xe5\x82\xa6?D\x91\xb4\x05\xa0)\xe1?\xe8\r\x02\xca\x15\x8c\xca\xbfE\xd8\xaa\x90\xf2\xed\xab?\xbe4q\xe3\x81\xf5\xd9\xbf\xe4rPP\xdf2\xe1?\x03~\x90\xf29\x1c\xb1?\x06\'J\xd4\x90z\xd8\xbf\x84\xc5U\x19Mv\xd4?B\xbc\x16*\x12\'\xdb?\x8c\xafd\x90\n:\xad?\xf5I!h3\x8c\xe2\xbf\x18\x0f3\xb3f2\xe4?\xf3)\x19\xa5\xaf\x11\xbc?\xae%\xc9\xd9\xfe{\xda?e\xf2\xd7\x86:\xee\xc8\xbf\x88\x08\xae \'\n\xc2\xbf\xdb\xac#\x84\x80\xfe\xa3?\xfe\xcf\x9b\xed\x821\xd9?\xb1\x06\t3K\xe2\xa9?\xab\xa6\xa1\xee[p\xdc\xbf7F\xcf\x04j\xb6\xb7?\xf8P7\x9a\xa2o\xe2?s|{!\r\xd3\x97?k\x1af\x1c\xd9k\xa7?[oB?o\x91\xdc\xbf\xae\x01\x1c\x1c\xfb\xbe\xdf\xbf\xed\x05\x1a\x9c\xd0\xdb\xcc\xbf\xc1\x1a\x04\xa8\x91\x8d\xbd\xbfg\x0cA\xf8E\xd6\xa2?\xbf\xdcs\x96\x9a\n\xae?\xa7\xdc\x10\xc2\x9e\x1f\xe2?=R\xd4gC?\x95?\x0ey\x9cy\xcb\x15\xd8?\x81\xdc\xeb#<z\x8c\xbf\xea\xca\x0e\x1eyd\xe0??\xbf\xe1\xef?)\xe5\xbfq@\xb0 s\x18\xcb\xbf\xc8\xd6}rV>\xd6?\x8b/\xc2\x01\xec\x0f\xaf\xbf\x85A\xb3\xf3\xfe\x13\xd5?>#\xaa\x0e\x15m\xc1?my\x0e\xd1\x1ag\xd5?\xe0\xbc"\x05\x89\xbe\xcb?\x8a>3\x05b|\xce?\x0f\x8a\xcf\xce\x9c\xe2\xe0?\xa9B\x00\x95DR\xd6?\x90}NM\xbe|\xd6??  %\xcc\x91}?,\x00\x88t\xdfT\xca\xbf\xb68v\x07)\xd9\xcd\xbf\xe6\xd1\xa3\x8d\xef\xfd\xd0?l\xd3\x02D\x89\x96\xeb\xbfK\x03n!\xfc\x93\xdd\xbf\xda\xc3\xb3\xe8\xc2\xcb\xd5\xbf\xdd\xd9rE\x81i\xb6\xbf"\x16\x97ju\xc5\xed\xbf\xf6j)\xe9J{\xdc?\x1c\x9933,)\xcb?\x1e\xcc\x85\xf0\xf6s\xe6?\xb7h&\xe2\x00\t\xd8?R\xf5\xfb9\x98P\xd7?\xcfexr\xa7v\xe9?\xaa\x16\xd0^\xaf\xd6\xc9\xbf\xeajc\x0c{\x02\xe1\xbf\xab)\xa9\xcc\xd4\x07\xb5\xbf\xb1R\x00L\xdd\xaa\xd2\xbf\xe4\x83\xec\xa0:?\xb7\xbf\xf1\xf0\xcf\xa9\x84\xc3\xd7\xbf\xb002\x84\x06\xb3\xc9?>x\xad4\x077\xc7?\xc0\xe3\x10Dy~\x83\xbf\xeaN\xc7\xce}3\xbc?\xc53P\x01\xc4\xb6\xa9\xbf\x8b\xd9P\x8c>\x04\xd1?j\xef\x02\xdeo6\x99?\x850\xc3O\x80\x06\xb8\xbf.\x8d\x7fz\xba\x08\xd5?$\xb5 \xf9t\x87\xdc?\rZ%0\\C\xde?\xeau\xd2\xa2Hh\xd6\xbf\xdc#\x82\xa5\xb2/\xc8\xbf\xedK\xa7 \x0f@\xe3\xbf\xad\xd3\xc7/\xaa\x97\xb5\xbf\x1c\xb6\'\xaa\xe4\xd4\xc2?\x04\xe9c\xf1!\n\xa8\xbf\x98\xad\x89jW\xd8\xe5?\x98\x02H\xb9\xca]\xc2\xbfP\xf0g\xa8P\xa1\xd8\xbf\x84\xe2\xf8\x99A\xba\xc9?\x87\xbb\x1cx\x13$\xab?\xf7?\x90q\xbd\xdf\xc8?\xb4\x98\xd7 \xe9~\xbb?\xb7\xfdM +\x10\xb6?&b\x0e\x8b\xd5\x02\xe8\xbf\x81\x83\x13\x0b\x1an\xd0\xbf\xa4\'\xbe\xeb\r\xb7\xca\xbfX\x1f$\xbe\x7f~\xbf\xbf\xaa8\x8c?\xb9J\xc4\xbf\xdeGix\x9a\xae\xc2?\x07\xc5\xd4\xd7]1\xcb?\x82\xc5\x8a\x19*\x9b\xd9\xbf'
tbasg437
I00
sg438
I00
sg402
g1
(g403
g3
NtRp575
(dp576
g406
(I00
I00
tp577
sg408
S'float64'
p578
sg410
g412
sg413
I00
sg32
Nsbsg443
Nsbsg32
g572
sg34
Nsg402
g575
sbasg16
g1
(g17
g3
NtRp579
sg445
(lp580
g543
asg447
g449
sbsg402
g1
(g403
g3
NtRp581
(dp582
g406
(I00
I00
tp583
sg408
S'float64'
p584
sg410
g412
sg413
I00
sg32
Nsbsbag1
(g454
g3
NtRp585
(dp586
g13
S'auto_1552'
p587
sg15
Nsg16
g1
(g17
g3
NtRp588
sg32
Nsg402
g460
sg463
g464
(g465
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp589
sbasg16
g1
(g17
g3
NtRp590
sg445
(lp591
g528
asg447
g1
(g469
g3
NtRp592
(dp593
g472
(g473
(g460
NNtRp594
tp595
sbsbsg402
g1
(g403
g3
NtRp596
(dp597
g406
(I00
I00
tp598
sg408
g584
sg410
g412
sg413
I00
sg32
Nsbsbasg16
g1
(g17
g3
NtRp599
sg445
(lp600
g513
asg447
g482
sbsg402
g483
sbag1
(g454
g3
NtRp601
(dp602
g13
S'auto_1572'
p603
sg15
Nsg16
g1
(g17
g3
NtRp604
sg32
Nsg402
g460
sg463
g464
(g465
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp605
sbasg16
g1
(g17
g3
NtRp606
sg445
(lp607
g498
asg447
g1
(g469
g3
NtRp608
(dp609
g472
(g460
tp610
sbsbsg402
g1
(g403
g3
NtRp611
(dp612
g406
(tsg408
g462
sg410
g465
sg413
I00
sg32
Nsbsbasg16
g1
(g17
g3
NtRp613
sg445
(lp614
g317
asg447
g1
(ctheano.tensor.elemwise
Elemwise
p615
g3
NtRp616
(dp617
S'__module__'
p618
S'tensor'
p619
sS'scalar_op'
p620
g1
(ctheano.scalar.basic
Minimum
p621
g3
NtRp622
(dp623
S'output_types_preference'
p624
ctheano.scalar.basic
upcast_out
p625
sg32
S'minimum'
p626
sbsg32
S'Elemwise{minimum,no_inplace}'
p627
sS'destroy_map'
p628
(dp629
sS'nfunc_spec'
p630
(S'minimum'
I2
I1
tp631
sS'inplace_pattern'
p632
(dp633
sS'openmp'
p634
I00
sS'__doc__'
p635
S"elemwise minimum. See min for the minimum in one tensor\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Parameters\n    ----------\n    scalar_op\n        An instance of a subclass of scalar.ScalarOp which works uniquely\n        on scalars.\n    inplace_pattern\n        A dictionary that maps the index of an output to the\n        index of an input so the output is calculated inplace using\n        the input's storage. (Just like destroymap, but without the lists.)\n    nfunc_spec\n        Either None or a tuple of three elements,\n        (nfunc_name, nin, nout) such that getattr(numpy, nfunc_name)\n        implements this operation, takes nin inputs and nout outputs.\n        Note that nin cannot always be inferred from the scalar op's\n        own nin field because that value is sometimes 0 (meaning a\n        variable number of inputs), whereas the numpy function may\n        not have varargs.\n\n    Note\n    ----\n    | Elemwise(add) represents + on tensors (x + y)\n    | Elemwise(add, {0 : 0}) represents the += operation (x += y)\n    | Elemwise(add, {0 : 1}) represents += on the second argument (y += x)\n    | Elemwise(mul)(rand(10, 5), rand(1, 5)) the second input is completed along the first dimension to match the first input\n    | Elemwise(true_div)(rand(10, 5), rand(10, 1)) same but along the second dimension\n    | Elemwise(int_div)(rand(1, 5), rand(10, 1)) the output has size (10, 5)\n    | Elemwise(log)(rand(3, 4, 5))\n\n    "
p636
sbsbsg402
g1
(g403
g3
NtRp637
(dp638
g406
(tsg408
g462
sg410
g465
sg413
I00
sg32
Nsbsbag1
(g10
g3
NtRp639
(dp640
g13
S'auto_1576'
p641
sg15
I0
sg16
g1
(g17
g3
NtRp642
(dp643
g20
(lp644
(lp645
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp646
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp647
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp648
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp649
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp650
aasbsg32
Nsg34
g1
(g35
g3
NtRp651
(dp652
g38
(lp653
g1
(g10
g3
NtRp654
(dp655
g13
S'auto_1574'
p656
sg15
I0
sg16
g1
(g17
g3
NtRp657
(dp658
g20
(lp659
(lp660
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp661
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp662
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp663
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp664
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp665
aasbsg32
Nsg34
g1
(g35
g3
NtRp666
(dp667
g38
(lp668
g1
(g10
g3
NtRp669
(dp670
g13
S'auto_1560'
p671
sg15
I0
sg16
g1
(g17
g3
NtRp672
(dp673
g20
(lp674
(lp675
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp676
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp677
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp678
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp679
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp680
aasbsg32
Nsg34
g1
(g35
g3
NtRp681
(dp682
g38
(lp683
g1
(g10
g3
NtRp684
(dp685
g13
S'auto_1538'
p686
sg15
I0
sg16
g1
(g17
g3
NtRp687
(dp688
g20
(lp689
(lp690
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp691
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp692
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp693
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp694
a(g131
I268
g30
S'self.Wcx = T.dot(self.input, self.W_xc)'
tp695
aasbsg32
Nsg34
g1
(g35
g3
NtRp696
(dp697
g38
(lp698
g392
ag1
(g414
g3
NtRp699
(dp700
g13
S'auto_1528'
p701
sg15
Nsg16
g1
(g17
g3
NtRp702
(dp703
g20
(lp704
(lp705
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp706
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp707
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp708
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp709
a(g131
I250
g30
S"self.W_xc = theano.shared(value=Wx_value, name='W_xc')"
tp710
aasbsg427
g1
(g428
g3
NtRp711
(dp712
g32
S'W_xc'
p713
sg432
(lp714
g434
(g435
(I0
tS'b'
tRp715
(I1
(I8
I16
tg412
I00
S'T\x8bv\x14\xaa\'\xd9?\x1d\xd2\x0b\xef\xdc`\xb0?S9\x10ah(\xde?A-\x06\xa3w`\xd6?\xa3\xd6r\x00\xc0\xeb\xcb\xbf\xc4d\xa0\xa1.\xdb\xda\xbf\x9f\x13m\x08\xe0\xac\xc2?k\xe2\xfe\x12\xbe\x9f\xcc\xbf\xdb\x80c}\x08\x0c\xc1?\x93\x8e\x07\xd0H\x8b\xd0\xbf\xfb\xaa\x91\xe2\xbf|\xd3\xbf\x812\x11\xe7\xa5\x85\xa9\xbf\x9f\x9ff\x86\xe3"\xd5?v;\xaa\xcb\xac\xbe\xbb?#\x9eu\xc3\xe0\xa9\xda?\xd3\xc2\x9dz\x8d\xe9\xdb\xbfW\x19\xeb\xaf>\xeb\xd7\xbf\xb8\xf9\xed6\xee#\xa0\xbf\t\xc2}\x8d\x8a\x80\xe8?n\x03\x01\xc8\xc3\x83\xce?\x80\xdc\xdb {"\xd8\xbf~\xe4f\x83\xd7\x90\x9b\xbf\xe7\xfc\x01\t\x11\xfa\xb3?4Ff\x03\\\xbc\xc9\xbf\xcf\x87\x9d\xb9\xef\xc0\xcb?$j\xd3\xd7\xdcQ\xac\xbf\xf13n\x8a\xa2\x17\xbb\xbf\x18\xa8\x99\xe5/\x84\xdc?\x96gj\xf7\xb4W\xe3\xbf\xe8&\xfc$_\xc3\xd5\xbfy\xa8(\xfd[~\xd2\xbf;\x00-\x13K.\xd3\xbfT\x16]xc}\xd0\xbf\x0e\xce\x15(\x1c\x1b\xc6?\x7f\xea\x83\xef\xcb\xcf\xd8?<\x8a\xd3\x1cG\xba\xd4?\xcd\xce\x00H\xef\x11\xd7\xbf\xd3\xbf\xa9\xf3\xd8q\xa3\xbf\xd6w\xdc\x93\x99w\xc4?I\x16\x0b\x7f\xfb\xb8\xb5?\xf4\xdc$f\xb2\x8b\xdd?\xe7\xe0\xbfR\xe8\x8f\xce\xbf\xca\x06\n\x90\xfdK\xac?\x8e\xa5q\xd5\xab\xcb\xc1\xbf\xff\xd0@\x07\x87\xb9\xb6?\xf2[\xe8s\xa3i\xd8\xbf"\xd5_h\xfb\x04\xd5\xbf\x04\xe6\xc6\xfc@\x85\xd0\xbfX#\xf3*>\x82\xc9\xbf\x91k:\xc1C\x83\xe1?\xc0j,\xb9\xa7\x98\xda?\x1c\x95#\xa21?\xb3\xbf\xab\r\xfa\xa4\xe4M\xaf?\xc9\xe5\x82\xe0\xfa\t\xe2\xbf\xc90\x0f\xf1I:\xb0\xbf\x96\x99!\x8c\xb2\xe4\xac?\x00A\x1d\t\x83\xec\xd9?H\x11\x86x8\x94\xbd?\xa6\xe7;W"\x97\xc3?\xa3\xf2\x85\xbeN\xf3\xba?\xcc\xa2\xc3\xa5\xe2X\xb8?\x17$u\xb5\xe4\x9a\xdf\xbf\xf6\x92\xc7\x8f<\xdc\xc2\xbfqFIG\xe0;\xe0?\x9e?\x84\x9a\x84\xa4\xd2?*\n1\xf5\xd2]\xc6?\xd4e\xf06M\'\x98? h%\x02\xc9\xd7\xcd?.-\xedTba\xd5\xbfV>\xfd`W\xe0\xe1\xbf\x85\xfd\x8a>\x90J\xc1\xbf]^\xd0d\xf7W\xc8?\x97\xb4\\n\xf0\x84\xa3?\xebm\xd3\xdey\xf1\xd6?\xf2gA\x81F\xcf\xbf?\xc6]\xa5X\x0f<\x90?+\xcc\xa1>\x9d\t\xde?M\xc1\xaa\xd1k\x9f\xd9?u\xc4\xd8\xe2\xa4\xc1\xa1\xbfZ\xf0l\x1c\x8c\xf5\xd8\xbf\xc4r4\xcb\xff\x87\xd4\xbf(\xd0\xb0\x93\xcc9\xad\xbfa)\xe3\xd4\x98\x99\xc0\xbf \x06\x0b\x80d\xc1\xe2?f\xf2\xa530\x02\xe3\xbf\x9b\xdd\xd1\xa5\x88C\x97\xbf\xdd\x1d\xeaX> \xd8\xbf\xab}I\xa6\xb5$\xa5?pq\'\xfe\xa0L\xc1?\xe9\xf6n\xde\xd3R\xc2\xbf\x85\n\xa5\xcf\xc0\x01\xc8?\x86+\xd0\xd2G\xfa\xb1\xbf\xde&\xd1z\xae<\xb0\xbf\x80\x05\x02\x13W\xe9\xc2\xbfT\x8f\x916\xf4s\xcd?:\xf6\x85\x16J\x12\xa9?7\xb8c\xb4\x96\xcc\xe1?\xc4\xb9<\x19\xc5\xbc\xdc?x7\x04@\x9c\x0f\xc9?\xc9\xff\xed<in\xe8\xbf\x81\xbc\x1c\xf2\x12\xcb\xe0\xbf\x81BU;\xf9P\xd6?\xa2x\xc5\xbbb\x86\xc5\xbf\xd4\x1b\xbe\x00qA\xb5?\x93dA\x0e5\x88\xcc\xbf\x82\xc2\xf3\xf0\xd6o\xc7?<\xfce@E\xad\xd5?`\x01=\x8e\xe9^\xdb\xbf\xa4\x19?\x87\xb5h\xd2\xbf\xe8\xcdq\x15\xac\xd2\xe2\xbf\xcfk\\\x85( \xb5?h\x91\xea\xd3*\xd7\xe2\xbf\xb2\x1c\x9c\xb4$\x91\xc0\xbfC\x0c\xf4\x8b\xd1\x83\xc7?6\xaey\xb5\xdfH\xe7?\xb8\x8cn\xc86\xac\xc0?ZIy\xd0{Y\xdc?;\xaf6_\xd5t\xb7?\xbeRu\x12Q\xfd\xbb?\xdf-\xff\x08/\x17\xb3\xbf:EP\x88FX\xc1\xbf\xfd\xac,\x93\xb9\x92\xda?Z\xe36\xfd\xb0\xf4\xc0?_\xfa\xc6c%p\xbe?B$\x80\xd6\xda\x85\xcb\xbf\x96-n\xe3\xc7:\xbf\xbf\xcf\x0c\xe8\x91\x17d\xe7?\xe5\x1a\x85\xa92p\x98\xbf'
tbasg437
I00
sg438
I00
sg402
g1
(g403
g3
NtRp716
(dp717
g406
(I00
I00
tp718
sg408
S'float64'
p719
sg410
g412
sg413
I00
sg32
Nsbsg443
Nsbsg32
g713
sg34
Nsg402
g716
sbasg16
g1
(g17
g3
NtRp720
sg445
(lp721
g684
asg447
g449
sbsg402
g1
(g403
g3
NtRp722
(dp723
g406
(I00
I00
tp724
sg408
S'float64'
p725
sg410
g412
sg413
I00
sg32
Nsbsbag1
(g454
g3
NtRp726
(dp727
g13
S'auto_1559'
p728
sg15
Nsg16
g1
(g17
g3
NtRp729
sg32
Nsg402
g460
sg463
g464
(g465
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp730
sbasg16
g1
(g17
g3
NtRp731
sg445
(lp732
g669
asg447
g1
(g469
g3
NtRp733
(dp734
g472
(g473
(g460
NNtRp735
tp736
sbsbsg402
g1
(g403
g3
NtRp737
(dp738
g406
(I00
I00
tp739
sg408
g725
sg410
g412
sg413
I00
sg32
Nsbsbasg16
g1
(g17
g3
NtRp740
sg445
(lp741
g654
asg447
g482
sbsg402
g483
sbag1
(g454
g3
NtRp742
(dp743
g13
S'auto_1575'
p744
sg15
Nsg16
g1
(g17
g3
NtRp745
sg32
Nsg402
g460
sg463
g464
(g465
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp746
sbasg16
g1
(g17
g3
NtRp747
sg445
(lp748
g639
asg447
g1
(g469
g3
NtRp749
(dp750
g472
(g460
tp751
sbsbsg402
g1
(g403
g3
NtRp752
(dp753
g406
(tsg408
g462
sg410
g465
sg413
I00
sg32
Nsbsbasg16
g1
(g17
g3
NtRp754
sg445
(lp755
g302
asg447
g616
sbsg402
g1
(g403
g3
NtRp756
(dp757
g406
(tsg408
g462
sg410
g465
sg413
I00
sg32
Nsbsbag1
(g10
g3
NtRp758
(dp759
g13
S'auto_1579'
p760
sg15
I0
sg16
g1
(g17
g3
NtRp761
(dp762
g20
(lp763
(lp764
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp765
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp766
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp767
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp768
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp769
aasbsg32
Nsg34
g1
(g35
g3
NtRp770
(dp771
g38
(lp772
g1
(g10
g3
NtRp773
(dp774
g13
S'auto_1577'
p775
sg15
I0
sg16
g1
(g17
g3
NtRp776
(dp777
g20
(lp778
(lp779
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp780
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp781
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp782
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp783
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp784
aasbsg32
Nsg34
g1
(g35
g3
NtRp785
(dp786
g38
(lp787
g1
(g10
g3
NtRp788
(dp789
g13
S'auto_1567'
p790
sg15
I0
sg16
g1
(g17
g3
NtRp791
(dp792
g20
(lp793
(lp794
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp795
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp796
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp797
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp798
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp799
aasbsg32
Nsg34
g1
(g35
g3
NtRp800
(dp801
g38
(lp802
g1
(g10
g3
NtRp803
(dp804
g13
S'auto_1539'
p805
sg15
I0
sg16
g1
(g17
g3
NtRp806
(dp807
g20
(lp808
(lp809
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp810
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp811
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp812
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp813
a(g131
I269
g30
S'self.Wox = T.dot(self.input, self.W_xo)'
tp814
aasbsg32
Nsg34
g1
(g35
g3
NtRp815
(dp816
g38
(lp817
g392
ag1
(g414
g3
NtRp818
(dp819
g13
S'auto_1525'
p820
sg15
Nsg16
g1
(g17
g3
NtRp821
(dp822
g20
(lp823
(lp824
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp825
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp826
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp827
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp828
a(g131
I240
g30
S"self.W_xo = theano.shared(value=Wx_value, name='W_xo')"
tp829
aasbsg427
g1
(g428
g3
NtRp830
(dp831
g32
S'W_xo'
p832
sg432
(lp833
g434
(g435
(I0
tS'b'
tRp834
(I1
(I8
I16
tg412
I00
S'\xbe\xb2*\x1a\xfc\xee\xa5\xbf\xc0\xfa\xfa#|\xb9\xe6\xbf\xfa\xf9FU\xf4\xd4\xd4\xbfR\x98\r\xa6#t\xae?>\x16\xb6\xeb\xa0\xdd\xdd\xbf\x95p\xa7-\xf1\xa7\xdc?\x7f\x95\xb4\xc7\xc9h\xc6?7\xa2\xec\xd8\x98E\xc7\xbf\x94\xed\xa0\xf3G\xf0\xb3\xbf\x0b\tmf\xaa\x0f\xe5?\xd7\x0f)\x02\xd3-\xd5?%\xc7C\xd9\xed4\xc1?\xd2\x8c\xd8\xc0\xc7\x03\xe0\xbf\x15\xe9W\xc9\xdbo\xe2?(\x0f\x8b}(\xd0\xd7?|\xed7$?\xdd\xaa\xbf\xfcw\xc1\xf7a\xe0\xc8\xbf\x86\x9a\x01\xd2\xd2\x01\xb1\xbf\x13q\x97g\\2\xdb\xbfi\xe0\x88\x99)N\xc5\xbfg\x93\xe1\xa9\xb2D\xd1?o\x0c,2ns\xe4\xbf\xf3=\xcd\x9f@m\xbc\xbfa\xe6\x82R\x8f\x97\xa4?\xaa\xea!\xf5p\xbf\xa2?D\xdf\xda\xde!\xad\xda\xbf\xf0D@\xd1\xc2\xbf\xda\xbf\x9d\xa5b\xac\x1e\xa5\xd8?\x11\xc9c\xed:\xb5\xdb\xbfx\x85S\xfe\xba\xd2\xd6?>\xf5\xc9\x15Q\xd4\xc5\xbff\x8f\xf7<\xd9n\xd8?\xb2m\xdccK\x0e\xc3\xbf\x10l\xfds\xecd\xda\xbf\xa3\xf6\xe3\x1a\xb2a\xd3?/\xce\xdd\xf4g/y\xbf\xb1$^\xa4\x86c\xe0?\x9f\x8d\x14\xc9,0\xd4?L\xb2g\x89\xec\xc3\xb4\xbf\xf0\xb3\xc4\x86\x81Y\xc4\xbf\x1c\xf6\xfe\xe8b\xec\x80?1^\xab\xa7A7\xb1?j4\x91\x0f\xa2\xf3\xd3\xbfV5\x07\xf3\x08\r\xd3?\xd99\xd3\xe8\x8c\xfb\xc1\xbf\xcc2b|\xe0$\xc3\xbf\xdd\x9d\xbb\xb7\x00x\xc8\xbf\xc4c6\xa2\xc7\xe8\xb4?\xd2\xe6[\x00\x98Q\xcf\xbfu\xb8\x85\xa3\xa4n\xa8?\x1a\xbf\xe2;\xf0L\xef?\x92\x89\x14j\xa0h\x93\xbf8\x1e\xcdG\x0c\xa4\xc3\xbf\x9d\t\xbb\xd9$\xde\xe2\xbf\xb2\x89<\xd5\xa9.\x92?\\\x9d\'\x1aZ\x19\xd9\xbf\x01\x8d\xc5\x14\xee\xfe\xc0\xbf\xc4\xdf\xb4\xd1\xa3q\xab?\xa1\x02\t!{\x95\xe3\xbfM\x00\xc39\xf9\x80\xac?\xe1t\x02\xe2\xc2\x8f\xbb?\xdb\xe3\x07\x1c\x9bY\xdd\xbf\x0e\n)\xc3\xfe\xc0\xc1\xbf\xc0\x92\x13\x18-\xb6\xe4\xbf\xa0\xdb\x9d\\#\xd3\xe1?)\x87\x13\xe2N\xeb\xbd?\xd0\xb9\xa1\x9f&A\xb0\xbf;\xb1j\x8b\xc5\x95\xad\xbf\x83~l~\x05\x9a\xd9?9oC\x9c\xb8\x0b\xa1\xbf\x0f\xe9\xe1\x85.\xf1\xbd?\x13\xbc\xe1\xc8k.\xe1?1k\xc7t\xdbT\xbf\xbf\xa60ZI8\xb9\xd8\xbf\xb2;8z\x04\xa8\xd2\xbfm\xd6\xb7:\xda)\xe0?\xcbM\xab\xea\xdf\x8c\xa0?5;h\x95\xa0\xbb\xc6\xbf\x1f\xf7\x87`\xf3\x07\xd6?\xd53\xe8b\xc9\x94\xd6?-p<\x0b~\x86\xc5\xbf\x92\x8e\x85>\x0f\xfe\xd5\xbf\xaed*\x99\xbc\xc4\xe1\xbfW\x12\xdcD\xa8K\xe4\xbfB _\xa9\xdc\xfb\xb7\xbf7F7\x8f\xf15\xd4\xbf\xa0b\xfc\x83\xb7\x06\xe5?tr\x8d\xecc1\x95?\xcb\x1c\xde\xe0\x10\xf9\xe5\xbf \xe0\xf02\x14\r\xe0?\xf0q\x8d2\xcfE\xad?*l\x97\xceZ\xe7\xcf?\xaa\x9f\x8f\xed\x88\xdd\xce?Ii\x8fE[\xd7\xba?\x9dv\x92u\x0c\xaf\xc7?Dx\xb5\xbb2\x9c\xb5?\xec\xab\xb2*\xdf\x08\xd9\xbf\xb2lG\xfb\xad\x98\xc0?\xfc\xe5R\x1f\x18+\xd7?H@\x1d[\x1b\x03\xb3\xbf\xaf\x9b\xfa\x95\xf7\xf2\xc8?\xfe\x10\xf06\n\xfd\xc2?^z\x1e\xaa\xb0\x8a\xe4?\x02\x11\xcc2X\xe0\xb6\xbf\x15\x06*\n\xe0m\xba\xbff\xebIY\xba*\xa5\xbf%rHR\xe6\x88\xa2\xbf"\xc3F84\xb6\xe9\xbfV\xb4t\xa2\xc9\x14\xcd\xbfnv\x84\xbcz$\xbb?>\x0f\xca\xf2\xd5\xe9g\xbf\xd8N^XD\x16\xd2\xbf\xd1\xbdN"\xa0\x15\xce\xbf\xf9\xe5\x1b\xd0\xdc\x17\xc0\xbf^\tb!3#\xd2\xbf\xf9~\x1b,\xd07\xc7\xbf\xf6u\xa2o\xf6h\xc8\xbfQ\xeb\x99\xbd\x8aB\xd4?\x98`\xd7.\x91\xff\xd6?BL\xce\x0b\xe7\x1f\xd5?o\xe4[\x12qO\xc3?\xf7\xdci\xc7\n\x07\xd0\xbf\x07\xbe\x90\x8e\xee\xb7\xd5?\x90J0\xdaUq\xbc\xbf\xeb\xca\t\x80\x0b\xb1\x80?+\xa5\x11%\xcdG\xde?\t\xe6!\x14\x9eh\x9e?\xee\xde\xbb=\xb0a\xb6?'
tbasg437
I00
sg438
I00
sg402
g1
(g403
g3
NtRp835
(dp836
g406
(I00
I00
tp837
sg408
S'float64'
p838
sg410
g412
sg413
I00
sg32
Nsbsg443
Nsbsg32
g832
sg34
Nsg402
g835
sbasg16
g1
(g17
g3
NtRp839
sg445
(lp840
g803
asg447
g449
sbsg402
g1
(g403
g3
NtRp841
(dp842
g406
(I00
I00
tp843
sg408
S'float64'
p844
sg410
g412
sg413
I00
sg32
Nsbsbag1
(g454
g3
NtRp845
(dp846
g13
S'auto_1566'
p847
sg15
Nsg16
g1
(g17
g3
NtRp848
sg32
Nsg402
g460
sg463
g464
(g465
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp849
sbasg16
g1
(g17
g3
NtRp850
sg445
(lp851
g788
asg447
g1
(g469
g3
NtRp852
(dp853
g472
(g473
(g460
NNtRp854
tp855
sbsbsg402
g1
(g403
g3
NtRp856
(dp857
g406
(I00
I00
tp858
sg408
g844
sg410
g412
sg413
I00
sg32
Nsbsbasg16
g1
(g17
g3
NtRp859
sg445
(lp860
g773
asg447
g482
sbsg402
g483
sbag1
(g454
g3
NtRp861
(dp862
g13
S'auto_1578'
p863
sg15
Nsg16
g1
(g17
g3
NtRp864
sg32
Nsg402
g460
sg463
g464
(g465
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp865
sbasg16
g1
(g17
g3
NtRp866
sg445
(lp867
g758
asg447
g1
(g469
g3
NtRp868
(dp869
g472
(g460
tp870
sbsbsg402
g1
(g403
g3
NtRp871
(dp872
g406
(tsg408
g462
sg410
g465
sg413
I00
sg32
Nsbsbasg16
g1
(g17
g3
NtRp873
sg445
(lp874
g287
asg447
g616
sbsg402
g1
(g403
g3
NtRp875
(dp876
g406
(tsg408
g462
sg410
g465
sg413
I00
sg32
Nsbsbag1
(g10
g3
NtRp877
(dp878
g13
S'auto_1593'
p879
sg15
I0
sg16
g1
(g17
g3
NtRp880
(dp881
g20
(lp882
(lp883
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp884
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp885
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp886
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp887
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp888
aasbsg32
Nsg34
g1
(g35
g3
NtRp889
(dp890
g38
(lp891
g362
ag1
(ctheano.scalar.basic
ScalarVariable
p892
g3
NtRp893
(dp894
g13
S'auto_1592'
p895
sg15
I0
sg16
g1
(g17
g3
NtRp896
sg32
Nsg34
g1
(g35
g3
NtRp897
(dp898
g38
(lp899
g287
asg16
g1
(g17
g3
NtRp900
sg445
(lp901
g893
asg447
g1
(ctheano.tensor.basic
ScalarFromTensor
p902
g3
NtRp903
sbsg402
g460
sbasg16
g1
(g17
g3
NtRp904
sg445
(lp905
g877
asg447
g1
(g469
g3
NtRp906
(dp907
g472
(g473
(Ng460
NtRp908
tp909
sbsbsg402
g1
(g403
g3
NtRp910
(dp911
g406
(I00
I00
tp912
sg408
g453
sg410
g412
sg413
I00
sg32
Nsbsbag1
(g10
g3
NtRp913
(dp914
g13
S'auto_1595'
p915
sg15
I0
sg16
g1
(g17
g3
NtRp916
(dp917
g20
(lp918
(lp919
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp920
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp921
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp922
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp923
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp924
aasbsg32
Nsg34
g1
(g35
g3
NtRp925
(dp926
g38
(lp927
g528
ag1
(g892
g3
NtRp928
(dp929
g13
S'auto_1594'
p930
sg15
I0
sg16
g1
(g17
g3
NtRp931
sg32
Nsg34
g1
(g35
g3
NtRp932
(dp933
g38
(lp934
g287
asg16
g1
(g17
g3
NtRp935
sg445
(lp936
g928
asg447
g903
sbsg402
g460
sbasg16
g1
(g17
g3
NtRp937
sg445
(lp938
g913
asg447
g1
(g469
g3
NtRp939
(dp940
g472
(g473
(Ng460
NtRp941
tp942
sbsbsg402
g1
(g403
g3
NtRp943
(dp944
g406
(I00
I00
tp945
sg408
g584
sg410
g412
sg413
I00
sg32
Nsbsbag1
(g10
g3
NtRp946
(dp947
g13
S'auto_1597'
p948
sg15
I0
sg16
g1
(g17
g3
NtRp949
(dp950
g20
(lp951
(lp952
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp953
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp954
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp955
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp956
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp957
aasbsg32
Nsg34
g1
(g35
g3
NtRp958
(dp959
g38
(lp960
g669
ag1
(g892
g3
NtRp961
(dp962
g13
S'auto_1596'
p963
sg15
I0
sg16
g1
(g17
g3
NtRp964
sg32
Nsg34
g1
(g35
g3
NtRp965
(dp966
g38
(lp967
g287
asg16
g1
(g17
g3
NtRp968
sg445
(lp969
g961
asg447
g903
sbsg402
g460
sbasg16
g1
(g17
g3
NtRp970
sg445
(lp971
g946
asg447
g1
(g469
g3
NtRp972
(dp973
g472
(g473
(Ng460
NtRp974
tp975
sbsbsg402
g1
(g403
g3
NtRp976
(dp977
g406
(I00
I00
tp978
sg408
g725
sg410
g412
sg413
I00
sg32
Nsbsbag1
(g10
g3
NtRp979
(dp980
g13
S'auto_1599'
p981
sg15
I0
sg16
g1
(g17
g3
NtRp982
(dp983
g20
(lp984
(lp985
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp986
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp987
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp988
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp989
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp990
aasbsg32
Nsg34
g1
(g35
g3
NtRp991
(dp992
g38
(lp993
g788
ag1
(g892
g3
NtRp994
(dp995
g13
S'auto_1598'
p996
sg15
I0
sg16
g1
(g17
g3
NtRp997
sg32
Nsg34
g1
(g35
g3
NtRp998
(dp999
g38
(lp1000
g287
asg16
g1
(g17
g3
NtRp1001
sg445
(lp1002
g994
asg447
g903
sbsg402
g460
sbasg16
g1
(g17
g3
NtRp1003
sg445
(lp1004
g979
asg447
g1
(g469
g3
NtRp1005
(dp1006
g472
(g473
(Ng460
NtRp1007
tp1008
sbsbsg402
g1
(g403
g3
NtRp1009
(dp1010
g406
(I00
I00
tp1011
sg408
g844
sg410
g412
sg413
I00
sg32
Nsbsbag1
(g10
g3
NtRp1012
(dp1013
g13
S'auto_1616'
p1014
sg15
I0
sg16
g1
(g17
g3
NtRp1015
(dp1016
S'nan_guard_mode_check'
p1017
I00
sg20
(lp1018
(lp1019
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp1020
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp1021
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp1022
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp1023
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp1024
aasbsg32
Nsg34
g1
(g35
g3
NtRp1025
(dp1026
g38
(lp1027
g1
(g10
g3
NtRp1028
(dp1029
g13
S'auto_1613'
p1030
sg15
I0
sg16
g1
(g17
g3
NtRp1031
(dp1032
g1017
I00
sS'values_eq_approx'
p1033
ctheano.tensor.type
values_eq_approx_always_true
p1034
sg20
(lp1035
(lp1036
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp1037
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp1038
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp1039
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp1040
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp1041
aasbsg32
Nsg34
g1
(g35
g3
NtRp1042
(dp1043
g38
(lp1044
g1
(g10
g3
NtRp1045
(dp1046
g13
S'auto_1612'
p1047
sg15
I0
sg16
g1
(g17
g3
NtRp1048
(dp1049
g20
(lp1050
(lp1051
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp1052
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp1053
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp1054
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp1055
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp1056
aasbsg32
Nsg34
g1
(g35
g3
NtRp1057
(dp1058
g38
(lp1059
g287
ag1
(g10
g3
NtRp1060
(dp1061
g13
S'auto_1605'
p1062
sg15
I0
sg16
g1
(g17
g3
NtRp1063
(dp1064
g20
(lp1065
(lp1066
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp1067
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp1068
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp1069
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp1070
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp1071
aasbsg32
Nsg34
g1
(g35
g3
NtRp1072
(dp1073
g38
(lp1074
g1
(g10
g3
NtRp1075
(dp1076
g13
S'auto_1603'
p1077
sg15
I0
sg16
g1
(g17
g3
NtRp1078
(dp1079
g20
(lp1080
(lp1081
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp1082
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp1083
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp1084
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp1085
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp1086
aasbsg32
Nsg34
g1
(g35
g3
NtRp1087
(dp1088
g38
(lp1089
g1
(g10
g3
NtRp1090
(dp1091
g13
S'auto_1602'
p1092
sg15
I0
sg16
g1
(g17
g3
NtRp1093
(dp1094
g20
(lp1095
(lp1096
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp1097
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp1098
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp1099
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp1100
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp1101
aasbsg32
Nsg34
g1
(g35
g3
NtRp1102
(dp1103
g38
(lp1104
g1
(g10
g3
NtRp1105
(dp1106
g13
S'auto_1601'
p1107
sg15
I0
sg16
g1
(g17
g3
NtRp1108
(dp1109
g20
(lp1110
(lp1111
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp1112
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp1113
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp1114
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp1115
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp1116
aasbsg32
Nsg34
g1
(g35
g3
NtRp1117
(dp1118
g38
(lp1119
g1
(g414
g3
NtRp1120
(dp1121
g13
S'auto_1534'
p1122
sg15
Nsg16
g1
(g17
g3
NtRp1123
(dp1124
g20
(lp1125
(lp1126
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp1127
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp1128
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp1129
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp1130
a(g131
I262
g30
S"self.h0 = theano.shared(value=np.zeros((n_h, ), dtype = config.floatX), name = 'h0')"
tp1131
aasbsg427
g1
(g428
g3
NtRp1132
(dp1133
g32
S'h0'
p1134
sg432
(lp1135
g434
(g435
(I0
tS'b'
tRp1136
(I1
(I16
tg412
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
tbasg437
I00
sg438
I00
sg402
g1
(g403
g3
NtRp1137
(dp1138
g406
(I00
tp1139
sg408
S'float64'
p1140
sg410
g412
sg413
I00
sg32
Nsbsg443
Nsbsg32
g1134
sg34
Nsg402
g1137
sbasg16
g1
(g17
g3
NtRp1141
sg445
(lp1142
g1105
asg447
g1
(ctheano.tensor.elemwise
DimShuffle
p1143
g3
NtRp1144
(dp1145
S'input_broadcastable'
p1146
g1139
sS'shuffle'
p1147
(lp1148
I0
asS'augment'
p1149
(lp1150
I0
asS'drop'
p1151
(lp1152
sS'inplace'
p1153
I01
sS'new_order'
p1154
(S'x'
I0
tp1155
sS'view_map'
p1156
(dp1157
I0
(lp1158
I0
assbsbsg402
g1
(g403
g3
NtRp1159
(dp1160
g406
(I01
I00
tp1161
sg408
g1140
sg410
g412
sg413
I00
sg32
Nsbsbasg16
g1
(g17
g3
NtRp1162
sg445
(lp1163
g1090
asg447
g1
(ctheano.compile.ops
Rebroadcast
p1164
g3
NtRp1165
(dp1166
S'axis'
p1167
ccollections
OrderedDict
p1168
((lp1169
(lp1170
I0
aI00
aatRp1171
sbsbsg402
g1
(g403
g3
NtRp1172
(dp1173
g406
(I00
I00
tp1174
sg408
g1140
sg410
g412
sg413
I00
sg32
Nsbsbasg16
g1
(g17
g3
NtRp1175
sg445
(lp1176
g1075
asg447
g482
sbsg402
g483
sbag1
(g454
g3
NtRp1177
(dp1178
g13
S'auto_1604'
p1179
sg15
Nsg16
g1
(g17
g3
NtRp1180
sg32
Nsg402
g460
sg463
g464
(g465
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp1181
sbasg16
g1
(g17
g3
NtRp1182
sg445
(lp1183
g1060
asg447
g1
(g469
g3
NtRp1184
(dp1185
g472
(g460
tp1186
sbsbsg402
g1
(g403
g3
NtRp1187
(dp1188
g406
(tsg408
g462
sg410
g465
sg413
I00
sg32
Nsbsbasg16
g1
(g17
g3
NtRp1189
sg445
(lp1190
g1045
asg447
g1
(g615
g3
NtRp1191
(dp1192
g618
g619
sg620
g1
(ctheano.scalar.basic
Add
p1193
g3
NtRp1194
(dp1195
g624
g625
sg32
S'add'
p1196
sbsg32
S'Elemwise{add,no_inplace}'
p1197
sg628
(dp1198
sg630
(S'add'
I2
I1
tp1199
sg632
(dp1200
sg634
I00
sg635
S"elementwise addition\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Parameters\n    ----------\n    scalar_op\n        An instance of a subclass of scalar.ScalarOp which works uniquely\n        on scalars.\n    inplace_pattern\n        A dictionary that maps the index of an output to the\n        index of an input so the output is calculated inplace using\n        the input's storage. (Just like destroymap, but without the lists.)\n    nfunc_spec\n        Either None or a tuple of three elements,\n        (nfunc_name, nin, nout) such that getattr(numpy, nfunc_name)\n        implements this operation, takes nin inputs and nout outputs.\n        Note that nin cannot always be inferred from the scalar op's\n        own nin field because that value is sometimes 0 (meaning a\n        variable number of inputs), whereas the numpy function may\n        not have varargs.\n\n    Note\n    ----\n    | Elemwise(add) represents + on tensors (x + y)\n    | Elemwise(add, {0 : 0}) represents the += operation (x += y)\n    | Elemwise(add, {0 : 1}) represents += on the second argument (y += x)\n    | Elemwise(mul)(rand(10, 5), rand(1, 5)) the second input is completed along the first dimension to match the first input\n    | Elemwise(true_div)(rand(10, 5), rand(10, 1)) same but along the second dimension\n    | Elemwise(int_div)(rand(1, 5), rand(10, 1)) the output has size (10, 5)\n    | Elemwise(log)(rand(3, 4, 5))\n\n    "
p1201
sbsbsg402
g1
(g403
g3
NtRp1202
(dp1203
g406
(tsg408
g462
sg410
g465
sg413
I00
sg32
Nsbsbag1
(g10
g3
NtRp1204
(dp1205
g13
S'auto_1608'
p1206
sg15
I0
sg16
g1
(g17
g3
NtRp1207
(dp1208
g20
(lp1209
(lp1210
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp1211
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp1212
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp1213
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp1214
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp1215
aasbsg32
Nsg34
g1
(g35
g3
NtRp1216
(dp1217
g38
(lp1218
g1
(g10
g3
NtRp1219
(dp1220
g13
S'auto_1606'
p1221
sg15
I0
sg16
g1
(g17
g3
NtRp1222
(dp1223
g20
(lp1224
(lp1225
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp1226
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp1227
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp1228
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp1229
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp1230
aasbsg32
Nsg34
g1
(g35
g3
NtRp1231
(dp1232
g38
(lp1233
g1090
asg16
g1
(g17
g3
NtRp1234
sg445
(lp1235
g1219
asg447
g482
sbsg402
g483
sbag1
(g454
g3
NtRp1236
(dp1237
g13
S'auto_1607'
p1238
sg15
Nsg16
g1
(g17
g3
NtRp1239
sg32
Nsg402
g460
sg463
g464
(g465
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp1240
sbasg16
g1
(g17
g3
NtRp1241
sg445
(lp1242
g1204
asg447
g1
(g469
g3
NtRp1243
(dp1244
g472
(g460
tp1245
sbsbsg402
g1
(g403
g3
NtRp1246
(dp1247
g406
(tsg408
g462
sg410
g465
sg413
I00
sg32
Nsbsbasg16
g1
(g17
g3
NtRp1248
sg445
(lp1249
g1028
asg447
g1
(ctheano.tensor.basic
AllocEmpty
p1250
g3
NtRp1251
(dp1252
g408
S'float64'
p1253
sbsbsg402
g1
(g403
g3
NtRp1254
(dp1255
g406
(I00
I00
tp1256
sg413
I00
sg32
Nsg408
g1253
sg410
g412
sS'filter_checks_isfinite'
p1257
I00
sbsbag1090
ag1
(g892
g3
NtRp1258
(dp1259
g13
S'auto_1614'
p1260
sg15
I0
sg16
g1
(g17
g3
NtRp1261
sg32
Nsg34
g1
(g35
g3
NtRp1262
(dp1263
g38
(lp1264
g1060
asg16
g1
(g17
g3
NtRp1265
sg445
(lp1266
g1258
asg447
g903
sbsg402
g460
sbasg16
g1
(g17
g3
NtRp1267
sg445
(lp1268
g1012
asg447
g1
(ctheano.tensor.subtensor
IncSubtensor
p1269
g3
NtRp1270
(dp1271
g472
(lp1272
g473
(Ng460
NtRp1273
asS'destroyhandler_tolerate_aliased'
p1274
(lp1275
sS'set_instead_of_inc'
p1276
I01
sg1153
I00
sbsbsg402
g1254
sbag1
(g10
g3
NtRp1277
(dp1278
g13
S'auto_1633'
p1279
sg15
I0
sg16
g1
(g17
g3
NtRp1280
(dp1281
g1017
I00
sg20
(lp1282
(lp1283
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp1284
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp1285
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp1286
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp1287
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp1288
aasbsg32
Nsg34
g1
(g35
g3
NtRp1289
(dp1290
g38
(lp1291
g1
(g10
g3
NtRp1292
(dp1293
g13
S'auto_1630'
p1294
sg15
I0
sg16
g1
(g17
g3
NtRp1295
(dp1296
g1017
I00
sg1033
g1034
sg20
(lp1297
(lp1298
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp1299
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp1300
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp1301
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp1302
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp1303
aasbsg32
Nsg34
g1
(g35
g3
NtRp1304
(dp1305
g38
(lp1306
g1
(g10
g3
NtRp1307
(dp1308
g13
S'auto_1629'
p1309
sg15
I0
sg16
g1
(g17
g3
NtRp1310
(dp1311
g20
(lp1312
(lp1313
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp1314
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp1315
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp1316
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp1317
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp1318
aasbsg32
Nsg34
g1
(g35
g3
NtRp1319
(dp1320
g38
(lp1321
g287
ag1
(g10
g3
NtRp1322
(dp1323
g13
S'auto_1622'
p1324
sg15
I0
sg16
g1
(g17
g3
NtRp1325
(dp1326
g20
(lp1327
(lp1328
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp1329
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp1330
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp1331
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp1332
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp1333
aasbsg32
Nsg34
g1
(g35
g3
NtRp1334
(dp1335
g38
(lp1336
g1
(g10
g3
NtRp1337
(dp1338
g13
S'auto_1620'
p1339
sg15
I0
sg16
g1
(g17
g3
NtRp1340
(dp1341
g20
(lp1342
(lp1343
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp1344
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp1345
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp1346
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp1347
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp1348
aasbsg32
Nsg34
g1
(g35
g3
NtRp1349
(dp1350
g38
(lp1351
g1
(g10
g3
NtRp1352
(dp1353
g13
S'auto_1619'
p1354
sg15
I0
sg16
g1
(g17
g3
NtRp1355
(dp1356
g20
(lp1357
(lp1358
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp1359
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp1360
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp1361
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp1362
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp1363
aasbsg32
Nsg34
g1
(g35
g3
NtRp1364
(dp1365
g38
(lp1366
g1
(g10
g3
NtRp1367
(dp1368
g13
S'auto_1618'
p1369
sg15
I0
sg16
g1
(g17
g3
NtRp1370
(dp1371
g20
(lp1372
(lp1373
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp1374
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp1375
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp1376
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp1377
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp1378
aasbsg32
Nsg34
g1
(g35
g3
NtRp1379
(dp1380
g38
(lp1381
g1
(g414
g3
NtRp1382
(dp1383
g13
S'auto_1535'
p1384
sg15
Nsg16
g1
(g17
g3
NtRp1385
(dp1386
g20
(lp1387
(lp1388
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp1389
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp1390
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp1391
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp1392
a(g131
I263
g30
S"self.c0 = theano.shared(value=np.zeros((n_h, ), dtype = config.floatX), name = 'c0')"
tp1393
aasbsg427
g1
(g428
g3
NtRp1394
(dp1395
g32
S'c0'
p1396
sg432
(lp1397
g434
(g435
(I0
tS'b'
tRp1398
(I1
(I16
tg412
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
tbasg437
I00
sg438
I00
sg402
g1
(g403
g3
NtRp1399
(dp1400
g406
(I00
tp1401
sg408
S'float64'
p1402
sg410
g412
sg413
I00
sg32
Nsbsg443
Nsbsg32
g1396
sg34
Nsg402
g1399
sbasg16
g1
(g17
g3
NtRp1403
sg445
(lp1404
g1367
asg447
g1
(g1143
g3
NtRp1405
(dp1406
g1146
g1401
sg1147
(lp1407
I0
asg1149
(lp1408
I0
asg1151
(lp1409
sg1153
I01
sg1154
(S'x'
I0
tp1410
sg1156
(dp1411
I0
(lp1412
I0
assbsbsg402
g1
(g403
g3
NtRp1413
(dp1414
g406
(I01
I00
tp1415
sg408
g1402
sg410
g412
sg413
I00
sg32
Nsbsbasg16
g1
(g17
g3
NtRp1416
sg445
(lp1417
g1352
asg447
g1
(g1164
g3
NtRp1418
(dp1419
g1167
g1168
((lp1420
(lp1421
I0
aI00
aatRp1422
sbsbsg402
g1
(g403
g3
NtRp1423
(dp1424
g406
(I00
I00
tp1425
sg408
g1402
sg410
g412
sg413
I00
sg32
Nsbsbasg16
g1
(g17
g3
NtRp1426
sg445
(lp1427
g1337
asg447
g482
sbsg402
g483
sbag1
(g454
g3
NtRp1428
(dp1429
g13
S'auto_1621'
p1430
sg15
Nsg16
g1
(g17
g3
NtRp1431
sg32
Nsg402
g460
sg463
g464
(g465
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp1432
sbasg16
g1
(g17
g3
NtRp1433
sg445
(lp1434
g1322
asg447
g1
(g469
g3
NtRp1435
(dp1436
g472
(g460
tp1437
sbsbsg402
g1
(g403
g3
NtRp1438
(dp1439
g406
(tsg408
g462
sg410
g465
sg413
I00
sg32
Nsbsbasg16
g1
(g17
g3
NtRp1440
sg445
(lp1441
g1307
asg447
g1191
sbsg402
g1
(g403
g3
NtRp1442
(dp1443
g406
(tsg408
g462
sg410
g465
sg413
I00
sg32
Nsbsbag1
(g10
g3
NtRp1444
(dp1445
g13
S'auto_1625'
p1446
sg15
I0
sg16
g1
(g17
g3
NtRp1447
(dp1448
g20
(lp1449
(lp1450
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp1451
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp1452
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp1453
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp1454
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp1455
aasbsg32
Nsg34
g1
(g35
g3
NtRp1456
(dp1457
g38
(lp1458
g1
(g10
g3
NtRp1459
(dp1460
g13
S'auto_1623'
p1461
sg15
I0
sg16
g1
(g17
g3
NtRp1462
(dp1463
g20
(lp1464
(lp1465
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp1466
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp1467
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp1468
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp1469
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp1470
aasbsg32
Nsg34
g1
(g35
g3
NtRp1471
(dp1472
g38
(lp1473
g1352
asg16
g1
(g17
g3
NtRp1474
sg445
(lp1475
g1459
asg447
g482
sbsg402
g483
sbag1
(g454
g3
NtRp1476
(dp1477
g13
S'auto_1624'
p1478
sg15
Nsg16
g1
(g17
g3
NtRp1479
sg32
Nsg402
g460
sg463
g464
(g465
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp1480
sbasg16
g1
(g17
g3
NtRp1481
sg445
(lp1482
g1444
asg447
g1
(g469
g3
NtRp1483
(dp1484
g472
(g460
tp1485
sbsbsg402
g1
(g403
g3
NtRp1486
(dp1487
g406
(tsg408
g462
sg410
g465
sg413
I00
sg32
Nsbsbasg16
g1
(g17
g3
NtRp1488
sg445
(lp1489
g1292
asg447
g1
(g1250
g3
NtRp1490
(dp1491
g408
S'float64'
p1492
sbsbsg402
g1
(g403
g3
NtRp1493
(dp1494
g406
(I00
I00
tp1495
sg413
I00
sg32
Nsg408
g1492
sg410
g412
sg1257
I00
sbsbag1352
ag1
(g892
g3
NtRp1496
(dp1497
g13
S'auto_1631'
p1498
sg15
I0
sg16
g1
(g17
g3
NtRp1499
sg32
Nsg34
g1
(g35
g3
NtRp1500
(dp1501
g38
(lp1502
g1322
asg16
g1
(g17
g3
NtRp1503
sg445
(lp1504
g1496
asg447
g903
sbsg402
g460
sbasg16
g1
(g17
g3
NtRp1505
sg445
(lp1506
g1277
asg447
g1
(g1269
g3
NtRp1507
(dp1508
g472
(lp1509
g473
(Ng460
NtRp1510
asg1274
(lp1511
sg1276
I01
sg1153
I00
sbsbsg402
g1493
sbag1
(g414
g3
NtRp1512
(dp1513
g13
S'auto_1523'
p1514
sg15
Nsg16
g1
(g17
g3
NtRp1515
(dp1516
g20
(lp1517
(lp1518
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp1519
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp1520
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp1521
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp1522
a(g131
I231
g30
S"self.W_hf = theano.shared(value=Wh_value, name='W_hf')"
tp1523
aasbsg427
g1
(g428
g3
NtRp1524
(dp1525
g32
S'W_hf'
p1526
sg432
(lp1527
g434
(g435
(I0
tS'b'
tRp1528
(I1
(I16
I16
tg412
I00
S'|\xd1=<M\xfa\xc5?\xc4\xa4\xd3\xd2\x9c\xbe\xc2?\xed\xc0E@-\xcf\xbd?\xebAt!\xb2\xaf\xd6\xbfU\x03\xbc\x1a\x802\xbc?~*\xb51\xf9$\x95?\xc4|M\x92\x87\xbf\xce?rn\x03\xb6\xb9\x8c\xdc?\x99H\x07\xdf\xb9h\xd9?\xdf\x00\xdb\x9b?\xd6\x9c?\xa1\xbb\xbe\xe9\x06\xb7>\xbf?\xab\x92\x9b\xeb8\xc4?\xbf\xb7Z"4\xd7\xd1\xbf\x88\xd1\xa0\x86\xff5\xd7\xbf>\xd7\xc6\xf3\xf0=\xbe\xbf\xb5\xb0\xeeDs\x87\xd3?z\xd0\xf9\xbe41\xb5\xbf\xb2\xba\xa0F\x92\n\xd8?8@\x93 \x0eN\xe6\xbf\xbd\xdc\xf0\x902e\xd9\xbfy\xb8\x7f\x96\x10\xaa\x9f\xbf\xd8nq\xf5\x16l\xcc?\xc4\x89\x0c\xc4\xd1\xd2\x91\xbf\xd2\x11_\xc1\xb2|\x98\xbfj\x02\xb2\\s*\x9f\xbf+\x1f7A\xd44\xdc\xbfS\xc1c:s\x87\xd2?5\r\xd2e5\xd9\xc5\xbf\x95\x8f\xaa\xcb\xb9n\xd1?C\x1c\xc0\x9d\xd2\r\x92\xbf\xa8`\xa7X/\x17\xd1?\xcf\xef\x98R\xf0\xf7\xb5?W\xdeC\xf8\x04O\x9b\xbf\xdb\xe4?C$\xf6\xac?\xea\xfd-\xf8P\x91\xd7\xbf\x0f\x80C05\xb2X?,la\xb2\xe6t\xdb?\x1b\xb5\xe2_\\\xee\xd4?YC/-P\x85\xcf\xbfF{1\x18\x94.\xc0?J<\x87\x0b\xce\xbd\xaf?\x8f\xeb8\th&\xca?\xacU$Lg\x1a\x98?\nV\xfdvu\xe3\xad\xbf:R8\x7fCJ\xd5?\xf3\xf2\xd8\xfb\xe1\xb2\xab?$\xde\xc0\xc1a\x16\xd4?\xff8\xa1\xf9+.\xcf?\xe5\xbf\x92"f\xc4\xb4\xbfU\xbdd\xd6C`\xa5\xbf\xf6\x92l\xf9\x97\xe0\xde?\xbfb\xc3*~\x82\xa8?\x11\xb7\x84\x1d\xafF\xc8\xbf\\\xaf\x8b\x94`3\xd3\xbf\xf6\xf4\xec\xc8\x17,\xcf?\xeej\xee0\x81\x84\xa4?xL\xde7\xd1X\xc9\xbfZ?\x91\xed2\x96\xc5?\x8c\x03l.\xa5r\xa4?\xc3\x00\xccNN\x91\xda\xbf\xae\x89\xa3\x16\x83\xd6\xc2?\xe4\xaf@\xc6\xbfT\xd5?\xd1\xcb\xf9\xc1\x92z\xe4?\xc2\xbdb\xb6\xbf\xde\x81?\xd4M\xb8\xc8v\xc7\xad?\x0ew\x05\xda\x9e\xb4\xd9?F\xb1L\xf5\xb0\x98\xa5?zxIz3\x9f\xb1?\x17j\xee\x9e\x06.\xc4\xbf\xf6Y7G\\O\xd6\xbf\xcf\x99yT\xbd4\xcd?\xf0GD/\x8b`\xd4\xbfY\x00\xb7\xc2 @\xd2?\xa51h\xfa\xa68\xc9\xbf\x12\xffF\xda\x97\xf9\xb0?G/\xda\xcfL\xd3\xb7\xbf\xd6h~\x9e)\xcb\xd2?\x82-\xa6D\x11A\xb3?b8L^tX\xdf?\xc0\x12\x04h\xbeV\xd1\xbf`\xf1\r\x94\xbb|\xba?\xd2[t\xec1=\x88?\r\x88\xd1p\x98\xea\xb1?^\xf9p\xa3\xe4\x88\xd9?&-\xa0\xe0\xec\xba\xc2?\xee\x8fY\x9aC\\\xd2\xbf\xcc\x9d\x9aG\x85\x12\xc1?S\x10\x0b\x03\x82\x99\xba\xbf@\x99\xf6\xa4rK\xbe\xbf\xd6\xf6\xc2\xe4\xd4\xbb\xd0?\x94w\x05\x80^F\xc3\xbf\x1cc\x90n\x80M\xb8\xbf\x96\xb3\xa2\x03\xaf\x97\x80?\xe9\xa6N\xa5\'G\xce?\x88:\xdf7b\x9c\xc2?\xa9\xe40\xceN\x01\xae\xbf\xeb\x90\xb7\xd6Vk\xb1\xbf3\x7f\xb6\x1e\xe4\x8f\xd2\xbf\xe3z\xfb\xac\x91P\xc8\xbf#\nW\x9a\xb0\xf0\xc4\xbf\x12y20\xf7\x1b\xa3\xbf\xe0\xb0\xd8\t\xc8\xc9\xdf?|\xee\xf1\x12r\x9d\xc5\xbf\xad\x18\xf7\n\xdd\xee\xb2\xbf\x8d\xe5\xdd\xdaOk\xe0\xbf\xe7\x91\x1f\xdf\xe07\xc3?L\xa0I\xf2:=\xd9\xbf&\xf3\x92\x07\xc8\x02\xcd\xbf\xd9\xb0\xee\xd9g\xad\xd0?\xc1\xb2k\xb7\xe4\xd6\xe0\xbf\xb0\xa2Az=\x8e\x98?\x90Z\xda57\xa1\xc9?z\x1f678h\xd8?\xa2\x9cG\x1agq\xcd\xbf\x13}u\xf6\x02\xf8\xc3\xbf\x8f\xa8K\x9f\xf8\xde\xdc?\x97\xdb\xa4\xd5]\xa9y\xbfz3\xdday\x8f\xc7\xbf\xaa|\xd2\xdb\xa4\xf5\xc6\xbf3\xb0gp.\x1f\xcf\xbf\x05\xf3\xd0\xe3\x96#\xbc\xbf\xe4\xff\xd2\xdfYi\xd1?K\xb0\xe0b\x94h\xcc?-\xc84\xa8\xcf\xc9\xd2\xbf\xd2\x0e\x84v\x8ew\xab?!\xe3y/\xfc\xbc\xb9\xbf\xc4RVu\xc0\t\xc9?\xc8?nu\x98\x03\xa4\xbf\xd6\'\x7fu\x0f\xc7\xb7?0Xn\xe8,M\xa4\xbf)\x10\x8d\xe8&\x7f\xe1\xbf&va[\xb4\x10\x88?\xd0OPT\x13Y\xd4\xbf\n\x10\xc2\xd7y\xe8\xc7?\x95\x80\x98l&\xc1\xc5\xbf\x9b\xfco\x80C\\\xc3\xbfP\xa7(\xf2\xa4;b\xbf,\x0c\'\xbfI}\xc2?\xcb\x9d\x12Y*\xba\xa5\xbf\xc9\xce?qaF\xda?wF\x82\xd6\x8ea\xda?\xdf\xf6\xca1\x8fr\xdb?\xd9\x00i\xed\'\xfe\xad\xbf\xec\xe0\xef\x11\x1a\xb6\xd7\xbfvJS\x0cq\x85\xd3?x4\r\xb2f\xa5\xba\xbf\x86\x11\xb7\xeb\x88\x8a\x83?\x7f\xd5\xa5\xc22\x1b\xc4?\xb8k\xcb\x80\xc5\xab\xd9\xbf\x89\xf8\xa1e\xe1\x10\xda?\xdaa\x97\xff\xb0\xff\xcb?q\xa8\x13\x1b\x9e\x8b\xb6?]wX\xd8c\x82\xcc?;\xb9\xba!\x8e\xd2\xc1?\xff[\x9f\x87r\xe8\x9d?\x834\n\x12\x93\xb2\xb3\xbfe_\xee\xb2\r\xa7\xc7\xbf\xcf$\xdb\x01\xb8a\xb2?w\xce;p\xf3\x1d\xb7?u\xcb\x89D\xc8T\xd1?\xfa1\x88\':\xaf\xa9?\xb8\x9a\xe5CmM\xcb\xbf\x8c1\'\xef?8\xd9\xbf\x1e\x15\x05\xf9\xf4S\xa0\xbf\x8a%\x88w\x0c\x1e|\xbf\xdb\x83\x1c\xac\x87\x1c\x99\xbfO\xfa\x83\x17\xfb|\xd8\xbf<\xac\xf4[\x021\xd1?l\xa7\x0c\xcf})\xd1?\x8e\xa3)!ZX\xca\xbff\x80R\xff\x9a\xca\xc9?\xc87\xc3%\x97}\xce?YD\xa8\xd1U\xaf\x83?`\xbey\xca\x19Z\xce\xbfr\xa9\x1e(i\xd0\xd9?\xcaj\x19K\x04a\xb8?\x03<\rg\xff\x10\xb0\xbf5\xf0hD&\xbb\xc8?\x9e\xc2)\xe3\x90\xf4\xd9?\xaf\xce\xb9\xcax\xd1\xbf\xbf$\ns," \xc6?:p\x82\x1e/\x17\xdf?\x12{n\x16s\xdd\xd1\xbfw\x86\x19C|\x93\xc1\xbf\xc8\x82\\\xfa\xa0!\xc3\xbf\x0b\r\xd9I\x10D\xa4\xbf\x91\x1eR\\k\xe0\xaa\xbf\x00\x84\xb7\x83;@\xb3?\xac]\xad)\x84@\xca\xbf\xa8\x03%\xfb\xdb\xec\xc3\xbfqF\xd3\xe1WH\xb3?G\xcf\xa8\xdd&\xd4\xa3?\xb9\xfbM8v\xf8\xcb?\xa8\x91 k\xdf2\xba?\x02[(\xb7\xf7\xb2\xc8?\xc8\xa2\xeb\x13\x88I\xd2\xbf&\xb2?\x91\xe4\x89\xb8\xbf\x14\x06\xfa\xda\xf6\x92\xdd?\xaa\xd0\xda\x84\xce\x17\xb9?\xb6C\xe3\xa4\xa4\xea\xc7?\x1d;&f|t\xb1?7\xd1\xd4\xe2\xb38\xbb?b\xe8\xe9\x92C\x8e\xad\xbfW\xf8\x03 \x98\x92\xec?\x91r\xb7^\x9eZ\xb9\xbf*C\xe6\xb1\xd6\x9e\x83\xbfg\xdd_\x96\x10f\xe3\xbf\x99d\xb0\xaaD\xb3\xd1?~\x85\xc0`\x0e\xac\xc1\xbf\xbd\x178\xb2g \x8f\xbf-\xfa\x1fL\xb5\xe5\xc0\xbf-\xf5;\xdd\\\xc0\xa1\xbf\x95\xc4\xec\xbd\x1a1\xb2\xbf\x98\xe6\xadV\x92\t\x86\xbf:o[\xc2\xcb\x08\x8b\xbf#\xc6\xd9\xe8\xff\xbc\xa3\xbf\xc55\xe1>\x00}\xa5\xbf\x94>o\x0b\xb1\xef\xd4?\xec9\x90A\x914\xcc?\x8c\x10\xdan\xede\xcc?e\xbd\xcb\xa28p\xc7\xbf\x1a\x86\x1b)\xf0\x1b\xd4?\xe4\x1b\xdbE7\x1b\xd2?\x97\\\xb5\xfe|\xb5\xc1\xbf\x8d\x11\x1d\xa7\xb2a\xd8?\xb7\xcf\x1e\xa7\xfc\xdc\xc5\xbf\xbe?\x82`\xf6x\xdd\xbfj\x8dc\xb6\xd9\x9f\xd1?\x8by4e\xc8\x98\x9e\xbf\x1bjS\x03\xf1B\xcf?\xc5!\xef\x92l"\xc8\xbf\xefnx\xc050\xd4\xbfb\x14P1\xbf\xb5\xd3?_\x94\x87\n,\x84\xd6\xbf\xf6\xe7*!\xfb\xf9\xd8\xbf\n\x07\x1734\xcf\xde\xbf\xd8x\xd6J\x14[\xe6\xbfL\x03\xf4\xea+\xa0\xd0\xbf\x9e~H\x8f\xf2Z\xe1\xbf\xcd6\xea\xcf\xe1:\x82\xbf\x89\xcf\x9e\xc7.\xe4\xe1\xbf:\xe3C\xd8$\x82\xd1\xbf9\xb8\xaf\x1e\x10\xa8\xe2?m\x15\x9f\xfb\x83\x16\xb6?\x96\xb8\xd6qX\t\x8b?\x97j\xe6\xa0\x99\xee\xd9\xbf\xeb\xa8\x9c\x8b\xbeo\xaf\xbf\xd0\x9c\xa8\x82\xaf\xa1\x88?\xab)\xe1\x0e\xd2\xae\xd9\xbftw\xe2D\xb0&\xa0?\x05t\xd0\xc3I\x0f\xd3?\xdb\xd2\xbek\xdcI\xb6\xbf=i\xf0\x93\n?\xa9\xbfC\xa7>\xa56V\xe0\xbf\xc9#\x92\rCc\xd6\xbf\xa0`\xdc\xb2Q\xec\xd0?'
tbasg437
I00
sg438
I00
sg402
g1
(g403
g3
NtRp1529
(dp1530
g406
(I00
I00
tp1531
sg408
S'float64'
p1532
sg410
g412
sg413
I00
sg32
Nsbsg443
Nsbsg32
g1526
sg34
Nsg402
g1529
sbag1
(g414
g3
NtRp1533
(dp1534
g13
S'auto_1531'
p1535
sg15
Nsg16
g1
(g17
g3
NtRp1536
(dp1537
g20
(lp1538
(lp1539
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp1540
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp1541
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp1542
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp1543
a(g131
I255
g30
S"self.b_f = theano.shared(value=np.zeros((n_h, ), dtype=config.floatX), name='b_f')"
tp1544
aasbsg427
g1
(g428
g3
NtRp1545
(dp1546
g32
S'b_f'
p1547
sg432
(lp1548
g434
(g435
(I0
tS'b'
tRp1549
(I1
(I16
tg412
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
tbasg437
I00
sg438
I00
sg402
g1
(g403
g3
NtRp1550
(dp1551
g406
(I00
tp1552
sg408
S'float64'
p1553
sg410
g412
sg413
I00
sg32
Nsbsg443
Nsbsg32
g1547
sg34
Nsg402
g1550
sbag1
(g414
g3
NtRp1554
(dp1555
g13
S'auto_1529'
p1556
sg15
Nsg16
g1
(g17
g3
NtRp1557
(dp1558
g20
(lp1559
(lp1560
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp1561
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp1562
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp1563
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp1564
a(g131
I251
g30
S"self.W_hc = theano.shared(value=Wh_value, name='W_hc')"
tp1565
aasbsg427
g1
(g428
g3
NtRp1566
(dp1567
g32
S'W_hc'
p1568
sg432
(lp1569
g434
(g435
(I0
tS'b'
tRp1570
(I1
(I16
I16
tg412
I00
S'\x9b(\xcf\xff\xfb7\xd5?\xdf\xc5\xbb\xea\xe6\xa5\xc0\xbfX-c\xf6?\xa6\xc9?\xd6C\xe4\xd6\x02\x8c\xb2?i\x95\x1a~o\xd6\xb9\xbfu\xb8\xd4\xfa\x06\xc1\xc4?\x13u~=\xf2\xb1\xd8\xbf\xb5\x82\x99zLc\xc2?\x0eHg\xaaO.\xc9?.\xf1\x16\xf7\x07z\xb1?d\x91@ \x8b\xf9\xd4?gi\xc0\t\x08o\x91\xbf-}P(\xfe\x16\xa3\xbf&\x97\x93\xb7\xf7\xb8\xb6?\xab\xf8>\xe7?\xc4\xcb?\xb1K\xb0,"<\xc2?\xbf\xccB@\xa8\x01\xad\xbf\xfc\x8b\xe3\x10\xe8\xd8\xcf\xbf\x9d\xa4;\xd98;\xc5?f\xa7\x1b\xfa*D\xc9\xbf\xec_\x10\xd3O/\xca\xbf\xe8\xe4\xf4>\xd6\xf2\xc4\xbf\xb4\xc3l;\x02\x8c\x8d?s\x8a\x01\xb9B{\xc9\xbf\xd23\x078\xc7+\xd2\xbfI\xbc\x95\xb3;\x15\xc5\xbf\x9f~\x1f\xb1jw\xa7\xbf\xe9\xe2p)\xff\x12\xbd?\xaeM\xd5}g8\x91?\xbd\x95:\x9f\x92I\xd1\xbf\x006w\xfc\xccD\xad?\xae\xf3?\xc6\x06\xa8\xb4?t\xb7\xed\xed\x1d\x1e\xbd\xbf\x13\x85\xc7\x03\xd9z\xc9\xbf_\x92V\x85\xfe}\xc9\xbf\xc3\xc5\x8eC\x9b\x04\xc1\xbf9]_\x87\xc4\xb6\xe1?\xbf\x00\xf1\xfaGs\xcc\xbfG\xfa\xf2^!\x06\xb1?\xce!-\xb0\xed\xd9\xc6\xbfE\t\xd4\x80\x031\xc0\xbf\x00\x167r\xab\x98\xc6\xbf\xceD\x9e/s\xa3\xc9?\x97\x11P{MC\xb8?\xc9\x87\xebqV\x8e\xa0\xbf^\n|\x07\x0b\x18\xc0?\xf8\xc4\xdc\x91x\xca\xc7?\x92N\xd0\xc2\x0e9\xcb\xbf\xfa\xe6(~\x17\x83\xc1?OA\xe5\xb8\xd6\xf6\xc6\xbf\xdb\xcc\x9e\x89]\xd0\xca?\x1bt\xb0\xb8\xb4\xaf\xc7?\x03p\x02RE\xd6\xb9?R&\x10\xc9\xdd\xde\xaa\xbf\x02J\xe7\x17\xe3\xd5\xc0\xbf{\xa1\xc5\xe7J\xdf\xb0\xbf6\x85\xa5s\xea\x9c\xc8?|\x05\xc6\xea\xa7\xd5\xc5\xbf\x05\xe3r>\x82n\x89?\xc3\\\xfc\x00J\xf6\xdb\xbf)k\xc4x\xfa\xa9\xb0?\tm\xee>\x86\x91\xd0\xbf\xbd4\xae\x8a\x16\x17\xd5\xbf\x17F\xbc\xf3O\x99\xc0?\x80\xe7\x85\x16W\xec\xaa?\x80\x87t\xfaK`\xbc\xbf\xeeL\xec\x19\x89U\xb3\xbf\x92\xb4z\xc0\x13+\xe2?1\x8d\x9e^\xb8\xd9\xa8\xbf\xa8\x0eqbr\xc1\xa9\xbf\xf5I\x1fR\xaf\xdf\xc4?\xe1\x13`8\x8cS\x96?\x04)[\x8c\x03\x99\xcf?\xe0{\x99\x9e\xb8\xc1\xb1?\x89`\x11\x9e\xd7Z\xc8?\xd9\xe3E\x86\x86_\xbc?$\xe7\xbc\x14T\xa6\xc4?\x84\x1a"-\x9c\xd6\x85\xbf}C\xe9J\xca{\xac?L\x83\xd6@\xa5X\xb1\xbfT\xdfnJ[U\xc3?\x8c\xbe\x15\xdc_\x89\xd5\xbfYA0,\x82<\xc7?\x0e\x11\xf9\xdb\xd2\xef\xcf?\x13!22\x83\xbc\xc7?\xa7{\xe9\xec%\xa6\x9a\xbfy\x06Vs\xd6*\xc0?\xb6\xde\xb2\x81\xbb\xd9\xc8\xbfI\xa7\x03\x95\x8a\xc9\xca?\x06\xac\xc5\xc5b\x96\xd1\xbf\xe5J\x8ch\xd8\xff\xc2?G\xc9:\x85\x87\x0b\xc1?\xcc\x06\xc80\xd4\x07\xba?4\x95\xa7\xb7\x04\x9d\xbc\xbf\xcf\xcf\xc3"HS\xc8?\xf8\xcf,\xd7oe\xdd\xbf\xa3v;G\x00\xdf\xc8?\xe2HT\x94\t\x81\xa8?\xc4<\x80\n\xba\xd0\xd0?\xacC\xe8\x834\x9b\xa9?3\x99B\x12:i\xdd?N\xcf|Lb#\xce\xbf\x87\x08\xdd\xc6C\x80\xc3?i\x0e!\x16&Z\xcc\xbf\xe0\xce\xdb\x1fl-\xa0\xbf\xeb\xe8+(\x84\xc1\xc7?\xd8\x05\xa0u\x86\x03\xc4?\xcc9\xf7,\xe5\xa2\xe0?\xac\xfc\xd8\xaar}\xb6\xbf\xae\x84;%v\x93\xd4?\x91\xd0\xc5JtF\xb0\xbf\x0bH\x9e\x05\xc6m\xc6\xbf\xd1gS\'\x9e\xf7\xd9\xbf\xd7\x81"\x1dd\xd2\xa4?\xc3\xf7\xea\x17\x89\xae\xc0\xbfe\xa0F\xbf\xdc\x1e\xcb?\xcc\x004\xb3\xa8\xe8\xc0\xbf\x0f`\xc2\xd1\xa3\x80\xbe\xbfo\xfbg\x0b\xac\xb2\xb6?*\xe0\xa5\x93\x19\x8a\xdb?\r\xa46#\x1ck\xd1\xbf<\tE]$H\xd0?S4|\xad\xab\xf8\xcb?\x1e,u"\xf5G\xac\xbf\xe4\xdd\xea\x9c\x02\x9d\xc5?\xc7j\x86\xc0\x951\xb2\xbf\x1e4\x81\x82\x9a\xf8\xe2?\xe6\xa6\x1f\xecF\xb2\x9c\xbf\xb68\xf2\x9d\x04\x96\x94?\xe3K\xa7\x0c\xc5\xd9\xb4\xbfItuEc\x18\xdb\xbf\xf0\'\x1aF\x81\xd7\xb0\xbf\x85z\x1c2c\xb3\xad?\xd2y]p\xc7\x03\xd8?\xea\xe6\xba\xbf9|\xbf?\xfc\xe0`\xef\xac=\xa8\xbf>\x0c\xf0\xc8\xdf\xb0\x8e?Y\x98\x18\x02%\xf3\xb4?\xa1\xfe\xf8\xda\xfa@\xb8\xbf\xa1>i\xb9\xe2\xd4\xc5?7\x96\xc1p\\\x00\xda?\xd4\x01\xdb4\xd4=\xb7\xbf\xad\x1e\x8cA\x0bR\xd3?\xca\x89)v\xdd\n\xcc?\x04t\x85"\x1c1\xc1?BKIG(\xa7\x9c?l+\xbf=@\x9e\xb5?{\x97\x13\x1e\x8a\xd3\xab\xbfV\xeeh:\xd0c\xdd?Z\x03j\x9d(\xfd\xc6\xbf\xff\xa0\x8b\xc4\xbb(\xd2?M\xc9\xeb\x00\xa9\xcb\xd8?\xb4\x0c\xec\x9f;\xae\xb4\xbfu\xcf$$O\xa7\xd2?O\xeb\xa5\x12\xfbm\xa2?\\\xc7\x8cI\x9f\xed\x8f?\xa7;3.\x9b\x16\x93\xbft\xe2\xd5\xb3\xd7\xd1\xd9\xbf\xa5Y,\xd3\x97\x88\xc1?\xe2\x94\x1f\xbc\xc9\x18\xd7?\x12\xdf\xff\xd7\x11\x8d\xc6\xbf\x86\xc0"\xf6e\x1d\xcb?\xae)XE\x05\xd0\x95\xbf\xb4|\xcb\xbf\xa7{\xd1\xbf\xad\xbc\xf8\xef\xb6\xee\xcf?)M\xa4\xc1\x01\xfa\xda?\xe3\xb4C\xec\x83j\xc9\xbf\xd9\x15^\xd4c\x9f\xab?\x12\xdc5O(\t\xd7\xbf\x16\x87\xe9\xb6\xfb\x81\x85\xbf\xf8Z\xf9A\xb6\x1b\xbf?\x12\x12_\xf1\xea\x0b\xdc?-\xef\xbdj\xd2\xeb\xd8?\xeb\xf8KW\xacG\xda?\xf6j\x8a\xeb\xef\xdd\xc0\xbfk\x95\xa9\xa7\x91a\xaf\xbf\x89\x85\xa9\xb9\xfe\xa0\xda\xbf-\xd7\x06\xce\x8d\xe2\xc6\xbf\x1f\xd7\xd4A\xb1:\xd7\xbfBs"\xde\xf4d\xb7?\xeb\xf3\x86\xfb\xbdM\xc6\xbf\xf6\x0f?\xf5l\x9f\xd1\xbf\xbd\x0f\xae0\x1c\xbf\xb6\xbf\x11\x04\xf8\x89A\xf5\xd2\xbf;\xb7\xb9{\xee\xc6\xb3?\xd2\xa0\x10Cc4\xb2?\xc9\xf0N\x94\xa24\xb4\xbf\x12\xac\x8b\x8b\xb1a\xc7\xbf\x92\xef=\x14Zn\xd5\xbf\xa1\r%7{\xc5\xc1?\x7fE\xf8\xa0\xb8F\xad?\x8d\xb5[5X\xb7\xbd?\xd7\xd9\xe1$\xa3\x9c\xb3\xbf\xd3:\xc0\xdc\xea\xe4\xab\xbf:\xaa\r\xb3m\x12\xd7?\xb9Ky\xc0\xfd7\xc3\xbf\xa5Q\x0b\x13\\\x02\xb4\xbf\xa5\x17\xf5\xc4\xf6\xcd\xc7?\x9f\xe7\x12\x10\xe6b\xb3?\x91\xf1\xb4v{_\xe0\xbf\x10j\r\x84\x95\x01\xdb\xbf\xb4w\xc8\x9c\x87%\xc5\xbf\xb0H\x0b\xc3,!\xcd?~\x06\xc8\x89X~\xc5?\xfd\xbb}t\xef\x9f\xc0?7\x9f\x80\xc9z\x16\xc4?\xd9\x80\x17n\x98\x01\xcf\xbfd\xbe\x1b\x1d\xc7;\xc3?\x9a\\x\xf2\'{\xcd\xbfKkdjFP\xce?j\xac=\xb1\x8cV\xc0\xbf\xc9\xcf\xcab)\x06\xb2?\xc2\t\xc6\t\xf2\xfd\xdd\xbf\x0f\xbf=\x8a\x0c\x95\xd5\xbfDec/js\xd1?\xf2(u\n\xc4"\xc6?8# E\xab|\xd3\xbfJl<\xa0\xc8\x91\xd4?\xcc(\x8c_\xdas\xd1\xbf\xed;\xd8\x01\xafpt?\xab\x14m\xf5\xf7\xb9\xbe\xbfy\xbf\xc3\x06\x9e\x8c\xcd\xbf]\xae7q\xe2\xaf\xd2?t$!(\xaf\xf5\xda?\xb7\xc4\x13\x86\xb0\xd1\xa6?]\x81\x1a\xd7}j\xd8?\xc6\xd8%lm\xff\xb1\xbf\xf9\x84\xed\xbf\x1c\xba\x9b?X\xc0\xfe\xd3\xa3\xd4\xa0?.\x1a\xfa-\xe1\x81\xd2\xbf\xe4\xda\xb8\n\x1a\xf7\xbf?f,fc\xce\xb5\xc6?(Z\xc0Qb4\xa6\xbf9;@\xaci\x11\xdb\xbf\xcb\x878\xa0|\x88\xb7?@`\x84\xcf~=\xd8\xbf\xd2Mv\'\xec\xf5\xc9\xbfZ<\x89\xb4i\xd2\xa0?UV\'-\x13\xa1\xc8\xbf\x10lv\xfd<<\xb0?\x17mf\'u\xf4\xac\xbf\xc4\xff]\x82\x83\x16\xda\xbf\x11\xc1\xbe\x94\x17\x80\xa5?\xc3\x85\xea\xbfB\xc5\xc2?\x8cn\xd5\x98\xca2\xd0?\xfcm8\xf1\xd9u\xb7\xbf^\x9b\xcf\xea\xc9z\x8f\xbf\x05}l\x11\xf7\xeb\xd7\xbf\xb9\x06\x83\xdf/p\xdf?N\x81\x97w\x83\x14\xd8?\xe7\xd9\x19a\x8cL\x80\xbf\xa3K\xafb\xa1\xf5\x9f\xbf\xa3k\xb4\xac\x18q\xe7\xbf\x01\xbc\'zo\x90\xd0?{E\xa8s\xf5\x02\xc2?U\xb52\n\x8e\x02\xca?'
tbasg437
I00
sg438
I00
sg402
g1
(g403
g3
NtRp1571
(dp1572
g406
(I00
I00
tp1573
sg408
S'float64'
p1574
sg410
g412
sg413
I00
sg32
Nsbsg443
Nsbsg32
g1568
sg34
Nsg402
g1571
sbag1
(g414
g3
NtRp1575
(dp1576
g13
S'auto_1533'
p1577
sg15
Nsg16
g1
(g17
g3
NtRp1578
(dp1579
g20
(lp1580
(lp1581
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp1582
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp1583
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp1584
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp1585
a(g131
I257
g30
S"self.b_c = theano.shared(value=np.zeros((n_h, ), dtype=config.floatX), name='b_c')"
tp1586
aasbsg427
g1
(g428
g3
NtRp1587
(dp1588
g32
S'b_c'
p1589
sg432
(lp1590
g434
(g435
(I0
tS'b'
tRp1591
(I1
(I16
tg412
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
tbasg437
I00
sg438
I00
sg402
g1
(g403
g3
NtRp1592
(dp1593
g406
(I00
tp1594
sg408
S'float64'
p1595
sg410
g412
sg413
I00
sg32
Nsbsg443
Nsbsg32
g1589
sg34
Nsg402
g1592
sbasg16
g1
(g17
g3
NtRp1596
sg445
(lp1597
g272
ag1
(g10
g3
NtRp1598
(dp1599
g13
S'auto_1893'
p1600
sg15
I1
sg16
g1
(g17
g3
NtRp1601
(dp1602
g20
(lp1603
(lp1604
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp1605
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp1606
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp1607
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp1608
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp1609
aasbsg32
Nsg34
g284
sg402
g1
(g403
g3
NtRp1610
(dp1611
g406
(I00
I00
tp1612
sg408
g409
sg410
g412
sg413
I00
sg32
Nsbsbasg447
g1
(ctheano.scan_module.scan_op
Scan
p1613
g3
NtRp1614
(dp1615
S'profile'
p1616
I00
sg38
(lp1617
g1
(g10
g3
NtRp1618
(dp1619
g13
S'auto_1544'
p1620
sg15
Nsg16
g1
(g17
g3
NtRp1621
(dp1622
g20
(lp1623
(lp1624
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp1625
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp1626
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp1627
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp1628
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp1629
aasbsg32
Nsg34
Nsg402
g1
(g403
g3
NtRp1630
(dp1631
g406
(I00
tp1632
sg408
g453
sg410
g412
sg413
I00
sg32
Nsbsbag1
(g10
g3
NtRp1633
(dp1634
g13
S'auto_1551'
p1635
sg15
Nsg16
g1
(g17
g3
NtRp1636
(dp1637
g20
(lp1638
(lp1639
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp1640
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp1641
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp1642
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp1643
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp1644
aasbsg32
Nsg34
Nsg402
g1
(g403
g3
NtRp1645
(dp1646
g406
(I00
tp1647
sg408
g584
sg410
g412
sg413
I00
sg32
Nsbsbag1
(g10
g3
NtRp1648
(dp1649
g13
S'auto_1558'
p1650
sg15
Nsg16
g1
(g17
g3
NtRp1651
(dp1652
g20
(lp1653
(lp1654
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp1655
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp1656
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp1657
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp1658
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp1659
aasbsg32
Nsg34
Nsg402
g1
(g403
g3
NtRp1660
(dp1661
g406
(I00
tp1662
sg408
g725
sg410
g412
sg413
I00
sg32
Nsbsbag1
(g10
g3
NtRp1663
(dp1664
g13
S'auto_1565'
p1665
sg15
Nsg16
g1
(g17
g3
NtRp1666
(dp1667
g20
(lp1668
(lp1669
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp1670
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp1671
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp1672
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp1673
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp1674
aasbsg32
Nsg34
Nsg402
g1
(g403
g3
NtRp1675
(dp1676
g406
(I00
tp1677
sg408
g844
sg410
g412
sg413
I00
sg32
Nsbsbag1
(g10
g3
NtRp1678
(dp1679
g13
S'auto_1600'
p1680
sg15
Nsg16
g1
(g17
g3
NtRp1681
(dp1682
g20
(lp1683
(lp1684
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp1685
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp1686
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp1687
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp1688
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp1689
aasbsg32
S'h0[t-1]'
p1690
sg34
Nsg402
g1137
sbag1
(g10
g3
NtRp1691
(dp1692
g13
S'auto_1617'
p1693
sg15
Nsg16
g1
(g17
g3
NtRp1694
(dp1695
g20
(lp1696
(lp1697
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp1698
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp1699
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp1700
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp1701
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp1702
aasbsg32
S'c0[t-1]'
p1703
sg34
Nsg402
g1399
sbag1
(g10
g3
NtRp1704
(dp1705
g13
S'auto_1776'
p1706
sg15
Nsg16
g1
(g17
g3
NtRp1707
(dp1708
g20
(lp1709
(lp1710
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp1711
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp1712
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp1713
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp1714
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp1715
aasbsg32
S'W_hf_copy'
p1716
sg34
Nsg402
g1529
sbag1
(g10
g3
NtRp1717
(dp1718
g13
S'auto_1777'
p1719
sg15
Nsg16
g1
(g17
g3
NtRp1720
(dp1721
g20
(lp1722
(lp1723
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp1724
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp1725
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp1726
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp1727
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp1728
aasbsg32
S'b_f_copy'
p1729
sg34
Nsg402
g1550
sbag1
(g10
g3
NtRp1730
(dp1731
g13
S'auto_1778'
p1732
sg15
Nsg16
g1
(g17
g3
NtRp1733
(dp1734
g20
(lp1735
(lp1736
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp1737
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp1738
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp1739
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp1740
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp1741
aasbsg32
S'W_hc_copy'
p1742
sg34
Nsg402
g1571
sbag1
(g10
g3
NtRp1743
(dp1744
g13
S'auto_1779'
p1745
sg15
Nsg16
g1
(g17
g3
NtRp1746
(dp1747
g20
(lp1748
(lp1749
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp1750
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp1751
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp1752
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp1753
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp1754
aasbsg32
S'b_c_copy'
p1755
sg34
Nsg402
g1592
sbasS'var_mappings'
p1756
(dp1757
S'outer_inp_from_outer_out'
p1758
(dp1759
I0
I5
sI1
I6
ssS'inner_out_from_outer_inp'
p1760
(dp1761
I0
(lp1762
sI1
(lp1763
sI2
(lp1764
sI3
(lp1765
sI4
(lp1766
sI5
(lp1767
I0
asI6
(lp1768
I1
asI7
(lp1769
sI8
(lp1770
sI9
(lp1771
sI10
(lp1772
ssS'inner_out_from_inner_inp'
p1773
(dp1774
I0
g1763
sI1
g1764
sI2
g1765
sI3
g1766
sI4
g1767
sI5
g1768
sI6
g1769
sI7
g1770
sI8
g1771
sI9
g1772
ssS'outer_inp_from_inner_out'
p1775
(dp1776
I0
I5
sI1
I6
ssS'inner_inp_from_inner_out'
p1777
(dp1778
I0
(lp1779
I4
asI1
(lp1780
I5
assS'outer_inp_from_inner_inp'
p1781
(dp1782
I0
I1
sI1
I2
sI2
I3
sI3
I4
sI4
I5
sI5
I6
sI6
I7
sI7
I8
sI8
I9
sI9
I10
ssS'outer_out_from_inner_inp'
p1783
(dp1784
I0
I-1
sI1
I-1
sI2
I-1
sI3
I-1
sI4
I0
sI5
I1
sI6
I-1
sI7
I-1
sI8
I-1
sI9
I-1
ssS'outer_out_from_outer_inp'
p1785
(dp1786
I0
I-1
sI1
I-1
sI2
I-1
sI3
I-1
sI4
I-1
sI5
I0
sI6
I1
sI7
I-1
sI8
I-1
sI9
I-1
sI10
I-1
ssS'outer_out_from_inner_out'
p1787
(dp1788
I0
I0
sI1
I1
ssS'inner_out_from_outer_out'
p1789
(dp1790
I0
g1767
sI1
g1768
ssS'inner_inp_from_outer_out'
p1791
(dp1792
I0
g1779
sI1
g1780
ssS'inner_inp_from_outer_inp'
p1793
(dp1794
I0
(lp1795
sI1
(lp1796
I0
asI2
(lp1797
I1
asI3
(lp1798
I2
asI4
(lp1799
I3
asI5
g1779
sI6
g1780
sI7
(lp1800
I6
asI8
(lp1801
I7
asI9
(lp1802
I8
asI10
(lp1803
I9
asssS'tap_array'
p1804
(lp1805
(lp1806
I-1
aa(lp1807
I-1
aasS'n_mit_mot'
p1808
I0
sS'_hash_inner_graph'
p1809
I4644787806613997460
sg445
(lp1810
g1
(g10
g3
NtRp1811
(dp1812
g13
S'auto_1811'
p1813
sg15
I0
sg16
g1
(g17
g3
NtRp1814
(dp1815
g20
(lp1816
(lp1817
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp1818
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp1819
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp1820
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp1821
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp1822
a(S'/usr/local/lib/python2.7/dist-packages/theano/scan_module/scan.py'
p1823
I761
S'scan'
p1824
S'condition, outputs, updates = scan_utils.get_updates_and_outputs(fn(*args))'
tp1825
a(g131
I289
S'recurrent_fn'
p1826
S'h_t, c_t = self.lstm_as_activation_function(Wix, Wfx, Wcx, Wox, h_tm1, c_tm1)'
tp1827
a(g131
I711
S'lstm_as_activation_function'
p1828
S'h_t = T.tanh(c_t)'
tp1829
aasbsg32
Nsg34
g1
(g35
g3
NtRp1830
(dp1831
g38
(lp1832
g1
(g10
g3
NtRp1833
(dp1834
g13
S'auto_1810'
p1835
sg15
I0
sg16
g1
(g17
g3
NtRp1836
(dp1837
g20
(lp1838
(lp1839
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp1840
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp1841
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp1842
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp1843
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp1844
a(g1823
I761
g1824
S'condition, outputs, updates = scan_utils.get_updates_and_outputs(fn(*args))'
tp1845
a(g131
I289
g1826
S'h_t, c_t = self.lstm_as_activation_function(Wix, Wfx, Wcx, Wox, h_tm1, c_tm1)'
tp1846
a(g131
I709
g1828
S'c_t = f_t * c_tm1 + (1 - f_t) * T.tanh(Wcx + T.dot(h_tm1, self.W_hc) + self.b_c)'
tp1847
aasbsg32
Nsg34
g1
(g35
g3
NtRp1848
(dp1849
g38
(lp1850
g1
(g10
g3
NtRp1851
(dp1852
g13
S'auto_1802'
p1853
sg15
I0
sg16
g1
(g17
g3
NtRp1854
(dp1855
g20
(lp1856
(lp1857
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp1858
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp1859
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp1860
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp1861
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp1862
a(g1823
I761
g1824
S'condition, outputs, updates = scan_utils.get_updates_and_outputs(fn(*args))'
tp1863
a(g131
I289
g1826
S'h_t, c_t = self.lstm_as_activation_function(Wix, Wfx, Wcx, Wox, h_tm1, c_tm1)'
tp1864
a(g131
I709
g1828
S'c_t = f_t * c_tm1 + (1 - f_t) * T.tanh(Wcx + T.dot(h_tm1, self.W_hc) + self.b_c)'
tp1865
aasbsg32
Nsg34
g1
(g35
g3
NtRp1866
(dp1867
g38
(lp1868
g1
(g10
g3
NtRp1869
(dp1870
g13
S'auto_1801'
p1871
sg15
I0
sg16
g1
(g17
g3
NtRp1872
(dp1873
g20
(lp1874
(lp1875
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp1876
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp1877
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp1878
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp1879
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp1880
a(g1823
I761
g1824
S'condition, outputs, updates = scan_utils.get_updates_and_outputs(fn(*args))'
tp1881
a(g131
I289
g1826
S'h_t, c_t = self.lstm_as_activation_function(Wix, Wfx, Wcx, Wox, h_tm1, c_tm1)'
tp1882
a(g131
I707
g1828
S'f_t = T.nnet.sigmoid(Wfx + T.dot(h_tm1, self.W_hf) + self.b_f)  #self.w_cf * c_tm1'
tp1883
aasbsg32
Nsg34
g1
(g35
g3
NtRp1884
(dp1885
g38
(lp1886
g1
(g10
g3
NtRp1887
(dp1888
g13
S'auto_1800'
p1889
sg15
I0
sg16
g1
(g17
g3
NtRp1890
(dp1891
g20
(lp1892
(lp1893
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp1894
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp1895
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp1896
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp1897
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp1898
a(g1823
I761
g1824
S'condition, outputs, updates = scan_utils.get_updates_and_outputs(fn(*args))'
tp1899
a(g131
I289
g1826
S'h_t, c_t = self.lstm_as_activation_function(Wix, Wfx, Wcx, Wox, h_tm1, c_tm1)'
tp1900
a(g131
I707
g1828
S'f_t = T.nnet.sigmoid(Wfx + T.dot(h_tm1, self.W_hf) + self.b_f)  #self.w_cf * c_tm1'
tp1901
aasbsg32
Nsg34
g1
(g35
g3
NtRp1902
(dp1903
g38
(lp1904
g1
(g10
g3
NtRp1905
(dp1906
g13
S'auto_1799'
p1907
sg15
I0
sg16
g1
(g17
g3
NtRp1908
(dp1909
g20
(lp1910
(lp1911
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp1912
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp1913
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp1914
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp1915
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp1916
a(g1823
I761
g1824
S'condition, outputs, updates = scan_utils.get_updates_and_outputs(fn(*args))'
tp1917
a(g131
I289
g1826
S'h_t, c_t = self.lstm_as_activation_function(Wix, Wfx, Wcx, Wox, h_tm1, c_tm1)'
tp1918
a(g131
I707
g1828
S'f_t = T.nnet.sigmoid(Wfx + T.dot(h_tm1, self.W_hf) + self.b_f)  #self.w_cf * c_tm1'
tp1919
aasbsg32
Nsg34
g1
(g35
g3
NtRp1920
(dp1921
g38
(lp1922
g1633
ag1
(g10
g3
NtRp1923
(dp1924
g13
S'auto_1798'
p1925
sg15
I0
sg16
g1
(g17
g3
NtRp1926
(dp1927
g20
(lp1928
(lp1929
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp1930
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp1931
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp1932
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp1933
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp1934
a(g1823
I761
g1824
S'condition, outputs, updates = scan_utils.get_updates_and_outputs(fn(*args))'
tp1935
a(g131
I289
g1826
S'h_t, c_t = self.lstm_as_activation_function(Wix, Wfx, Wcx, Wox, h_tm1, c_tm1)'
tp1936
a(g131
I707
g1828
S'f_t = T.nnet.sigmoid(Wfx + T.dot(h_tm1, self.W_hf) + self.b_f)  #self.w_cf * c_tm1'
tp1937
aasbsg32
Nsg34
g1
(g35
g3
NtRp1938
(dp1939
g38
(lp1940
g1678
ag1704
asg16
g1
(g17
g3
NtRp1941
sg445
(lp1942
g1923
asg447
g449
sbsg402
g1
(g403
g3
NtRp1943
(dp1944
g406
(I00
tp1945
sg408
S'float64'
p1946
sg410
g412
sg413
I00
sg32
Nsbsbasg16
g1
(g17
g3
NtRp1947
sg445
(lp1948
g1905
asg447
g1191
sbsg402
g1
(g403
g3
NtRp1949
(dp1950
g406
(I00
tp1951
sg408
g409
sg410
g412
sg413
I00
sg32
Nsbsbag1717
asg16
g1
(g17
g3
NtRp1952
sg445
(lp1953
g1887
asg447
g1191
sbsg402
g1
(g403
g3
NtRp1954
(dp1955
g406
(I00
tp1956
sg408
g409
sg410
g412
sg413
I00
sg32
Nsbsbasg16
g1
(g17
g3
NtRp1957
sg445
(lp1958
g1869
asg447
g1
(g615
g3
NtRp1959
(dp1960
g32
S'sigmoid'
p1961
sg620
g1
(ctheano.tensor.nnet.sigm
ScalarSigmoid
p1962
g3
NtRp1963
(dp1964
g624
ctheano.scalar.basic
upgrade_to_float
p1965
sg32
S'scalar_sigmoid'
p1966
sbsg628
(dp1967
sg630
Nsg632
(dp1968
sg634
I00
sbsbsg402
g1
(g403
g3
NtRp1969
(dp1970
g406
(I00
tp1971
sg408
g409
sg410
g412
sg413
I00
sg32
Nsbsbag1691
asg16
g1
(g17
g3
NtRp1972
sg445
(lp1973
g1851
asg447
g1
(g615
g3
NtRp1974
(dp1975
g618
g619
sg620
g1
(ctheano.scalar.basic
Mul
p1976
g3
NtRp1977
(dp1978
g624
g625
sg32
S'mul'
p1979
sbsg32
S'Elemwise{mul,no_inplace}'
p1980
sg628
(dp1981
sg630
(S'multiply'
p1982
I2
I1
tp1983
sg632
(dp1984
sg634
I00
sg635
S"elementwise multiplication\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Parameters\n    ----------\n    scalar_op\n        An instance of a subclass of scalar.ScalarOp which works uniquely\n        on scalars.\n    inplace_pattern\n        A dictionary that maps the index of an output to the\n        index of an input so the output is calculated inplace using\n        the input's storage. (Just like destroymap, but without the lists.)\n    nfunc_spec\n        Either None or a tuple of three elements,\n        (nfunc_name, nin, nout) such that getattr(numpy, nfunc_name)\n        implements this operation, takes nin inputs and nout outputs.\n        Note that nin cannot always be inferred from the scalar op's\n        own nin field because that value is sometimes 0 (meaning a\n        variable number of inputs), whereas the numpy function may\n        not have varargs.\n\n    Note\n    ----\n    | Elemwise(add) represents + on tensors (x + y)\n    | Elemwise(add, {0 : 0}) represents the += operation (x += y)\n    | Elemwise(add, {0 : 1}) represents += on the second argument (y += x)\n    | Elemwise(mul)(rand(10, 5), rand(1, 5)) the second input is completed along the first dimension to match the first input\n    | Elemwise(true_div)(rand(10, 5), rand(10, 1)) same but along the second dimension\n    | Elemwise(int_div)(rand(1, 5), rand(10, 1)) the output has size (10, 5)\n    | Elemwise(log)(rand(3, 4, 5))\n\n    "
p1985
sbsbsg402
g1
(g403
g3
NtRp1986
(dp1987
g406
(I00
tp1988
sg408
g409
sg410
g412
sg413
I00
sg32
Nsbsbag1
(g10
g3
NtRp1989
(dp1990
g13
S'auto_1809'
p1991
sg15
I0
sg16
g1
(g17
g3
NtRp1992
(dp1993
g20
(lp1994
(lp1995
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp1996
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp1997
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp1998
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp1999
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp2000
a(g1823
I761
g1824
S'condition, outputs, updates = scan_utils.get_updates_and_outputs(fn(*args))'
tp2001
a(g131
I289
g1826
S'h_t, c_t = self.lstm_as_activation_function(Wix, Wfx, Wcx, Wox, h_tm1, c_tm1)'
tp2002
a(g131
I709
g1828
S'c_t = f_t * c_tm1 + (1 - f_t) * T.tanh(Wcx + T.dot(h_tm1, self.W_hc) + self.b_c)'
tp2003
aasbsg32
Nsg34
g1
(g35
g3
NtRp2004
(dp2005
g38
(lp2006
g1
(g10
g3
NtRp2007
(dp2008
g13
S'auto_1804'
p2009
sg15
I0
sg16
g1
(g17
g3
NtRp2010
(dp2011
g20
(lp2012
(lp2013
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp2014
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp2015
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp2016
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp2017
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp2018
a(g1823
I761
g1824
S'condition, outputs, updates = scan_utils.get_updates_and_outputs(fn(*args))'
tp2019
a(g131
I289
g1826
S'h_t, c_t = self.lstm_as_activation_function(Wix, Wfx, Wcx, Wox, h_tm1, c_tm1)'
tp2020
a(g131
I709
g1828
S'c_t = f_t * c_tm1 + (1 - f_t) * T.tanh(Wcx + T.dot(h_tm1, self.W_hc) + self.b_c)'
tp2021
aasbsg32
Nsg34
g1
(g35
g3
NtRp2022
(dp2023
g38
(lp2024
g1
(g10
g3
NtRp2025
(dp2026
g13
S'auto_1803'
p2027
sg15
I0
sg16
g1
(g17
g3
NtRp2028
(dp2029
g20
(lp2030
(lp2031
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp2032
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp2033
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp2034
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp2035
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp2036
a(g1823
I761
g1824
S'condition, outputs, updates = scan_utils.get_updates_and_outputs(fn(*args))'
tp2037
a(g131
I289
g1826
S'h_t, c_t = self.lstm_as_activation_function(Wix, Wfx, Wcx, Wox, h_tm1, c_tm1)'
tp2038
a(g131
I709
g1828
S'c_t = f_t * c_tm1 + (1 - f_t) * T.tanh(Wcx + T.dot(h_tm1, self.W_hc) + self.b_c)'
tp2039
aasbsg32
Nsg34
g1
(g35
g3
NtRp2040
(dp2041
g38
(lp2042
g1
(ctheano.tensor.var
TensorConstant
p2043
g3
NtRp2044
(dp2045
g13
S'auto_1650'
p2046
sg15
Nsg16
g1
(g17
g3
NtRp2047
(dp2048
S'unique_value'
p2049
Nsbsg32
NsS'cached'
p2050
I01
sg402
g1
(g403
g3
NtRp2051
(dp2052
g406
(tsg408
S'int16'
p2053
sg410
g411
(S'i2'
I0
I1
tRp2054
(I3
S'<'
NNNI-1
I-1
I0
tbsg413
I00
sg32
Nsbsg463
g434
(g435
(I0
tS'b'
tRp2055
(I1
(tg2054
I00
S'\x01\x00'
tbsbasg16
g1
(g17
g3
NtRp2056
sg445
(lp2057
g2025
asg447
g1
(g1143
g3
NtRp2058
(dp2059
g1146
(tsg1147
(lp2060
sg1149
(lp2061
I0
asg1151
(lp2062
sg1153
I01
sg1154
(S'x'
tp2063
sg1156
(dp2064
I0
(lp2065
I0
assbsbsg402
g1
(g403
g3
NtRp2066
(dp2067
g406
(I01
tp2068
sg408
g2053
sg410
g2054
sg413
I00
sg32
Nsbsbag1869
asg16
g1
(g17
g3
NtRp2069
sg445
(lp2070
g2007
asg447
g1
(g615
g3
NtRp2071
(dp2072
g618
g619
sg620
g1
(ctheano.scalar.basic
Sub
p2073
g3
NtRp2074
(dp2075
g624
g625
sg32
S'sub'
p2076
sbsg32
S'Elemwise{sub,no_inplace}'
p2077
sg628
(dp2078
sg630
(S'subtract'
I2
I1
tp2079
sg632
(dp2080
sg634
I00
sg635
S"elementwise subtraction\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Parameters\n    ----------\n    scalar_op\n        An instance of a subclass of scalar.ScalarOp which works uniquely\n        on scalars.\n    inplace_pattern\n        A dictionary that maps the index of an output to the\n        index of an input so the output is calculated inplace using\n        the input's storage. (Just like destroymap, but without the lists.)\n    nfunc_spec\n        Either None or a tuple of three elements,\n        (nfunc_name, nin, nout) such that getattr(numpy, nfunc_name)\n        implements this operation, takes nin inputs and nout outputs.\n        Note that nin cannot always be inferred from the scalar op's\n        own nin field because that value is sometimes 0 (meaning a\n        variable number of inputs), whereas the numpy function may\n        not have varargs.\n\n    Note\n    ----\n    | Elemwise(add) represents + on tensors (x + y)\n    | Elemwise(add, {0 : 0}) represents the += operation (x += y)\n    | Elemwise(add, {0 : 1}) represents += on the second argument (y += x)\n    | Elemwise(mul)(rand(10, 5), rand(1, 5)) the second input is completed along the first dimension to match the first input\n    | Elemwise(true_div)(rand(10, 5), rand(10, 1)) same but along the second dimension\n    | Elemwise(int_div)(rand(1, 5), rand(10, 1)) the output has size (10, 5)\n    | Elemwise(log)(rand(3, 4, 5))\n\n    "
p2081
sbsbsg402
g1
(g403
g3
NtRp2082
(dp2083
g406
(I00
tp2084
sg408
g409
sg410
g412
sg413
I00
sg32
Nsbsbag1
(g10
g3
NtRp2085
(dp2086
g13
S'auto_1808'
p2087
sg15
I0
sg16
g1
(g17
g3
NtRp2088
(dp2089
g20
(lp2090
(lp2091
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp2092
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp2093
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp2094
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp2095
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp2096
a(g1823
I761
g1824
S'condition, outputs, updates = scan_utils.get_updates_and_outputs(fn(*args))'
tp2097
a(g131
I289
g1826
S'h_t, c_t = self.lstm_as_activation_function(Wix, Wfx, Wcx, Wox, h_tm1, c_tm1)'
tp2098
a(g131
I709
g1828
S'c_t = f_t * c_tm1 + (1 - f_t) * T.tanh(Wcx + T.dot(h_tm1, self.W_hc) + self.b_c)'
tp2099
aasbsg32
Nsg34
g1
(g35
g3
NtRp2100
(dp2101
g38
(lp2102
g1
(g10
g3
NtRp2103
(dp2104
g13
S'auto_1807'
p2105
sg15
I0
sg16
g1
(g17
g3
NtRp2106
(dp2107
g20
(lp2108
(lp2109
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp2110
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp2111
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp2112
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp2113
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp2114
a(g1823
I761
g1824
S'condition, outputs, updates = scan_utils.get_updates_and_outputs(fn(*args))'
tp2115
a(g131
I289
g1826
S'h_t, c_t = self.lstm_as_activation_function(Wix, Wfx, Wcx, Wox, h_tm1, c_tm1)'
tp2116
a(g131
I709
g1828
S'c_t = f_t * c_tm1 + (1 - f_t) * T.tanh(Wcx + T.dot(h_tm1, self.W_hc) + self.b_c)'
tp2117
aasbsg32
Nsg34
g1
(g35
g3
NtRp2118
(dp2119
g38
(lp2120
g1
(g10
g3
NtRp2121
(dp2122
g13
S'auto_1806'
p2123
sg15
I0
sg16
g1
(g17
g3
NtRp2124
(dp2125
g20
(lp2126
(lp2127
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp2128
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp2129
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp2130
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp2131
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp2132
a(g1823
I761
g1824
S'condition, outputs, updates = scan_utils.get_updates_and_outputs(fn(*args))'
tp2133
a(g131
I289
g1826
S'h_t, c_t = self.lstm_as_activation_function(Wix, Wfx, Wcx, Wox, h_tm1, c_tm1)'
tp2134
a(g131
I709
g1828
S'c_t = f_t * c_tm1 + (1 - f_t) * T.tanh(Wcx + T.dot(h_tm1, self.W_hc) + self.b_c)'
tp2135
aasbsg32
Nsg34
g1
(g35
g3
NtRp2136
(dp2137
g38
(lp2138
g1648
ag1
(g10
g3
NtRp2139
(dp2140
g13
S'auto_1805'
p2141
sg15
I0
sg16
g1
(g17
g3
NtRp2142
(dp2143
g20
(lp2144
(lp2145
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp2146
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp2147
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp2148
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp2149
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp2150
a(g1823
I761
g1824
S'condition, outputs, updates = scan_utils.get_updates_and_outputs(fn(*args))'
tp2151
a(g131
I289
g1826
S'h_t, c_t = self.lstm_as_activation_function(Wix, Wfx, Wcx, Wox, h_tm1, c_tm1)'
tp2152
a(g131
I709
g1828
S'c_t = f_t * c_tm1 + (1 - f_t) * T.tanh(Wcx + T.dot(h_tm1, self.W_hc) + self.b_c)'
tp2153
aasbsg32
Nsg34
g1
(g35
g3
NtRp2154
(dp2155
g38
(lp2156
g1678
ag1730
asg16
g1
(g17
g3
NtRp2157
sg445
(lp2158
g2139
asg447
g449
sbsg402
g1
(g403
g3
NtRp2159
(dp2160
g406
(I00
tp2161
sg408
S'float64'
p2162
sg410
g412
sg413
I00
sg32
Nsbsbasg16
g1
(g17
g3
NtRp2163
sg445
(lp2164
g2121
asg447
g1191
sbsg402
g1
(g403
g3
NtRp2165
(dp2166
g406
(I00
tp2167
sg408
g409
sg410
g412
sg413
I00
sg32
Nsbsbag1743
asg16
g1
(g17
g3
NtRp2168
sg445
(lp2169
g2103
asg447
g1191
sbsg402
g1
(g403
g3
NtRp2170
(dp2171
g406
(I00
tp2172
sg408
g409
sg410
g412
sg413
I00
sg32
Nsbsbasg16
g1
(g17
g3
NtRp2173
sg445
(lp2174
g2085
asg447
g1
(g615
g3
NtRp2175
(dp2176
g618
g619
sg620
g1
(ctheano.scalar.basic
Tanh
p2177
g3
NtRp2178
(dp2179
g624
g1965
sg32
S'tanh'
p2180
sbsg32
S'Elemwise{tanh,no_inplace}'
p2181
sg628
(dp2182
sg630
(S'tanh'
I1
I1
tp2183
sg632
(dp2184
sg634
I00
sg635
S"hyperbolic tangent of a\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Parameters\n    ----------\n    scalar_op\n        An instance of a subclass of scalar.ScalarOp which works uniquely\n        on scalars.\n    inplace_pattern\n        A dictionary that maps the index of an output to the\n        index of an input so the output is calculated inplace using\n        the input's storage. (Just like destroymap, but without the lists.)\n    nfunc_spec\n        Either None or a tuple of three elements,\n        (nfunc_name, nin, nout) such that getattr(numpy, nfunc_name)\n        implements this operation, takes nin inputs and nout outputs.\n        Note that nin cannot always be inferred from the scalar op's\n        own nin field because that value is sometimes 0 (meaning a\n        variable number of inputs), whereas the numpy function may\n        not have varargs.\n\n    Note\n    ----\n    | Elemwise(add) represents + on tensors (x + y)\n    | Elemwise(add, {0 : 0}) represents the += operation (x += y)\n    | Elemwise(add, {0 : 1}) represents += on the second argument (y += x)\n    | Elemwise(mul)(rand(10, 5), rand(1, 5)) the second input is completed along the first dimension to match the first input\n    | Elemwise(true_div)(rand(10, 5), rand(10, 1)) same but along the second dimension\n    | Elemwise(int_div)(rand(1, 5), rand(10, 1)) the output has size (10, 5)\n    | Elemwise(log)(rand(3, 4, 5))\n\n    "
p2185
sbsbsg402
g1
(g403
g3
NtRp2186
(dp2187
g406
(I00
tp2188
sg408
g409
sg410
g412
sg413
I00
sg32
Nsbsbasg16
g1
(g17
g3
NtRp2189
sg445
(lp2190
g1989
asg447
g1974
sbsg402
g1
(g403
g3
NtRp2191
(dp2192
g406
(I00
tp2193
sg408
g409
sg410
g412
sg413
I00
sg32
Nsbsbasg16
g1
(g17
g3
NtRp2194
sg445
(lp2195
g1833
asg447
g1191
sbsg402
g1
(g403
g3
NtRp2196
(dp2197
g406
(I00
tp2198
sg408
g409
sg410
g412
sg413
I00
sg32
Nsbsbasg16
g1
(g17
g3
NtRp2199
sg445
(lp2200
g1811
asg447
g2175
sbsg402
g1
(g403
g3
NtRp2201
(dp2202
g406
(I00
tp2203
sg408
g409
sg410
g412
sg413
I00
sg32
Nsbsbag1833
asS'seqs_arg_offset'
p2204
I5
sS'gpua'
p2205
I00
sg628
g1168
((ltRp2206
sS'n_nit_sot'
p2207
I0
sS'n_outs'
p2208
I2
sS'mintaps'
p2209
(lp2210
g464
(g465
S'\xff\xff\xff\xff\xff\xff\xff\xff'
tRp2211
ag464
(g465
S'\xff\xff\xff\xff\xff\xff\xff\xff'
tRp2212
asS'n_sit_sot'
p2213
I2
sS'nit_sot_arg_offset'
p2214
I7
sS'as_while'
p2215
I00
sS'truncate_gradient'
p2216
I-1
sS'n_seqs'
p2217
I4
sg32
S'scan_fn'
p2218
sS'mode_instance'
p2219
g1
(ctheano.compile.mode
Mode
p2220
g3
NtRp2221
(g1
(ctheano.gof.vm
VM_Linker
p2222
g3
NtRp2223
(dp2224
S'use_cloop'
p2225
I01
sS'lazy'
p2226
NsS'allow_partial_eval'
p2227
NsS'fgraph'
p2228
NsS'c_thunks'
p2229
NsS'callback_input'
p2230
NsS'callback'
p2231
NsS'allow_gc'
p2232
I00
sS'mode'
p2233
g2221
sS'updated_vars'
p2234
(dp2235
sbg1
(ctheano.gof.optdb
Query
p2236
g3
NtRp2237
(dp2238
g32
S'OPT_FAST_RUN'
p2239
sS'require'
p2240
g1
(ctheano.misc.ordered_set
OrderedSet
p2241
g3
NtRp2242
(dp2243
S'_OrderedSet__root'
p2244
g1
(ctheano.misc.ordered_set
Link
p2245
g3
NtRp2246
(lp2247
g2246
ag2246
absS'_OrderedSet__map'
p2248
(dp2249
sbsS'subquery'
p2250
(dp2251
sS'position_cutoff'
p2252
NsS'exclude'
p2253
g1
(g2241
g3
NtRp2254
(dp2255
g2244
g1
(g2245
g3
NtRp2256
(lp2257
g2256
ag2256
absg2248
(dp2258
sbsS'include'
p2259
g1
(g2241
g3
NtRp2260
(dp2261
g2244
g1
(g2245
g3
NtRp2262
(lp2263
g1
(g2245
g3
NtRp2264
(lp2265
g2262
ag2262
aS'fast_run'
p2266
abag2264
absg2248
(dp2267
g2266
g2264
ssbsS'extra_optimizations'
p2268
(lp2269
sbtbsS'info'
p2270
g1168
((lp2271
(lp2272
g1804
ag1805
aa(lp2273
g2217
aI4
aa(lp2274
g1808
aI0
aa(lp2275
S'n_mit_mot_outs'
p2276
aI0
aa(lp2277
S'mit_mot_out_slices'
p2278
a(lp2279
aa(lp2280
S'n_mit_sot'
p2281
aI0
aa(lp2282
g2213
aI2
aa(lp2283
S'n_shared_outs'
p2284
aI0
aa(lp2285
g2207
aI0
aa(lp2286
g2216
aI-1
aa(lp2287
g32
ag2218
aa(lp2288
g2233
aNaa(lp2289
g628
ag2206
aa(lp2290
S'gpu'
p2291
aI00
aa(lp2292
g2215
aI00
aa(lp2293
g1616
aI00
aa(lp2294
g2232
aI00
aa(lp2295
g437
aI00
aa(lp2296
g2205
aI00
aatRp2297
sS'_cmodule_key'
p2298
((t(S'CLinker.cmodule_key'
p2299
(t(t(tS'NPY_ABI_VERSION=0x1000009'
S'md5:5951dbcd215530e16c8c014e8a22e751'
(g449
((g1137
((I-1
I4
tp2300
I00
tt(g1571
((I-1
I8
tp2301
I00
ttt(I1
(I00
ttt(g449
((g1137
(g2300
I00
tt(g1529
((I-1
I6
tp2302
I00
ttt(I1
(I00
ttt(g2058
((g2051
((S'dfbfa6b497a7e9cf3e97bf96db4ff1e7'
I2
I0
tI00
ttt(I1
(I00
ttt(g1191
((g1660
((I-1
I2
tp2303
I00
tt(g2159
((I0
I0
tI00
ttt(I1
(I00
ttt(g1191
((g1645
((I-1
I1
tp2304
I00
tt(g1943
((I1
I0
tI00
ttt(I1
(I00
ttt(g1191
((g2165
((I3
I0
tI00
tt(g1592
((I-1
I9
tp2305
I00
ttt(I1
(I00
ttt(g1191
((g1949
((I4
I0
tI00
tt(g1550
((I-1
I7
tp2306
I00
ttt(I1
(I00
ttt(g2175
((g2170
((I5
I0
tI00
ttt(I1
(I00
ttt(g1959
((g1954
((I6
I0
tI00
ttt(I1
(I00
ttt(g2071
((g2066
((I2
I0
tI00
tt(g1969
((I8
I0
tI00
ttt(I1
(I00
ttt(g1974
((g1969
((I8
I0
tI00
tt(g1399
((I-1
I5
tp2307
I00
ttt(I1
(I00
ttt(g1974
((g2082
((I9
I0
tI00
tt(g2186
((I7
I0
tI00
ttt(I1
(I00
ttt(g1191
((g1986
((I10
I0
tI00
tt(g2191
((I11
I0
tI00
ttt(I1
(I00
ttt(g2175
((g2196
((I12
I0
I1
tI00
ttt(I1
(I00
ttt(g1630
((I-1
I0
tI00
tt(g1645
(g2304
I00
tt(g1660
(g2303
I00
tt(g1675
((I-1
I3
tI00
tt(g1137
(g2300
I00
tt(g1399
(g2307
I00
tt(g1529
(g2302
I00
tt(g1550
(g2306
I00
tt(g1571
(g2301
I00
tt(g1592
(g2305
I00
ttttp2308
sg2281
I0
sS'vector_outs'
p2309
(lp2310
I00
aI00
asS'vector_seqs'
p2311
(lp2312
I00
aI00
aI00
aI00
asS'n_tap_outs'
p2313
I0
sg437
I00
sg2284
I0
sg2232
I00
sg2233
NsS'output_types'
p2314
(lp2315
g1
(g403
g3
NtRp2316
(dp2317
g406
(I00
I00
tp2318
sg408
g409
sg410
g412
sg413
I00
sg32
Nsbag1610
asg2291
I00
sg2276
I0
sS'shared_arg_offset'
p2319
I7
sg2278
g2279
sbsbsg402
g2316
sbag1
(g454
g3
NtRp2320
(dp2321
g13
S'auto_1894'
p2322
sg15
Nsg16
g1
(g17
g3
NtRp2323
sg32
Nsg402
g460
sg463
g464
(g465
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp2324
sbasg16
g1
(g17
g3
NtRp2325
sg445
(lp2326
g257
asg447
g1
(g469
g3
NtRp2327
(dp2328
g472
(g473
(g460
NNtRp2329
tp2330
sbsbsg402
g1
(g403
g3
NtRp2331
(dp2332
g406
(I00
I00
tp2333
sg408
g409
sg410
g412
sg413
I00
sg32
Nsbsbag1
(g414
g3
NtRp2334
(dp2335
g13
S'auto_1938'
p2336
sg15
Nsg16
g1
(g17
g3
NtRp2337
(dp2338
g20
(lp2339
(lp2340
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp2341
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp2342
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp2343
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp2344
a(g131
I220
g30
S"self.W_xi = theano.shared(value=Wx_value, name='W_xi')"
tp2345
aasbsg427
g1
(g428
g3
NtRp2346
(dp2347
g32
g431
sg432
(lp2348
g434
(g435
(I0
tS'b'
tRp2349
(I1
(I16
I16
tg412
I00
S'^Q\xd7\x9f\xa4\x8c\xc1\xbf\xe7\x92\n\xfd\xce\x0b\xd1?w\xc7\x10\xed\xf8\xc3\xc0\xbf\xd9\x91\x89\xcb\xbbx\xc1?u1\xb1\x9f\xb0\x1b\xc2\xbfp\xce\xe4\xcbf\xf6\xb5?=E\xe6\xfe\x89\xe6\xc0?\x92\x0b\xa3)\xf2\x8b\xcf?\nz\x024\x8d\xee\xd6?2^\x94\x9d\xb2\xf6\xd4?]`\xa5=*\xf7\xc0\xbfB\xa7\xd1\x8b\x82\xd1\xa2\xbf?H\x0f@\xc2\xc6\xd2\xbf)\xf0\r}\xef*\xae\xbfk\xba\xb3\xf7\x97\xe6x?\xec\xa2Z\xc5z\xda\xb9\xbfNY\x88b]\x1d\xc0\xbf8\xbf$\x81f\x83\xd0?\x08\xf6Z\xac\x19\n\xcd?\xe8\xc5\xa837\x8b\xb9?\xa2\x89i\xf5\xaep\xd4\xbf\xbd\xff\r\x8d\x1a\xb8\xa9?\x15\xcb\xd1\x03@\x97\xb8\xbf|)\xe9<8\r\xd5?/\x87m\xd2.\xd6\xdc\xbf]\x95\xcb8\xe2\xe1\xc1\xbf{e\x04\xde\xd6\xc5\xc2\xbf\x9e\x8f\x1bTY\xdc\xbd\xbfgy\x040|\xa4\xce?\x00\xcdcI\xa1\xd1\xe2\xbfvmb&t\xa1\xaa\xbf\xde\xb2+\x90\x1a9\xcb?+`Qc\x1f]\xcf?}E\xbf\xbb\x0b\x92\xc1\xbf\x99\xb5\xfe\x1a\xbe\xc0\xc5\xbf\xda\xc7\xdf\xf9\\(\xb6?\xf8\xbb\x8f\x96+U\xa3?\x1eXH\rg\xc4\x91?\x98\xf6\xd9\xf88i\xee\xbf\x86N\xd0\xb8\xe5\x08\xd2\xbf\x15\xcb\x02\xf9\x85\x9f\xcb\xbf6\xd3\x03k\x89\x93\xc4?),O\x0cZ\r\xd7\xbf^\xce\x8f\x8a\xfc\xbe\xd0\xbfD\xa8@\xe8\xda\xc2\xa3\xbf\xdf\x1blf\xfd\x99\xd4\xbf\xd4u[ZB\x92\xc4?(\xf8\x13\x05\xc2\x0c\xb9\xbfb\x93\xbd+\x95S\xdd?\xd8M\xee\xdd\xa7&\xc4\xbf]\xb4\xdax\xe9p\xc2\xbf\xd6\xfa\x01^\xf5\xbd\xc9?\n\x99|%\x85\xf8\xc4\xbf \x80_Cb/\xd8?\xe4\xc7\xf3\x12\x14\xe8\xbe?\xae\x95t\xd8\xc4r\xb3\xbfK\xabZ]\x07\x95\xa4\xbfb\xfe\xaa\xdb?\xce\xe6?5k\xbc\xee\x1cF\xbf?zQ"\xb3\xd4B\xa3?"y\xdcmF\xf8\xa0\xbf\xe1;077\x98\xd0?\x12\xc9f\x88\x10K\xd8\xbf\x17\xe2\x88L+1\xa7\xbf\x0b(\xad\x99T\xab\xe6\xbf\x99H\x97\xde\xac\x11\xc1\xbfLK[i7"\xcb?-~\x86\x15\x9e\x1d\xd6?\xa5\xa4j\xb2\x1bd\xc3?Ef^i\x9fz\xc4?|4\xe8\x1eUt\xdb\xbfw\xee\xcc\xfe<\xb5\xc5\xbf3j\xc6\xb6)\x97\xd7?\x14\xc5\x96\x11v\xc3\xc0\xbfg%\xe9\x10\xdfg\xa1\xbfI\xd3I\xee)\xc7\xc9\xbf\\\xb4\x98\xcbJ\xe1\xcd\xbf@\xea\x02\x19\xe4\x18\xbe\xbf\x0fsO\xd7^\'\xc5\xbf\x9a\xa0\\\xce\xda\xa3\xce?0\\\xbe!;\x91\xab?\xd2\xf8\x8f YM\xd0?f1\xc9\xf3\x1f2\xd6\xbf\x11\x11\xa5\xc2t\x9b\xd3?e)F\xd2\x9e\xf8u?\x8eW<\x92\xf8m\xdd?\xffK\x89Xy\x05\x8b\xbf\x8f:\x1cM\xf9\xe4\xd7\xbfG\x11\xd9\xed*\x8c\xd4?\xdd\xbd\x83Srx\xa1\xbf\x8a.c\x1c\x887\xe1\xbfH\x9c\x04D\xbd\x95\xa2?q\xed<\x1b\xe2\x98\xad?\xf1{\xf6\xfe\xc17\xd1?\xbcW=\xf7/\xb3\xec\xbfw\x9co\xf5\xc4a\xd2?\x01\xe3\x19\x11\xcb_\xbe\xbf\xdb"\x88S\xe9\xd1\xde?4.\xff7\x14~\xdb\xbf\xa0\x8d\x9f\x91js\xc1?SpO\xf0\x99Y\xba?\xd2Bh\x80\xed\x03\xbb\xbf&\x97\xfc\x99\x04\xc3\xc8\xbf\x8c\xf4\xc3Cp\xeb\xb7\xbf\xda\xd14M\xaa0\xb6\xbf\xbbi\xd3\x02\x15\x0e\xd4\xbf\xbf\xbb\xf1\x83\x97\xc6\xcf?\x10\xb1\t\x12\xa7y\xd1\xbf\xcf\t\xb2\x80\xfd^\xd0?\xb0\xfc\xc6\xd9y\x9f\xdc\xbf\x1e\x05\x8e\x9b\'\xae\xa6\xbf2o\xa8\xe1u\xc6\xa4\xbf\xa1q\xd5[f,p\xbf\xb2\xb5\x10\xd1\xf9\x99\xce?Q\xda\x13\x82\x83\xe6\xa9\xbf.\xe2B(\xb7N\xbd\xbf\x9fo\x15\xf9\x90\x83\xa9\xbf\x1b]:}hd\xcf?\x1f\x1a\xe1\x82*J\xd3\xbfC\x9e+~\xa8T\xd0\xbf\x04\xc6\xa4\xd3\xa2N\xdf\xbf\xaa\x86\r*\xce7\xe0?\x9f\xe7\xfa|P\x8e\xd2\xbf\xda\xfeLb\xba*\xde\xbf\x02\xd4Gr\x80\xe2\xc9\xbfY\xae\x94\xbf;\x99\xc3\xbf\x14\xdf\xf0\xfd\x81r\xd7?\x8b\x06r\xae\xe8\xc0\xbd\xbf\x1d\xf3\xa7\x0fY\xac\xb2?5\x1dz\xb9\x08\xa7\xdc\xbf\xa2\xb3\xa7\xfb3\x9f\xaa?hc\xcd+xa\xda\xbf\xa1-\xbb\xf7\xf0\x11\xb4\xbfK\t\x90\xf2\xdcP\xc8\xbfN\xcf<\xfd\xc2\xd5\x8d?\x0e8\xa5|\x13M\xc4?\x9e\x96\xb8n\xd4_\xd5\xbf\xb2\x97\xfc\x16\xc5.\xd2\xbf"\xd5\xb2H\x86\xc7\xa8?X\xf4\\\x9a>\xfe\xc5?\x13\x80\xd1\x9c\x91\xad\xd6?\x0f\x87G_y3\xbe\xbf\x85\xc76\xbe\x18\xdd\xd7\xbf\xaev\r\x01Z\xe3\xa7?\xb9\x9e\x89\xa9\xb8m\xc9\xbf\xa7\xea\x89\xaa\xd9\x94\xcd\xbf\x8a\x03\x16\xaf\xe4\x87\xd6?\x92\xe8\x192\x87\xcc\xc3?\xa1D\x00\xf3iL\xc7\xbf=\xc6f\xe1\x1d)s\xbf\xf4\xc3\xffU\xed\xee\x95\xbf\xdc\x8e\xa7k\xda!\xa5?Wz\xe1$\xea\xfa\xb9\xbf>\xe6\x08\xf7\xa7f\xde\xbf\n\xf9\xe2\xb8B>\xcf\xbf\xa8\x18\xe8\xb3\x1d\x06\xc1\xbfm#\xfc\xb2T\xc9|?\xc0W\xa3\xe4\x13Q\xd1\xbf@\t\xffQ/\xd8\xa7?\x8a\xc2+j\xc0f\xb8\xbfD\xc7\x97\xba\x9eM\xc8\xbf\xd4\x11\x95\x0e\rS\xd4\xbf\xa4$\xd6\xbbP\x93\xbc?=\xdb\xe9\xba\xcd&\xbb?\xc0\x84\x9b\xd2h\x9b\xc9?\xa6\x1d\xa5\xe6\xc4\x93\xc1?I\xc6\xf4\xd1\xe8\xf8\xc3?\xcc:\xfc\xe1\xf9s\xb8?\x04\xf1\xe8/r"\xdc\xbf\xa3\xc4\xban\x15\xdd\xb1\xbf\xf1\xc1I\xdf\t\xeb\xd6\xbfe~\xd8\xebJ\xe8\xd5?\xd9ByJ:\xb3l\xbf98d\x81\xebP\xd4?\xf2\xd48:3|\xd0\xbf~\xab\xc4\xad\xbd\x84\x97\xbfG\xedF\xab\x1f\xdb\xb0?\xcc\xc5b1\x80-\xb5\xbf\x83\x0e;\xa9{\t\xa8?\x938^\x07\xf1\xb6\xd7?\xde]A\xa6\xb7\x82\xd0\xbf\xe1J\xe2\x1aw\x1a\xe5\xbf\r\xff\xb9\x0e(\x9c\xd9?\x1a\xe8\xfa\nLU\xc9\xbf/\xbc\xd0=\xc2\xf5\xd1?&\xb3\x0fHy\xdc\xc4?rC\x83\x9bd\xbc\xab\xbf\x0c\x7f.\xac\x91W\xb8?\xb3\x89V\xdb\xa0?\xd2\xbf\x15\xbe\xef\x1c[\xfd\x95?\xe4\xfe\x81\x9a`\x02\xc3?\x1b\xd0\xfalU\xc7\xc8\xbf\x0c\x7fCx\xb0V\xb8\xbf^\x80\x11@\x88\x01\xb4?\x97\xf8\xa9\r!,\xd5?sk|\xc2-\xd8I\xbf\x16\xf1\x12O\xee\x8f\xbb\xbf\xb0:\x9f\x89\xc0\xbd\xa2\xbf%\xe7_\xa7\x14\x90\xd2?\xb1\r\xcc\xe0D\x87\xc4\xbfr=\xb1\xf1\x017\xb3\xbf\xa6\xfd\xa1\xf4z;\xc4\xbf5=sQ\x0b\'\xaa\xbf\x9d|\xab\xa3`Z\xab?\xb8Iy\xde\xc3\x8a\xd0?[\xeb\xaeS!\xff\xe0\xbfO\xa1\xcf\xb0\x90\xc6\xc1?\xccLK\x81\xe7\x87\xcc\xbfr\xbe\x88\xf2m\xfa\xc2?nj\xa0\x7f\x8b\xd5\xd3?\x033\x13\x12\xea\xdb\xcf?\xe3\x06sI\xfe7\xa4?p\xd5\xbc\x1b7\xb4\xca?\xb9\xd4K\x8230\xce\xbf\x8a\x050\x00P]\x91\xbf\xbbd\xb7\xec\xc0O\xd8?\xa0s\x12\xd0\x94A\xc9\xbf.?-\xb2\x1d@\xa9?l\xfe\x9a\xbd\x91\xa0\xb7\xbf\x0f*^yP\xf9\xa8\xbf#\x1f\xc0\t\x12\xfd\xb9?<\xe6\xe28\xcc?\xb1\xbf2\xf7n\x9c\x7f\xedK\xbfG\x04#\xd0\x8b%\xc0\xbf\xed\x1f\xae\xe6P3\xdd\xbf4d\xe5\xf2N\xb7\xa8?wK\xbf\xeeF \xbc?\x9d|"\xeca\x1d\xd6?\xb9\x9e\xd2\xad\xf7\xe0\xa0\xbf\xd5\xaf\x9d\xe4\xb9P\xd6\xbf8\xbd\xce\xca\xd5 \xc8\xbf!\xb4G\xe3\xe4J\xc1?\xfaG\xb7\xdb\xb9\xa3\x95\xbf\xb5\x19b\xdf\xe6\xdf\xb1?)\x00\xebo\xdd\x98\xb6\xbfj\xf7{\xc0\xbc\xea\xdd?oX\xc5\xc1\xd6\xa5\xdb?\xa9d\r\xa1\xa1\xcf\xcd\xbf\xae\xc4N*\xc8\x16\xcd?\xe6\xad\x0c\x19\xc2u\xb3?\x04\xefX\xad\x18\xc5k?}\xe9\xdfb\x90\x82\xcb\xbf\xc3\xea\x01\x1b\xca\xf1\xd9?\x05++\xee\xe5\xa4\xd2?-\xfc\x0f%HP\xd7\xbfqb4\xc8\xc7"\xd6?g\xc1\x14\x10Q\xa6\x83\xbf\xbd\xdf\xab\xb2\x19!\xc3\xbf\xdd\x97\x1b\x03 @\xcf\xbfk:\x81\xce\xf7;\xce?\xbcx\x98b\xe3\x97\xb9?[\x16/\xb4\x01\xf9\xcb\xbf\xe5\xa8WY\x83\xf4\xc9\xbf\xbb\xbf\x1d\xb4-\xcd\xb8\xbf%\xe3 \x14sf\xc0\xbf\xeda\x85\x89\x93\xe3\xc0?'
tbasg437
I00
sg438
I00
sg402
g1
(g403
g3
NtRp2350
(dp2351
g406
(I00
I00
tp2352
sg408
S'float64'
p2353
sg410
g412
sg413
I00
sg32
Nsbsg443
Nsbsg32
g431
sg34
Nsg402
g2350
sbasg16
g1
(g17
g3
NtRp2354
sg445
(lp2355
g242
asg447
g449
sbsg402
g1
(g403
g3
NtRp2356
(dp2357
g406
(I00
I00
tp2358
sg408
S'float64'
p2359
sg410
g412
sg413
I00
sg32
Nsbsbag1
(g454
g3
NtRp2360
(dp2361
g13
S'auto_1964'
p2362
sg15
Nsg16
g1
(g17
g3
NtRp2363
sg32
Nsg402
g460
sg463
g464
(g465
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp2364
sbasg16
g1
(g17
g3
NtRp2365
sg445
(lp2366
g227
asg447
g1
(g469
g3
NtRp2367
(dp2368
g472
(g473
(g460
NNtRp2369
tp2370
sbsbsg402
g1
(g403
g3
NtRp2371
(dp2372
g406
(I00
I00
tp2373
sg408
g2359
sg410
g412
sg413
I00
sg32
Nsbsbasg16
g1
(g17
g3
NtRp2374
sg445
(lp2375
g212
asg447
g482
sbsg402
g483
sbag1
(g454
g3
NtRp2376
(dp2377
g13
S'auto_1988'
p2378
sg15
Nsg16
g1
(g17
g3
NtRp2379
sg32
Nsg402
g460
sg463
g464
(g465
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp2380
sbasg16
g1
(g17
g3
NtRp2381
sg445
(lp2382
g197
asg447
g1
(g469
g3
NtRp2383
(dp2384
g472
(g460
tp2385
sbsbsg402
g1
(g403
g3
NtRp2386
(dp2387
g406
(tsg408
g462
sg410
g465
sg413
I00
sg32
Nsbsbag1
(g10
g3
NtRp2388
(dp2389
g13
S'auto_1992'
p2390
sg15
I0
sg16
g1
(g17
g3
NtRp2391
(dp2392
g20
(lp2393
(lp2394
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp2395
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp2396
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp2397
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp2398
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp2399
aasbsg32
Nsg34
g1
(g35
g3
NtRp2400
(dp2401
g38
(lp2402
g1
(g10
g3
NtRp2403
(dp2404
g13
S'auto_1990'
p2405
sg15
I0
sg16
g1
(g17
g3
NtRp2406
(dp2407
g20
(lp2408
(lp2409
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp2410
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp2411
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp2412
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp2413
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp2414
aasbsg32
Nsg34
g1
(g35
g3
NtRp2415
(dp2416
g38
(lp2417
g1
(g10
g3
NtRp2418
(dp2419
g13
S'auto_1972'
p2420
sg15
I0
sg16
g1
(g17
g3
NtRp2421
(dp2422
g20
(lp2423
(lp2424
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp2425
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp2426
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp2427
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp2428
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp2429
aasbsg32
Nsg34
g1
(g35
g3
NtRp2430
(dp2431
g38
(lp2432
g1
(g10
g3
NtRp2433
(dp2434
g13
S'auto_1956'
p2435
sg15
I0
sg16
g1
(g17
g3
NtRp2436
(dp2437
g20
(lp2438
(lp2439
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp2440
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp2441
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp2442
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp2443
a(g131
I267
g30
S'self.Wfx = T.dot(self.input, self.W_xf)'
tp2444
aasbsg32
Nsg34
g1
(g35
g3
NtRp2445
(dp2446
g38
(lp2447
g257
ag1
(g414
g3
NtRp2448
(dp2449
g13
S'auto_1941'
p2450
sg15
Nsg16
g1
(g17
g3
NtRp2451
(dp2452
g20
(lp2453
(lp2454
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp2455
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp2456
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp2457
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp2458
a(g131
I230
g30
S"self.W_xf = theano.shared(value=Wx_value, name='W_xf')"
tp2459
aasbsg427
g1
(g428
g3
NtRp2460
(dp2461
g32
g572
sg432
(lp2462
g434
(g435
(I0
tS'b'
tRp2463
(I1
(I16
I16
tg412
I00
S'\x9d\x1c\x1e\xa6K0\xac\xbfA#\\/4\xd0\xc7?\xd9\xf5\xbd)\x1e\xe6\x98\xbf\xd3V\x00\xcfle\xc4?\x1e{-x\x0f_\xc0?\xe1>Vs\xef\xef\xd3\xbf\x9a4\xa8\x1c\x1cB\xbe?\xd3\x8fZ\xd3\xc7\xcc\xbd?h/\xe9\x9cM~\xc9?\xbbk\xd8\x19c\xc9\xca\xbf\x0f\xa5\xa4\x97y\x81\xd1?z\xbe\x12\xc5\x9eY\xa5\xbf\xa1\xacT\xbf\xf8\xcf\xdf?@\'D#\xf7\t\xdc?H\xdc\xac\xa5:u\xc3\xbf\x10\x86\xe2\xc1Q\xe8\xd5\xbf\xf4\xc2\x1ac\xcfO\xc6?\xda\x85\xe2\xb2/=\xca\xbf\xd5\x888\xd90\\\xd2?E\x07w\xe5\xa0\xf4\xc0?\xf0gb\x80\xfbA\xd7\xbf3\xd3\x05\x98\xab\x06\xc9?s@H\'p\x91\xa1?_y\xc4n\t`\xba?Jt\xfb\xaf~b\xd8?\x02\x8d\x8a\x16J\xa1\xa0\xbf\xa1T>\xca\xb6A\xc8?\x95S-\xff\xff%\xc3\xbf\xf9\xe4\'\'\x9c\\\xc2\xbf\xfa\x06w\xfaA\xec\xab\xbf\x80kM\x19*\xda\xc3\xbf\xf1\xaf\x80\xe0\xeb+\xc2?\x07O\x7f\x81\xcb,\xd5\xbfl\xe0\xeas\xa6\x8b\xca?\x98`,3q^\xc8\xbf\x13\x02I\xc3O,\xb8?\x9eI\x03\x05\xba\xff\xd2\xbf,\x1ab\xce*\x93\xbe?\x98%{>\x18X\xd1?Cq\xd5\xa1\xe8\x02d?\xcd(\xf7\x06g\xc7\xd8?\xdc\xa0\x87\xee{\xe8\xa1\xbfO\x00=h\xd9S\xba?Eo\xdf\xe9l\x9d\xcd\xbfP\xf4K}@\x0f\xbc?\xdc\x9f8t2.\xc2\xbfr\x15\x86\x15r\r\xc7\xbf\xb1\xfd\x84\xb8\x1aH\xd9?Y\xb3z\x1a\xd3R\xd4\xbf\x9a\xb112wa\x9d\xbf\x90\x01$\x87-\xcf\xc6?vg\x92\x13\t\xf6\xad?Y\xdd\xb8\xbf\xa6\x8e\xdd\xbf\xf6\xdd_\x889S\xc3?\xf0<96a\x10\xd6\xbfG\x8e\xd4k=^\xbc\xbf\xb0+v\xdeWC\xaf\xbf\xa8\xe5\x10U8\\\xe7\xbf\xc4\x84\x99\xa6L\x1c\x9b\xbff\x80~\x1d\xdeN\xc5?\xab\xde\xaf\x93S\xc5\xa5\xbf\xff6N\xb6\xc7\xab\xa7?NC\xbc\xb4#\x18\xe2?\xf5\xa9&\x9e\xcd\x01\xd2?|Y\xd6a\xd1g\x8e?\x94!I\xaf1\xb2\xe4?>R=\xc4&]\xc4\xbfq:\xf3\xe21\xa1\xc0?\x86;Q\xfc\xd99\xd9\xbf\xd2;\xaa\xbe4~\xb9?\xaf\xf6\\\xd3b\x85\x9c\xbf\xdfb\x9b\x89K \x8f?Kl\xcd\x98\xf7\xb5\xb7?\xb75i\x8a\x95\xeb\xb1?\xd8M\xdd.{)\xd1\xbf\xa7\x1e0\n\xba\x88\xb8\xbf\xa5ew\x85\x1e\xd3X?\x0b/\xda>\xe7\xdd\xd6\xbfY\xc5\xd5 \xa6\xae\xc9?8\x7fi3I \xde?]\x08{\xdcAm\xb3?t\x81;\xb8\x06\xe3\xc0\xbf\x05\xed2_Wj\xe2\xbf\x947Q\xe5\xa3U\xd8\xbf\x17\x8c3\xfb\xec\xb5\xb5?\xf0!m\xa7\xf02\xd4?\xc3\x97\xaa\x7f\xb9+\xac\xbfG?\xe3\x7f\xbd\xcb\xd7\xbf\x9e\xf9/Up\xdf\xcb\xbf\xf0\x93\x95\xa9\xb2O\xc2\xbf\x8a\x83\xcd\xc8\xb6\xeb\xde\xbf\xd19(4Q\xe0\xb3\xbflv\xd0\xacn\x8e\xcc?\x15#p\'\x94\xe8\xda\xbfG\xf0\x89A\x92\xe8\xc1\xbf:-\xa2p\xc61\xe0\xbf\x80\x8c\xfe\xaex6\xca\xbf\xc4U\x87S\x1b\xf3\xa2\xbfZ4SS\xdcV\xd0?\x19Po\x8bT*\xbd?Kua\xdbf\xef\xd2\xbf\xc6\x06\xd3\xba(\x0f\x98?\xa3\xc3.>*_\xb5\xbf\xd1\xe0|X\xa7[j\xbf\x9a\xfb<\xe8\x0b\x89\xa9\xbfN\x96\x9d\xb7I\x0e\xb4?\x9f\xda\x96\xe9\xb2.\xa7?Lf\x8e\xb5\xd2\xb9\xcb?\x97\xd09D\xf7\xd8\x9d?\xd8\x91\xe8\xc8\xf4\t\xdb?\xff0\xe0:\x80\x9d\xc0?\x05\xa3\xc7\xbc(\xa7\xd7?\x90\x99\xc4\xc6I\x0c\xc7?s\xfb\xc0\xf3u\x87\xc5\xbf\xb3Py\xe0\xfd\xe2\xd3?\x82\xcdn\xb7c\xf2\xd2?\xb1\xed7\xdd\xf9\xf9\xe6\xbf/\xf8\xa4@\xdd\x8c\xc1\xbf\xbb\x81\xc8\x92\x8a\x15\xd7?\x04\xd5\x18\xfe\xc5\xde\xd0?\xe1\xbd\x02\xc0\xde]\xd7\xbf\x87\x1a\xf0\x0e\xfaz\xcb?\xee\x06V\x10\xc1\xa2\xdb?\xa0\x8f\xaf\xcf\x12j\xc3?\xaa\xd3}]\x1b\x9d\xd7\xbfE\x16H\xe5\x03\x15\xc9\xbf\xf6\xf7\x1a\x1a\xdd\xa1\xb9?i\xab\x08Q\xa6\x96\xab\xbfd\x00\x1akNq\xd4?3k\x9b\xbfcf\xc7?\x17\xaa\xcf\xfe,i\xdf?H\xfe0frT\xd0?\xc1&\x8f\xcdb\xae\xc1?\xa5w\xd9\xb0\r\x1e\xb4\xbf\xd60\xc6\xe5\xacx\xd6?\x80\x8a\xc8an\x85V?fm\xa50\x16j\xd0\xbf\tZ\x16\x9f\xd8\xa9\x88?x\xd3\xe2\xe0\xd8\x83\x97\xbf\x05\xda\xc1\xcb\x14\xcb\xcf\xbf|fw\x1f\xa7}\xca?\xa4\xe0Ba\x8d\xf9\xa1\xbfW\x86h\xf1RQ\xb9?z\xf5\x9d\x0b4\xfd\xc8\xbf\xaa\xe9\xf7\x1a\xf2\x13\xa5\xbf\xbe\x8c\xfc\xa8G\xc7\xc8?\xfdM]\xde\x11\x98\xaf\xbfX{\xa6\x9b\xc1a\xb7\xbf\x1e\x90avyy\xe1?\xbb\x7f\x1e\xa4\x89<\xb4?t\xc5f@?w\xc7?\x8d\x9a&_.\xe1\xc7?!\x98a\xe0\x9b\xd2\x98?\xcb\x1e\xe1\nM\xe2\xc0?\xbb(D\xa5\xe9"\xcf\xbf\xb8\xd0\x02\xbb\xdc+\xd7?\x114\xc0\x97\x81\xf3\xd3?\xe2gCt\xf3X\xa8?\xc4&/c\x9e\x08Z?/\xf6.\x00\x7f\xd5\xd3\xbfN"\r\xc8\x0ex\xd0?s\xe3\x8a\xe1\x85R\xb0\xbf\xb9\x9c)\xe45\x83\xc3?\xca\x12\x89,\x00\r\xd7\xbf\xb7\xea\xc5O\xe04\xc4?\xd0\xab\x1ff\xa0n\xa6\xbf.Az\x82\'ch?\x0c\xfd\xeec[\xaf\xd6\xbf\xc8\xb7[\x0c\xe5\xba\xc5?\x02\x0ej\xc4\xce\x99\xc3\xbf\xd7\xec \xf1\xdb\x11\x88\xbf\xca\xf5\xa3\xcb\xd9\xbb\xc9?\xee\xba\x02\xded\xee\x95\xbfC9K\xb3\xa6\xc7\xdf?\x05\xbfV\xa5\xfe\xc2\xcc\xbf\xff\xa9\xbc\xab<\xc8\xae?\x97\xact\xff\xe2s\xba?\'\x9a\xeff\xb6M\xd0\xbf6v\x17\xcdo`\x96?\xf8\xa3\xa3\xaa\xe2\xf1\xa8\xbf\xcf\xa63\xb3|\xe7\xac?\xff\x82\xe0\x88\x91\x08\xbd?\x1f\x01\xaeC<_\xd6?\xc6)\x07\xa5pq\xb2?\xc7\xa1\x83\x1f\x97\x81\xc1?\x19xC\xbd2\xfd\xd7?\xcc\xae\xa0\xee$Y\xd9\xbf\xcc\xd4\xdc\xder\xb7\xb0\xbf\xa5t\x133C\x8b\x83?\x9a\x87^=\x93\xe3\xd8\xbf\r1\xf6\xd0T\xa1\x93?\x97T7\xc5\xb0\xd8\xe2\xbf\xc8\x04\xaf\xd9\xc3\x93\xc6?\xc9\xd1\x0b\xa1\x0e\xa7\xd7\xbf\xb9\xea\xf4\x7f\xda\x04\xd4\xbf\x93W\x1e\xcfm\xc7\xc0?^\xa5\xf8ca\xae\xda\xbf?_CZ$n\xe0?\xe8\xd3[\xc9\xad\xd9\x9d?\x19\xbc\x96\x98\x17\xdb\x98\xbf`I\xe6%G@\xd3?\xe5\x0f\x16i\xccg\x94\xbf\x1f\xf4\x81\xbb\x00\xcd\xae?\xca!\xd3\x80\x89\xf4\xa3\xbft\x93\xb8\xbd\xe2\x0e\xc0\xbf\x05\xc6\xc2<\x89\xc1\xb7?Y\xaa>\xa2\x07\xcd\xc0?\xbf\xefk5\xc6^\xd4\xbf\x7f\xed\x9f\xaa\x912\xcc\xbf\xbb\xbc\x9e\x98\xed\x19\xc5\xbf\xc2\xc8\xb8\x80_L~\xbft}\xe6\xb5M\x1f\xb6?\xe7\xe2\x9f\xd4\xa9?\xe1?\xc6;\xa8\x01B\x9a\xb1?$j\xf0\xcc\xe4P\xa6\xbfb\xc3o\xa5M\xe0\xc6\xbf3F\xa1Mo\x87\xcf?\x13\x7f-\xa5R`h\xbf6-^\x8dN\xdf\xb5?\x88\x16\x8d\xe3>A&\xbf\xf7A\x05`T\x9e\xc1?\xc4\xb2BY\x05\xa3\xbe?\xc4\xbe\x08\xf4\t\xed\xb7?zA\x9c\x88\x90fO?X\xb5\xc6\x06\xf3\xea\x97?\xa1\xab\x9ft\xecw\xb8?\x98CU\xf0\x81\xc9\xde\xbfRD\xee\xb4\xf7q\x81\xbf\xaaC\xe2\x9a\xa0b\xcf?\xc0A\x80\x13y\xbd\xbe\xbf\x92#CO\x90\xb8\xe0\xbf\xea.\xf0\x84\x1a)\xd6\xbf:6\x1eR%@\x93?M\x1e\xb9^v\x10\xc7\xbf\xff\xd8 \xdcs$\xa1?\xbc\xce\xae\x15\xbf\xe7r\xbf\xfc1\t\xec\x9e\x06\xbe\xbfS\xb7T\x83\xa9G\xcd\xbf\xcdq\xcan\xb7\x05\xa9?\x15\xd0\x8c\xf1\x81\xa5\x91?)\xb9\xc5\xd98\xb7\x9f\xbf\x81\xfav\xae\xd1\xea\xcb?\xf9\xf8\xdd\xadS\xc5\xa9?egL\xba\xb0\x12\xc3\xbf\x12\x03\x07\n4\xf3\xb6\xbf\x99\x10\x84\xcdi\xb5\x8f\xbf\x88\xce\xf25n\x89\x9f?\xaff\xc4\xdf\xf4a\xd5?\xf5\x05\xecG]\x02\xdb?\xa3\xef\xb923\x03\xbe\xbf7;K\xda}O\xd0\xbf\x97\x1f\x14\rI_\xc1\xbf|\x15\xa4CY\xe3\xba?\xf4\xe4@\x8e/\xa6\xca?\xe3\x85\xd7\xc6\x8d\x1e\xba\xbfr(\xfa>\xef@\xcd\xbf'
tbasg437
I00
sg438
I00
sg402
g1
(g403
g3
NtRp2464
(dp2465
g406
(I00
I00
tp2466
sg408
S'float64'
p2467
sg410
g412
sg413
I00
sg32
Nsbsg443
Nsbsg32
g572
sg34
Nsg402
g2464
sbasg16
g1
(g17
g3
NtRp2468
sg445
(lp2469
g2433
asg447
g449
sbsg402
g1
(g403
g3
NtRp2470
(dp2471
g406
(I00
I00
tp2472
sg408
S'float64'
p2473
sg410
g412
sg413
I00
sg32
Nsbsbag1
(g454
g3
NtRp2474
(dp2475
g13
S'auto_1971'
p2476
sg15
Nsg16
g1
(g17
g3
NtRp2477
sg32
Nsg402
g460
sg463
g464
(g465
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp2478
sbasg16
g1
(g17
g3
NtRp2479
sg445
(lp2480
g2418
asg447
g1
(g469
g3
NtRp2481
(dp2482
g472
(g473
(g460
NNtRp2483
tp2484
sbsbsg402
g1
(g403
g3
NtRp2485
(dp2486
g406
(I00
I00
tp2487
sg408
g2473
sg410
g412
sg413
I00
sg32
Nsbsbasg16
g1
(g17
g3
NtRp2488
sg445
(lp2489
g2403
asg447
g482
sbsg402
g483
sbag1
(g454
g3
NtRp2490
(dp2491
g13
S'auto_1991'
p2492
sg15
Nsg16
g1
(g17
g3
NtRp2493
sg32
Nsg402
g460
sg463
g464
(g465
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp2494
sbasg16
g1
(g17
g3
NtRp2495
sg445
(lp2496
g2388
asg447
g1
(g469
g3
NtRp2497
(dp2498
g472
(g460
tp2499
sbsbsg402
g1
(g403
g3
NtRp2500
(dp2501
g406
(tsg408
g462
sg410
g465
sg413
I00
sg32
Nsbsbasg16
g1
(g17
g3
NtRp2502
sg445
(lp2503
g182
asg447
g616
sbsg402
g1
(g403
g3
NtRp2504
(dp2505
g406
(tsg408
g462
sg410
g465
sg413
I00
sg32
Nsbsbag1
(g10
g3
NtRp2506
(dp2507
g13
S'auto_1995'
p2508
sg15
I0
sg16
g1
(g17
g3
NtRp2509
(dp2510
g20
(lp2511
(lp2512
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp2513
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp2514
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp2515
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp2516
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp2517
aasbsg32
Nsg34
g1
(g35
g3
NtRp2518
(dp2519
g38
(lp2520
g1
(g10
g3
NtRp2521
(dp2522
g13
S'auto_1993'
p2523
sg15
I0
sg16
g1
(g17
g3
NtRp2524
(dp2525
g20
(lp2526
(lp2527
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp2528
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp2529
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp2530
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp2531
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp2532
aasbsg32
Nsg34
g1
(g35
g3
NtRp2533
(dp2534
g38
(lp2535
g1
(g10
g3
NtRp2536
(dp2537
g13
S'auto_1979'
p2538
sg15
I0
sg16
g1
(g17
g3
NtRp2539
(dp2540
g20
(lp2541
(lp2542
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp2543
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp2544
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp2545
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp2546
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp2547
aasbsg32
Nsg34
g1
(g35
g3
NtRp2548
(dp2549
g38
(lp2550
g1
(g10
g3
NtRp2551
(dp2552
g13
S'auto_1957'
p2553
sg15
I0
sg16
g1
(g17
g3
NtRp2554
(dp2555
g20
(lp2556
(lp2557
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp2558
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp2559
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp2560
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp2561
a(g131
I268
g30
S'self.Wcx = T.dot(self.input, self.W_xc)'
tp2562
aasbsg32
Nsg34
g1
(g35
g3
NtRp2563
(dp2564
g38
(lp2565
g257
ag1
(g414
g3
NtRp2566
(dp2567
g13
S'auto_1947'
p2568
sg15
Nsg16
g1
(g17
g3
NtRp2569
(dp2570
g20
(lp2571
(lp2572
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp2573
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp2574
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp2575
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp2576
a(g131
I250
g30
S"self.W_xc = theano.shared(value=Wx_value, name='W_xc')"
tp2577
aasbsg427
g1
(g428
g3
NtRp2578
(dp2579
g32
g713
sg432
(lp2580
g434
(g435
(I0
tS'b'
tRp2581
(I1
(I16
I16
tg412
I00
S'\xcc\xc4\xce@)\xb9\xc9\xbf:\xa4\xc0\xed\xd4\x8c\xad\xbf]\x84X\xb4\x80\xf2\xb6?\x86\x89\xf9jE2\xc6\xbf\x19\xd5\xf5t-\xd5\x85\xbf}\x9cBl\xc3O\xbb\xbf\xe1d|\x0f\xeb$\xad\xbf\xf3\x10\xf6\xb8\x03\xd6\xe0?\x87\x1a\xc5\xe1\xe2\xb4\xdd\xbfq\xd6\xa0\xb1\xb7{\xab\xbf\x11\xd0d`\x16$\xb9?\xad%\xe1lA\x1b\xd2\xbfZo\'\xd54\x89\xa5\xbf{\x11\x06\xdbUb\xb3?\x88\x82l\x0b\xe4\xfc\xb6?=\xed\x9e]\x17V\xca?\x87\x0f\xab\xa6\xe7\x8c\xd1?/f\x1c\x0b\x0e(\xb5\xbfjA\xde\xe3\xd9j\x96?R\t_X\x8a\xb5\xd6\xbf\x86\x1e\xc3X\xd5\xe1\x8a\xbf\x15\tF$\x987\xd7\xbf\xfe\x0fU5\xfcDf?\xc7?\xda"zY\xca?\x9e\x98\xe1c=r\xba?\xc0\x17~\xee\xeaY\x97?\x14\xd0\xdb\r\x0c\xd3\xc9?$\xcd\x1fz\xa2#\xd1?(F\xa2C\x01\x84\xca\xbf\xf6\xd5\xe6*S\xfa\xd2?\x18.\x025\x9c4\xc8\xbfu\xdfnP~\x83\xbc\xbf\xbf\xe8BLY9\xc7?\x88t\xa9Mj\xbb\xa6?3\x8dap\x14\xb6w\xbf\x11"\xee\xa2\x0b\x1c\xa6?\xad\t\x90Tt\x03\xd5?3\x04\xf4\xfb\x8ei\x91?\x10\x89\'M\xe8\xda\xc7?l,J\xb3\xd1\n\xc7??\xf9\xe9h\x9b\xb3\xe0?V\x9fe\xc0\x0f"\xd6?\xf4\x19X%$\x8b\xc6?\x94\xfbn\xbez\x06\xc7?\xfeK\x18e\xa2\x9f\xa5?\xb9\x82LRg\xc4\xa4\xbfGCo#l\x89i\xbf;W\xb8`W\xfcx?\x17\xe4\xaf?\x15\xc0\xbc\xbf\xa1\x18|\x91\xf7x\xba\xbf\xb6x\xcd BA\x90\xbf\xa2\xd0\xb4\x1e\xad\xc0\xb4\xbf\xbdQ\r\xe3f\xc8\xa8\xbf\xbb\x12\xea[PW\xa5\xbfY\xe4!k\xbf\xfc\xcc?\xdbo\xee\x0f\xe0Z\xc9?\x9c\xbd\x99 \xebd\xd0?\xd6`\xef\x12\xc9\xeb\xd3?m>5\x85\x15\x0e\xc7\xbf\x81\xe5\xd6\x11m\x90}?\xf01\x88l I\xb3?\xc7`\x86\xe1\x96M\xbc??\x05\x15r9h\xc0?L\xce\x19\xff=\xb9\xd6?\xd97"\x1d\xd8\x90\xc1\xbf\x00q\x9d&H\x8a\xad?V\xba\xb2\xf7{x\xd3\xbf$jK\xdbl\xb0\xba?\x9c\xd7\xecu_z\xd9\xbf\x994)\x9fe\x12\xb7?\x90\xd0Q\xd7y\xda\xd3?\xd36\xbe\xbcS\xe6\xc3?)\x96@\xc6Q\x05\xd1\xbf\x10\x84\x12v\x99\xcb\xc8\xbf/[F(\xae\xbe\xc3?\xb9t\xc6\xb8z\xc4\x9c\xbfk\xe1\xd9\xd6-m\xe1\xbff\x94xA\xd1\xab\xd6?z\x95o\x1fU\xc2\xa7?\x98|A,k\xdf\xd6\xbf\xb2\xea2J\xf9\x00\xae?f\x18\x99AJ\xb7\xe1?\xe8\x06\xc3z\x17\xc2\xa2\xbf\xbb\nH\xb5\xf4\xad\xa4\xbf\xb2d\x842\xc7\x88\xc4\xbf\x1b\x06\xfe\xda_\xb4\xc4?\xfe\xb6T\xd6<\x16\xb0?\xe1F\\\xfa\x9d\xfa\xc9?\t\x07\x98\x18\\9\xc7\xbf=\xdb\xc5\xf75S\xc7?*\x02\x81]\x1c\xd9\xd2\xbf\x8fH\xe3\x97\'\xc6\xbf?\x1e\x0e7\x04\x15W\xc9\xbf\xbej\xc7\xd0y\xa8\x83?\x92\xff\x9d}>\xf0\xd8\xbfcb5PI\x12\x99?\xe1e\x8c\\z@t\xbf\x0ea\xa4\xc7\x95t\xd8\xbfdgv\xc0\x04\xb3\xdb?-\x9c=\rG\xea\xc3?\xbb\xce\x1a\xb2Fo\xd1\xbf\xa3\xf0\xa8\x9f\xc5\x1e\xd0\xbf\xd8\xd6\xe5"H\xdf\xaf\xbflm\'\xc2\xc8)\xc2\xbf2Df\x86\x88\xc8\x97\xbf\x1dot\xa3\xabW\xe1\xbf\xae`\x8b\xe8\xdd\x13\xdb?@\xc8\xca\x9c\x18\xf5\xc6\xbf|MYW\xb5d\xd3?g\xe3O\x8d\xc6\x81\xa5\xbf\xe2\xf7G\xec\x1e\x95\xe3?"\xce\x1f\xaa{|\xcb?\xae)]V\x9f\xff\xd0?\x9e=\x95,\xc7!\xd3?\xb0E\x89\xb9\x02`\x95?.\xddi\x98\x99J\xa3?\xb1\xba\x06\xd1\xbc\x0e\xa0\xbf\xda\x8a\xe3P\x90#\xb7?0\x8c\x1dQ\xcbe\x93?\xabKQ\xd1\xaf,\xb7?p\xb4\xd8\xbd\xb4e\xc9\xbf\xc9.lPy\xa9\xba\xbfR\xd7\x1d\xfa]\xbd\xc1?\xd7\x9a\xde\x0b-\x7fu?]\xcf?\x17o\x04\xbf?\xa0\xb8\xb9\x0b\x98x\xc5?\xf6\x92\xe8\xf1lj\xcc?\xd5\xdbuO\xdc\x9c\xbf?%\x7f\x91\x11\x10\xbb\xad\xbf\xbcrC\xfe\xf0\xaf\xcb\xbf\xa8#\x92M\x95\x86\xd2?G\xe458e*\xc6\xbf\xae\xf8<\xea-\x93\xfe>\xc6t?\xf8,\xe2\xd9?:\xe0p\xea\x1c`\xc9\xbf\xcdv~1\x08p\xb1\xbfq\xcd\x19\x8d\x90U\x9e?\xca\xe7dH\x8a\x95\xdc\xbf\xb0!\x0c/\x86\x1a\xd1\xbfo\x03F&\x97\x05\xd4?\xc3N\x9e]%\xef\xbc?\xfe\xec[\xad\xadj\xca?\xf2\xa7\x84\xfa)_\xb0?!p\x83\xe0\xd3>\xdf\xbf\x87D\x16\x13\xf9K\xd0\xbf%nn\xc2@\xcf\xe1\xbf-\x18\x05\xbd\xfb\x88\xc4?g\x98\xc5\x93\x9c\xae\xe5?\x87_{z\xf7\x13\xd9\xbf7\x84\xf8Vb#\xd1?\xf2f%\x1a~n\xd1?\xd19\xd8\xe4\xc1\xe6\xa7?[e\xbd\xa4\x9d\xed\xd5\xbf\xc6\x9f\xfc\x08\xe5\xbb\xcb\xbf\xbcK\xebE\xfe(\xe0\xbf\x8c\x01\xff^q\x12\xa0\xbf\xd2\xc3)\x98\x9d\xd7\xab?z~\xf2\xbb8N\xca?|\x808\x1c\xaa"\xaa\xbfiE\x9f\x14\x0e!\xcb\xbf\x0e\x84\x06\x9dn\x15\xc6\xbf^\x8b\xb3\x821\xd9\xa0\xbf)\x87\xa8)\xf9I\xb3?\x93H\x95\xeeiA\xd6?BH\x03\xba4_\xe0?7uk\xb0\xb9E`\xbfz\x98\xc0\x8f\xda>\xd1\xbfE\x8d6\x88\x9f\xa7\xd3?\xf0k\x02\x88\xact\xe4?\xbd\xd6\x88\xe9\xb7\x1e\xc8\xbf\xf7\xb6\xf0\xf7L\xd6\xbf\xbf\x14&\xb0\xb5\xa7\xce\x9e\xbfw8\xb0*\xde\xb7v?\x1d\x81\xb0x1\xa5\xc5\xbf\xc2/\xc4%\xef/\xd6\xbf\xbfM\x08\xefC\x98\xc3?O\xeb\xd94vM\xa1\xbfr\x00\xe7\x16\xba\x10\xd2?\x91\xe6?]&k\xc1?\xbbr\xc6\xdfeR\xd0?\xb2\xc6\xfbY\xc0 \x90?>\x13G\xbd\x1ar\xc6?\xccj\xc6%|F\xc7\xbf\xdd\x83\xa6~\xe4\x14\xc0?\x9e\x17\xf9\x10\xbc.\xd0?\n*:y\x90?\xd5?\xf8\xb7\xef\x1d\x84\xca\xb2\xbf\xa75\xdc*\x1b6\xc3?\xf55\x8aA`\xe8\xd4?"c\xed\xda\xd4\xe3\xd8\xbf\xbc*\xb4\x99\xa4\xcf\xb6\xbf\x8a\xbb~\x97\x13\xb9\xc2?\'?\x84\xf6\'\x14\xb2\xbf*\xe51\xf4\xd2\xea\xc4\xbf\xcb\xb12\xed\xd8U\xbc?Au^\xca+\xb9\xbd\xbf\xd6\xbb\xf9V1\xba\x94?f\xee/\xe0`\xa8\xd8\xbf\x89\xf2\x0e\xb7\xfb`\xbd\xbf\xfc\xf448\xbf\xa7\xb2?]\xc3\x913H\xc3\x96\xbf\xe7\xcd\x07\n\x8b\x19\x81\xbf\x8a*\nz-\r\xb5?,st\xf1r\xb1\xd1?uL\xd2c\x9c\xbf\xad\xbfx\xbe\xff\xe8\n*g\xbf\x00\xea\x9d\xeb\t\x0e\x96?9\x00(8\x13\xdc\xbd\xbf\\\xeeae\xc7\xc9\xc8\xbf \x08)H\x03a\xcb?P,\x88O\xb6j\xd2\xbf#B*\xf0\xfd`\xc3?\xf5\xc0\x9f\xbf"y\xa9\xbfY\x94B\xcc\xf1\x0f\xb5\xbf\xac\xd9\x14\xd1}v\xb5?\xe7\xe9Ey\x06"\xbf?\xf9\xe3\x93\x87Vo\xd0\xbf\xcd\xb48m\xb8\x92y\xbf\x05~\'o\x97\xa7\xbb\xbf\xedA\x0f\xadld\xc7\xbf\xfd\x84\x9dD<\xa6\xe0\xbf\x86\xf1A0\x98\x80\xcb?YH\xddm\x93\xc3\xcc?\xe8\xb6\xcaD;\x82\xd2\xbff\xd5\x91n36\x99\xbf\x03\x0b\xdf\xcf\xfcu\xd3\xbf\x80\xb7Q\x10\xbeO\xb6\xbf\x13tdI\x123\xc4\xbf\xb0\xd5\x9be~\xb5\xd5?\xeaS\x88F\xe8\xd4\xd5\xbf\xc1L\x83\xb7\x06\x83\xdc\xbf\xa5\x1dSV\xbc<\xb6\xbf\\\xf2h\xc3\\]\xb2\xbf=\xf2\xeeu\xdd|\xdf?6\xb0Y\x1e\x8d9\xc8\xbf\xea?\xfa\xb63\xa5\xd7?\xa7I\x07)\\;\xc0?\xb7x8\xe3\x11|\xda?\xfc*\x17\x8c\xaf\xee\xb1?D\xf5i\xfd\x01\xc3\xd9\xbf\x85\xefH\x86\xcc\x93\xcd\xbf\xc4\xae\x86Dt\x8c\xc1?\x1d\x17\x7f\x11\x1bA\xcc\xbf\xbf9%\x1e\x08&\xe3?c\x83N\x04i9\xdd\xbfP\x15\xfdv\x12\x0f\xc4\xbf\xa0\x03/;\xe7@\xbe?!7\x9d}\x96\xa9v?\xb5\xd5\x054C\x12\xbe\xbf7YY\xeb93\xd7?\xce\xf3\\o\x1e\xd5\x93?".\x9c\xef\x9eA\xd1?\x9e\x99\xf2Aj\xc1\xba\xbf\xbf3s\xc9\xb9\xb0\xd0?\xd8\xd72m\xd0\xfe\xad?\xdfX\xc5\x92\x95\xe8\xd9\xbf'
tbasg437
I00
sg438
I00
sg402
g1
(g403
g3
NtRp2582
(dp2583
g406
(I00
I00
tp2584
sg408
S'float64'
p2585
sg410
g412
sg413
I00
sg32
Nsbsg443
Nsbsg32
g713
sg34
Nsg402
g2582
sbasg16
g1
(g17
g3
NtRp2586
sg445
(lp2587
g2551
asg447
g449
sbsg402
g1
(g403
g3
NtRp2588
(dp2589
g406
(I00
I00
tp2590
sg408
S'float64'
p2591
sg410
g412
sg413
I00
sg32
Nsbsbag1
(g454
g3
NtRp2592
(dp2593
g13
S'auto_1978'
p2594
sg15
Nsg16
g1
(g17
g3
NtRp2595
sg32
Nsg402
g460
sg463
g464
(g465
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp2596
sbasg16
g1
(g17
g3
NtRp2597
sg445
(lp2598
g2536
asg447
g1
(g469
g3
NtRp2599
(dp2600
g472
(g473
(g460
NNtRp2601
tp2602
sbsbsg402
g1
(g403
g3
NtRp2603
(dp2604
g406
(I00
I00
tp2605
sg408
g2591
sg410
g412
sg413
I00
sg32
Nsbsbasg16
g1
(g17
g3
NtRp2606
sg445
(lp2607
g2521
asg447
g482
sbsg402
g483
sbag1
(g454
g3
NtRp2608
(dp2609
g13
S'auto_1994'
p2610
sg15
Nsg16
g1
(g17
g3
NtRp2611
sg32
Nsg402
g460
sg463
g464
(g465
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp2612
sbasg16
g1
(g17
g3
NtRp2613
sg445
(lp2614
g2506
asg447
g1
(g469
g3
NtRp2615
(dp2616
g472
(g460
tp2617
sbsbsg402
g1
(g403
g3
NtRp2618
(dp2619
g406
(tsg408
g462
sg410
g465
sg413
I00
sg32
Nsbsbasg16
g1
(g17
g3
NtRp2620
sg445
(lp2621
g167
asg447
g616
sbsg402
g1
(g403
g3
NtRp2622
(dp2623
g406
(tsg408
g462
sg410
g465
sg413
I00
sg32
Nsbsbag1
(g10
g3
NtRp2624
(dp2625
g13
S'auto_1998'
p2626
sg15
I0
sg16
g1
(g17
g3
NtRp2627
(dp2628
g20
(lp2629
(lp2630
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp2631
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp2632
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp2633
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp2634
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp2635
aasbsg32
Nsg34
g1
(g35
g3
NtRp2636
(dp2637
g38
(lp2638
g1
(g10
g3
NtRp2639
(dp2640
g13
S'auto_1996'
p2641
sg15
I0
sg16
g1
(g17
g3
NtRp2642
(dp2643
g20
(lp2644
(lp2645
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp2646
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp2647
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp2648
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp2649
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp2650
aasbsg32
Nsg34
g1
(g35
g3
NtRp2651
(dp2652
g38
(lp2653
g1
(g10
g3
NtRp2654
(dp2655
g13
S'auto_1986'
p2656
sg15
I0
sg16
g1
(g17
g3
NtRp2657
(dp2658
g20
(lp2659
(lp2660
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp2661
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp2662
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp2663
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp2664
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp2665
aasbsg32
Nsg34
g1
(g35
g3
NtRp2666
(dp2667
g38
(lp2668
g1
(g10
g3
NtRp2669
(dp2670
g13
S'auto_1958'
p2671
sg15
I0
sg16
g1
(g17
g3
NtRp2672
(dp2673
g20
(lp2674
(lp2675
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp2676
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp2677
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp2678
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp2679
a(g131
I269
g30
S'self.Wox = T.dot(self.input, self.W_xo)'
tp2680
aasbsg32
Nsg34
g1
(g35
g3
NtRp2681
(dp2682
g38
(lp2683
g257
ag1
(g414
g3
NtRp2684
(dp2685
g13
S'auto_1944'
p2686
sg15
Nsg16
g1
(g17
g3
NtRp2687
(dp2688
g20
(lp2689
(lp2690
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp2691
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp2692
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp2693
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp2694
a(g131
I240
g30
S"self.W_xo = theano.shared(value=Wx_value, name='W_xo')"
tp2695
aasbsg427
g1
(g428
g3
NtRp2696
(dp2697
g32
g832
sg432
(lp2698
g434
(g435
(I0
tS'b'
tRp2699
(I1
(I16
I16
tg412
I00
S'\xf3\x9b\x8a\xb9\x9cj\xa2\xbf\xb0\xfe\x1b\t\x90O\xc9\xbf{\xd3\xc5\x82\xe69\xd8\xbf\x80\x951.x\xdb\x82\xbf(dVi\xd6Sv\xbf0\x8b\xd4\xd0\x9e\xf2\xd4?\x00\x06cs9\xf5\xb6\xbfe\xf1y\x0bt\t\xae\xbf8l[\xb0Z\xf2\xc6\xbf\xb343I\xb2\xd4\xe4?\xf9$\xd2b\x9f\xa1\xc4?\x90{\x11\x13\xde\x81\xca\xbf\x8bc\x08\x18\x14\x85\xdf\xbf\r\xc6Z\xdb\x07\x9f\xd4\xbf\xb4\xbbl\xbdWj\xcd\xbf\xe5a?\x80\xfa\xc9\xd5\xbfIn\xd1,\x01c\x9e\xbf\xb5\xbc\xce(,E\xd0\xbf-1\xdb\xcc\x1b\xae\xd9\xbf\x1a\x12\xf5\xf6\x15g\xc4?%B\xf2\xa0)\xa8\xd8\xbf^\xcf\x83I*m\xe4\xbf~s7\xfb$\xfc\xcd?F\x85v\r\x83\xa5\xdc?V`\xe8I~\xa7\x84?K\x05AY\x9c\xf7\xc5?\xe3\xeb\xd3\x9d\xfa{\xc5?\xfe\xa2E\xbb\x85\xd7\xe2?\xf3Z\xec\xff\x93\xb0\xcf\xbfW \x1a\xa1\x11\x10\xbd\xbf:\xe19\x8e\xa1\x19\xbc\xbfr\x02>.\x98\xbc\x8b?\x1aF\x80Y\xb1\x88\xaa\xbf\xeb \x92\xd9\xac\x0e\x95\xbf\xd5\xb1\xdc\xd0\xb7C\xa2?Pw\x08\xec\xe7\xa5\xdf?\xa6\xe6HH\xbd\x89\xb1?F\xdb\x8d\x9b\x92\x8a\xca?I0\xf5;}_\xc5?\xaa\xd9\xd9\x90\xfd\xcf\xb6?\xda\x04_vL\x0c\xb1\xbf:#\x19\xbd\x89\xc0\xc9?\x7f\x96\x07\xff\x9e\x02\xdc\xbf\xa5\xee\xb7Ld\xa3\xd8?]\xcf3\xcbk\\\xc5?\x9f\x82`\\\x9f\xb7\x99?K4\xe3\x10\x07\xd3i\xbf\x0f\x06\xce\x1b\xe7%\xac?>\xb0\x17\x1b3\t\xca?T\xf2\xd3X\xf7\xa0\xbd?\x07\xc1@z\x8c\xd8\xd5?Zh\x1e\xf1\x8fp\xdb?\xf8\xeeF\x8c\xe6\x80\xd1?R;\x9f(Z\xdd\xd7\xbf\x94*\x97G\xa7\xad\xc0\xbf\xdcV\xba\x9a\x86E\xcf?\xcd\xa1j\xc3\xe7\n\xe1?\xf9a\xdb\xdf\xfe\xc7\xc2\xbf\x82w}b\xa13\xc3?\x0e\x82\xea\xe0\x98\xa5\xd3?\x12dN\xed\x0b!\x9b?\xe1\xf8\x1e\xba2}\xd3\xbf\x1f\x1f\xcf\xed\xc3H\xdf?\xa1\xee\xa6\nM\xc8\xcb\xbflF\x8b/\xb7\xae\xc7\xbf\xcf1\x9cC\x06-\xb1?\x8a%\x9c\x8aD@\x8c?\x9d\x05\x11\x9b\xe0Z\xcd\xbf\xfc\xffs@\x13\xd2\xda?\x90\xd7\xe4\xe7O\xa9\xc0?MW`\xf9X\xf9\xcc?l\xa5q\x97\xd1\x1e\x86\xbf-\xd1\x0c\x80\xca\xd6[\xbf\x97\x16\x9b\xb9_*\xd5?_\xcb~\xeb2\xa5\xc0\xbf\xbe\xf3\x9b\xd4\x97\xcc\xb6\xbf\x81\x9f\xcel\xd3\xd6\xbd?\x8b#\x84\xddk\xf0\xcc?K\xad\x97mR\x08\xcd?y\x98\x9c1:\'\xce\xbf\x91R\xe1^tU\xd1\xbf!]\x1b\xfc|%\xcb\xbf\\\x14\xa4\xbd\xe7H\xcc?G\x03\xf5\x1a5>\xcc?q\xdc\xf4\xbf8\x85\xb4?\x16\xc4\xcb;\x1f\x00\xb3?\xe8J]\xc8\x1al\xda\xbfx5w8\xf7j\xb4?\x07\x87\xa0\xdcd,\xd9\xbf@!\xbd\x9e\xf3k\xca?"q\xc6\x16\x10-\xb4\xbf\x9f\xec\xab\xfc\x94\x03\xaf?\xe2|\x81 \x08Q\xab\xbfO\xdf\x12\xf5\xfc\x87\x94\xbf\x1fS\xc4\xd0L\xd2\xd1\xbf\x15\x12-\xcc(\x9b\xa5\xbf*\xdd\xf1\x88p%\x90\xbf\x1f\xff\x14\\\xa8s\xaa?\x0b\x1d\xb1\x0b\xc1m\xc1?\xa1\xc7o!\xda\xbd\xbe?p1\x1et\xb0A\xb1?\x17r>f\xbb\xdf\xc4\xbf\xe5\xcf\xd8\x8a\xc3\xca\xd4\xbf\xea\x11GT\xe5\t\xd0\xbf\x90W$\xb4\x0c)\xca\xbfl\x99E\xd3E\x15\xcb?P\xd1&\xfbb5\xd1?\xe2cC\x0c\x05}\xc9\xbf\xbc\xeb\xa7ff\x8f\xd2\xbf\x02mA\xb6\xf5\xf5\xd9\xbf;\x1d\xdb\x14[\xf5\xc3\xbf1\x0e\x9fG\x01\x9b\xba?\x94\x17\r\xf6\xfaf\xd1\xbf\x86@\xe4]j\xfa\xd2?\xd6+\n\x88\xa9w\xb7?\xf2\xaf\xe6X\xc3\x0e\xd1?\xcfx#()}\xc9\xbf\x12\xcb\x8f \xa7\xc9\xc6?1\xf1\x99\xb0\xcf\xbf\xd1\xbf\xe7\xbd\x9fwN#\xc6?\xb0\x86\xff\x95H\r\xd7??\xab\x98\xec\x97\xd1\xd6?(\xe2\\\xd5s\x00\xc1\xbf\x8f\xa5\xac\xcc\xb2;\xcc\xbf\xb0\xfbd9\x9b7\xa5\xbfB9y\x96\x1a#\xd9?\x8c\x03\xf0\xab\xee\xcb\xd5\xbf.;%\xc0]6\xd8\xbfx\x85\xbe\xc29]\xe0\xbf\x0c\xc7{\x8b`!\x98?N\xa5U\x8c\x170\xdb\xbf\xb9L\xa4C\xed\r\xd3?\xbbfKy\xb4@\xda?\x7f7\xeb\x84\x11\x84\xa1\xbf\xbb\xfe\xb7\xc3\x06%\xe3?\x80o3\xc8Z\xe3\xad?;Ng\xe5)(\xc0\xbf\xa9\xd0\x9d\xa3\xb3\xae\xc0\xbf\xc2\xc6\xea\xc4_\xed\xd6?\xaf.\x03\x1b\xb1^\xc9?A\x8c\xfb\xbf\xfe=\xe0\xbf\xf9\x01v\x05_\x15\xde\xbf\xc1-\xacF\xf3\x82\xd7\xbf\x8c+\xc9\x0f\xa4\xf6\xc2\xbf\x92v\xff\x0b7\xc8\xd4\xbf\xebC\x8dMlw\xc8\xbf\xea\'\x90*CT\xca\xbfO\xea\xd8{\x99\xed\xd1\xbf\x97q\xb79\xc6\xf4\xe0?\xc3\x9f\x1d+$\xb5\xd6?\xd3\xa1\x9cQ\xc0z\xdc?\xcb\xa2\x9fv\xbb\xda\xda?\xed>\x127\x1e#\x92\xbf\x0c@\xe7\xf1\x83S\x9c?\x81\xb3\x8c@8\xaf\xcd\xbf#\xe7\x94\xe5\x01\xfe\xa2?\x15L\xab\xdf\x0f\x01\xd0\xbfp\xadqwg\xa3\xd9\xbf\x9e\x87\xa0~}\x8b\xc8\xbf\xb8G\xa3A\x9e\xe8\xcb?-\x16Bam\xd4\x98?.\xb3\xd1\x88\x91J\xc3?\xfbT\x8d\xe7\x85\x81q?\xf5\x12^w\x1bf\xcd\xbf+U<\x1e\x8f\x9f\xc0?\xa6u\xb9\x1c\xefF\x98?\x1b\xaf\xbc\'\xf9\r\xd5?\xael\x12,\xfd\xad\xd5?coR\x0e\xe0\xf6\xb2\xbf\x89\x9a\x97mW\r\x9f?\x8a\xfar\xff\x8c\xa6\xcc\xbf\xee\x97\xc5\x01G\x83\xcb\xbf\x1a|\x08\x1d/s\xc2\xbf!\xc5N\xe0T~\xbf?\xf1\xefp\x1e\x81\xa5\xc0\xbf\xf6T;3\xeb\xb9\xd8?\x14\'\xba\x82eM\xbe?,:\xd8\xdc\xdd/\xb1\xbf\xbbQ\xbd\x9e\xaa@\xd0?w\x1b\xbd\xc2{\x84\xc7\xbf\x93>K\x1c\x8a\x9e\xc4\xbf\xca\x88\x1c\xf5_\x8e\xd5?]$\x85>\xe2\xe7\xd4\xbf\xba\xbfb%{\'\xa3\xbf\xddD+\xc9rK\xb8\xbf:\x04i\xd9\x9cy\xc7\xbf\xc3D\x86\xba\xcb\x8b\xcf?\x8e\x07\x13\xd8\t\x9a\xcb?<i\xf9\n\xbd\xab\xc5?\xa0\xc6P*\xed\x91w?\xb8\xc6E\x83{\x88\xc4?\rk!\xf8\x80\x04\xe0\xbf(\xfc\x9d\xdb\xfc\xe6\xb9\xbfC\xac\x9d\xbb\x95.\x83?e\xa6\x93w\x82\xdd\xc2\xbf\x19\xaacMz\xc7\xa7?k\'\xecm=\x0f\xe3?\x9d\xd4X#H\xd8\x9c?\x8b\x96\xa8\xbakS\xba?\xb5Th)S\xf3\xa9?\x90\x99\x96\x060+\xd3\xbf\x01\xd1\\\x95\x0e\xcf\xd7\xbf\xb0\xb8\x12AC\xec\xd9\xbf\xc5\x02Va\x1d\xfd\xb1?}`\xefr\x9dP\xe0\xbfc\xde(\xf0X\x92\xc4?\xf8\x8dy\xeb\x93\xdf\xa9\xbf\xc5\x19\x9a\x7fW\xec\xbc?O\x80\xa0eJ:\xd5\xbf\xbc\xa51u\xb2\xd7\xd8?\xf0E\x00\'m>\x8e\xbf\xae\x85\xb8a9K\xde\xbf\x9f{;\xc6\x7f\xbc\xd3?\x92ct\\a_\xd4\xbf \x95\xff\x98\x10\x8d\xd3\xbf\xf5\x9an.\xac)\xd3\xbf!k\x13\xe7|\xdc\xb3\xbf\xf1\xacp\xf6\x9f\xca\xc2?w\x0cW\x8dK\xdc\xc1?Ef*\x9e\xc4+\xe4?AV\xebo\x88:\xc5\xbf\xb7\xa9\xe8\x02):\xbd\xbf\xabY\x8b\xc2v\xd1\xd5\xbf\xd4/\x1b\xc0\xa8\x8c\xd1\xbf\xec\xd2\x18_?\xee\xd1?\x9a"\xb3\xb2m\x19\xc0\xbf\xb31\xe9\x80@\xe9\xbc?\x84=o\x8dte\x80?\xd8\xb8\x98\x03\xc3\xcd\xd0\xbf\n\x06\xd9\x06\xd7_\xca\xbf\x0f\x86\xa2G\xb4\x00\xde\xbf\xfb\xd2r\xe3\xee\xfa\xa9\xbfx97\x10\xdeB\x94?P+DB\xc0t\xb3\xbf.\xf0\x9d8\xbd\xc9\xcf?\xf5\xcd%\x0ea1\xd5\xbfj\xf9\x974\xa8\xce\x87?o\'\xdd\xf2\xa1\x0f\xd0\xbf\x8d\xb8\x9f\xb5\xb9]\xb8?e\xef\xbd\xa7\xea\xb1\xcc\xbfW\xf2\xe2\x04\x94\x00\xca?@\x96~HCe\xc4?)\x92$\x05\'K\xb5?\x7f\x15\x9a\xa6\xf3\x86\xb0?\x0f\xc1\xef\xb2\xa0I\xb2?\xb6-u\x1esT\xb5?\x15{\x9c\x7f\x8f\x04\xc1?\xf4\xfb\xf8#{\xb4\xb6\xbf\x8cO^B\xdb\xee\xd1\xbf\xe0\xec\x0e\xab\x0bl\x86\xbf\xaa|\xb3Y\x90j\xc0?\x86aX=\x03_\xc0?\x0f\x11\xf0qN\xae\xdb?\xd4~\xc6\x19\x99\xf4\xbf\xbf\x83;\xb6\xda\x91\x92\xd6\xbfd\xbe\x14\x81<o\xc1\xbf'
tbasg437
I00
sg438
I00
sg402
g1
(g403
g3
NtRp2700
(dp2701
g406
(I00
I00
tp2702
sg408
S'float64'
p2703
sg410
g412
sg413
I00
sg32
Nsbsg443
Nsbsg32
g832
sg34
Nsg402
g2700
sbasg16
g1
(g17
g3
NtRp2704
sg445
(lp2705
g2669
asg447
g449
sbsg402
g1
(g403
g3
NtRp2706
(dp2707
g406
(I00
I00
tp2708
sg408
S'float64'
p2709
sg410
g412
sg413
I00
sg32
Nsbsbag1
(g454
g3
NtRp2710
(dp2711
g13
S'auto_1985'
p2712
sg15
Nsg16
g1
(g17
g3
NtRp2713
sg32
Nsg402
g460
sg463
g464
(g465
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp2714
sbasg16
g1
(g17
g3
NtRp2715
sg445
(lp2716
g2654
asg447
g1
(g469
g3
NtRp2717
(dp2718
g472
(g473
(g460
NNtRp2719
tp2720
sbsbsg402
g1
(g403
g3
NtRp2721
(dp2722
g406
(I00
I00
tp2723
sg408
g2709
sg410
g412
sg413
I00
sg32
Nsbsbasg16
g1
(g17
g3
NtRp2724
sg445
(lp2725
g2639
asg447
g482
sbsg402
g483
sbag1
(g454
g3
NtRp2726
(dp2727
g13
S'auto_1997'
p2728
sg15
Nsg16
g1
(g17
g3
NtRp2729
sg32
Nsg402
g460
sg463
g464
(g465
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp2730
sbasg16
g1
(g17
g3
NtRp2731
sg445
(lp2732
g2624
asg447
g1
(g469
g3
NtRp2733
(dp2734
g472
(g460
tp2735
sbsbsg402
g1
(g403
g3
NtRp2736
(dp2737
g406
(tsg408
g462
sg410
g465
sg413
I00
sg32
Nsbsbasg16
g1
(g17
g3
NtRp2738
sg445
(lp2739
g152
asg447
g616
sbsg402
g1
(g403
g3
NtRp2740
(dp2741
g406
(tsg408
g462
sg410
g465
sg413
I00
sg32
Nsbsbag1
(g10
g3
NtRp2742
(dp2743
g13
S'auto_2012'
p2744
sg15
I0
sg16
g1
(g17
g3
NtRp2745
(dp2746
g20
(lp2747
(lp2748
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp2749
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp2750
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp2751
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp2752
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp2753
aasbsg32
Nsg34
g1
(g35
g3
NtRp2754
(dp2755
g38
(lp2756
g227
ag1
(g892
g3
NtRp2757
(dp2758
g13
S'auto_2011'
p2759
sg15
I0
sg16
g1
(g17
g3
NtRp2760
sg32
Nsg34
g1
(g35
g3
NtRp2761
(dp2762
g38
(lp2763
g152
asg16
g1
(g17
g3
NtRp2764
sg445
(lp2765
g2757
asg447
g903
sbsg402
g460
sbasg16
g1
(g17
g3
NtRp2766
sg445
(lp2767
g2742
asg447
g1
(g469
g3
NtRp2768
(dp2769
g472
(g473
(Ng460
NtRp2770
tp2771
sbsbsg402
g1
(g403
g3
NtRp2772
(dp2773
g406
(I00
I00
tp2774
sg408
g2359
sg410
g412
sg413
I00
sg32
Nsbsbag1
(g10
g3
NtRp2775
(dp2776
g13
S'auto_2014'
p2777
sg15
I0
sg16
g1
(g17
g3
NtRp2778
(dp2779
g20
(lp2780
(lp2781
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp2782
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp2783
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp2784
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp2785
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp2786
aasbsg32
Nsg34
g1
(g35
g3
NtRp2787
(dp2788
g38
(lp2789
g2418
ag1
(g892
g3
NtRp2790
(dp2791
g13
S'auto_2013'
p2792
sg15
I0
sg16
g1
(g17
g3
NtRp2793
sg32
Nsg34
g1
(g35
g3
NtRp2794
(dp2795
g38
(lp2796
g152
asg16
g1
(g17
g3
NtRp2797
sg445
(lp2798
g2790
asg447
g903
sbsg402
g460
sbasg16
g1
(g17
g3
NtRp2799
sg445
(lp2800
g2775
asg447
g1
(g469
g3
NtRp2801
(dp2802
g472
(g473
(Ng460
NtRp2803
tp2804
sbsbsg402
g1
(g403
g3
NtRp2805
(dp2806
g406
(I00
I00
tp2807
sg408
g2473
sg410
g412
sg413
I00
sg32
Nsbsbag1
(g10
g3
NtRp2808
(dp2809
g13
S'auto_2016'
p2810
sg15
I0
sg16
g1
(g17
g3
NtRp2811
(dp2812
g20
(lp2813
(lp2814
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp2815
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp2816
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp2817
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp2818
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp2819
aasbsg32
Nsg34
g1
(g35
g3
NtRp2820
(dp2821
g38
(lp2822
g2536
ag1
(g892
g3
NtRp2823
(dp2824
g13
S'auto_2015'
p2825
sg15
I0
sg16
g1
(g17
g3
NtRp2826
sg32
Nsg34
g1
(g35
g3
NtRp2827
(dp2828
g38
(lp2829
g152
asg16
g1
(g17
g3
NtRp2830
sg445
(lp2831
g2823
asg447
g903
sbsg402
g460
sbasg16
g1
(g17
g3
NtRp2832
sg445
(lp2833
g2808
asg447
g1
(g469
g3
NtRp2834
(dp2835
g472
(g473
(Ng460
NtRp2836
tp2837
sbsbsg402
g1
(g403
g3
NtRp2838
(dp2839
g406
(I00
I00
tp2840
sg408
g2591
sg410
g412
sg413
I00
sg32
Nsbsbag1
(g10
g3
NtRp2841
(dp2842
g13
S'auto_2018'
p2843
sg15
I0
sg16
g1
(g17
g3
NtRp2844
(dp2845
g20
(lp2846
(lp2847
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp2848
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp2849
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp2850
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp2851
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp2852
aasbsg32
Nsg34
g1
(g35
g3
NtRp2853
(dp2854
g38
(lp2855
g2654
ag1
(g892
g3
NtRp2856
(dp2857
g13
S'auto_2017'
p2858
sg15
I0
sg16
g1
(g17
g3
NtRp2859
sg32
Nsg34
g1
(g35
g3
NtRp2860
(dp2861
g38
(lp2862
g152
asg16
g1
(g17
g3
NtRp2863
sg445
(lp2864
g2856
asg447
g903
sbsg402
g460
sbasg16
g1
(g17
g3
NtRp2865
sg445
(lp2866
g2841
asg447
g1
(g469
g3
NtRp2867
(dp2868
g472
(g473
(Ng460
NtRp2869
tp2870
sbsbsg402
g1
(g403
g3
NtRp2871
(dp2872
g406
(I00
I00
tp2873
sg408
g2709
sg410
g412
sg413
I00
sg32
Nsbsbag1
(g10
g3
NtRp2874
(dp2875
g13
S'auto_2035'
p2876
sg15
I0
sg16
g1
(g17
g3
NtRp2877
(dp2878
g1017
I00
sg20
(lp2879
(lp2880
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp2881
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp2882
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp2883
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp2884
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp2885
aasbsg32
Nsg34
g1
(g35
g3
NtRp2886
(dp2887
g38
(lp2888
g1
(g10
g3
NtRp2889
(dp2890
g13
S'auto_2032'
p2891
sg15
I0
sg16
g1
(g17
g3
NtRp2892
(dp2893
g1017
I00
sg1033
g1034
sg20
(lp2894
(lp2895
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp2896
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp2897
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp2898
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp2899
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp2900
aasbsg32
Nsg34
g1
(g35
g3
NtRp2901
(dp2902
g38
(lp2903
g1
(g10
g3
NtRp2904
(dp2905
g13
S'auto_2031'
p2906
sg15
I0
sg16
g1
(g17
g3
NtRp2907
(dp2908
g20
(lp2909
(lp2910
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp2911
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp2912
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp2913
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp2914
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp2915
aasbsg32
Nsg34
g1
(g35
g3
NtRp2916
(dp2917
g38
(lp2918
g152
ag1
(g10
g3
NtRp2919
(dp2920
g13
S'auto_2024'
p2921
sg15
I0
sg16
g1
(g17
g3
NtRp2922
(dp2923
g20
(lp2924
(lp2925
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp2926
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp2927
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp2928
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp2929
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp2930
aasbsg32
Nsg34
g1
(g35
g3
NtRp2931
(dp2932
g38
(lp2933
g1
(g10
g3
NtRp2934
(dp2935
g13
S'auto_2022'
p2936
sg15
I0
sg16
g1
(g17
g3
NtRp2937
(dp2938
g20
(lp2939
(lp2940
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp2941
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp2942
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp2943
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp2944
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp2945
aasbsg32
Nsg34
g1
(g35
g3
NtRp2946
(dp2947
g38
(lp2948
g1
(g10
g3
NtRp2949
(dp2950
g13
S'auto_2021'
p2951
sg15
I0
sg16
g1
(g17
g3
NtRp2952
(dp2953
g20
(lp2954
(lp2955
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp2956
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp2957
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp2958
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp2959
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp2960
aasbsg32
Nsg34
g1
(g35
g3
NtRp2961
(dp2962
g38
(lp2963
g1
(g10
g3
NtRp2964
(dp2965
g13
S'auto_2020'
p2966
sg15
I0
sg16
g1
(g17
g3
NtRp2967
(dp2968
g20
(lp2969
(lp2970
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp2971
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp2972
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp2973
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp2974
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp2975
aasbsg32
Nsg34
g1
(g35
g3
NtRp2976
(dp2977
g38
(lp2978
g1
(g414
g3
NtRp2979
(dp2980
g13
S'auto_1953'
p2981
sg15
Nsg16
g1
(g17
g3
NtRp2982
(dp2983
g20
(lp2984
(lp2985
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp2986
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp2987
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp2988
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp2989
a(g131
I262
g30
S"self.h0 = theano.shared(value=np.zeros((n_h, ), dtype = config.floatX), name = 'h0')"
tp2990
aasbsg427
g1
(g428
g3
NtRp2991
(dp2992
g32
g1134
sg432
(lp2993
g434
(g435
(I0
tS'b'
tRp2994
(I1
(I16
tg412
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
tbasg437
I00
sg438
I00
sg402
g1
(g403
g3
NtRp2995
(dp2996
g406
(I00
tp2997
sg408
S'float64'
p2998
sg410
g412
sg413
I00
sg32
Nsbsg443
Nsbsg32
g1134
sg34
Nsg402
g2995
sbasg16
g1
(g17
g3
NtRp2999
sg445
(lp3000
g2964
asg447
g1
(g1143
g3
NtRp3001
(dp3002
g1146
g2997
sg1147
(lp3003
I0
asg1149
(lp3004
I0
asg1151
(lp3005
sg1153
I01
sg1154
(S'x'
I0
tp3006
sg1156
(dp3007
I0
(lp3008
I0
assbsbsg402
g1
(g403
g3
NtRp3009
(dp3010
g406
(I01
I00
tp3011
sg408
g2998
sg410
g412
sg413
I00
sg32
Nsbsbasg16
g1
(g17
g3
NtRp3012
sg445
(lp3013
g2949
asg447
g1
(g1164
g3
NtRp3014
(dp3015
g1167
g1168
((lp3016
(lp3017
I0
aI00
aatRp3018
sbsbsg402
g1
(g403
g3
NtRp3019
(dp3020
g406
(I00
I00
tp3021
sg408
g2998
sg410
g412
sg413
I00
sg32
Nsbsbasg16
g1
(g17
g3
NtRp3022
sg445
(lp3023
g2934
asg447
g482
sbsg402
g483
sbag1
(g454
g3
NtRp3024
(dp3025
g13
S'auto_2023'
p3026
sg15
Nsg16
g1
(g17
g3
NtRp3027
sg32
Nsg402
g460
sg463
g464
(g465
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp3028
sbasg16
g1
(g17
g3
NtRp3029
sg445
(lp3030
g2919
asg447
g1
(g469
g3
NtRp3031
(dp3032
g472
(g460
tp3033
sbsbsg402
g1
(g403
g3
NtRp3034
(dp3035
g406
(tsg408
g462
sg410
g465
sg413
I00
sg32
Nsbsbasg16
g1
(g17
g3
NtRp3036
sg445
(lp3037
g2904
asg447
g1191
sbsg402
g1
(g403
g3
NtRp3038
(dp3039
g406
(tsg408
g462
sg410
g465
sg413
I00
sg32
Nsbsbag1
(g10
g3
NtRp3040
(dp3041
g13
S'auto_2027'
p3042
sg15
I0
sg16
g1
(g17
g3
NtRp3043
(dp3044
g20
(lp3045
(lp3046
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp3047
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp3048
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp3049
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp3050
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp3051
aasbsg32
Nsg34
g1
(g35
g3
NtRp3052
(dp3053
g38
(lp3054
g1
(g10
g3
NtRp3055
(dp3056
g13
S'auto_2025'
p3057
sg15
I0
sg16
g1
(g17
g3
NtRp3058
(dp3059
g20
(lp3060
(lp3061
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp3062
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp3063
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp3064
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp3065
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp3066
aasbsg32
Nsg34
g1
(g35
g3
NtRp3067
(dp3068
g38
(lp3069
g2949
asg16
g1
(g17
g3
NtRp3070
sg445
(lp3071
g3055
asg447
g482
sbsg402
g483
sbag1
(g454
g3
NtRp3072
(dp3073
g13
S'auto_2026'
p3074
sg15
Nsg16
g1
(g17
g3
NtRp3075
sg32
Nsg402
g460
sg463
g464
(g465
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp3076
sbasg16
g1
(g17
g3
NtRp3077
sg445
(lp3078
g3040
asg447
g1
(g469
g3
NtRp3079
(dp3080
g472
(g460
tp3081
sbsbsg402
g1
(g403
g3
NtRp3082
(dp3083
g406
(tsg408
g462
sg410
g465
sg413
I00
sg32
Nsbsbasg16
g1
(g17
g3
NtRp3084
sg445
(lp3085
g2889
asg447
g1
(g1250
g3
NtRp3086
(dp3087
g408
S'float64'
p3088
sbsbsg402
g1
(g403
g3
NtRp3089
(dp3090
g406
(I00
I00
tp3091
sg413
I00
sg32
Nsg408
g3088
sg410
g412
sg1257
I00
sbsbag2949
ag1
(g892
g3
NtRp3092
(dp3093
g13
S'auto_2033'
p3094
sg15
I0
sg16
g1
(g17
g3
NtRp3095
sg32
Nsg34
g1
(g35
g3
NtRp3096
(dp3097
g38
(lp3098
g2919
asg16
g1
(g17
g3
NtRp3099
sg445
(lp3100
g3092
asg447
g903
sbsg402
g460
sbasg16
g1
(g17
g3
NtRp3101
sg445
(lp3102
g2874
asg447
g1
(g1269
g3
NtRp3103
(dp3104
g472
(lp3105
g473
(Ng460
NtRp3106
asg1274
(lp3107
sg1276
I01
sg1153
I00
sbsbsg402
g3089
sbag1
(g10
g3
NtRp3108
(dp3109
g13
S'auto_2052'
p3110
sg15
I0
sg16
g1
(g17
g3
NtRp3111
(dp3112
g1017
I00
sg20
(lp3113
(lp3114
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp3115
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp3116
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp3117
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp3118
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp3119
aasbsg32
Nsg34
g1
(g35
g3
NtRp3120
(dp3121
g38
(lp3122
g1
(g10
g3
NtRp3123
(dp3124
g13
S'auto_2049'
p3125
sg15
I0
sg16
g1
(g17
g3
NtRp3126
(dp3127
g1017
I00
sg1033
g1034
sg20
(lp3128
(lp3129
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp3130
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp3131
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp3132
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp3133
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp3134
aasbsg32
Nsg34
g1
(g35
g3
NtRp3135
(dp3136
g38
(lp3137
g1
(g10
g3
NtRp3138
(dp3139
g13
S'auto_2048'
p3140
sg15
I0
sg16
g1
(g17
g3
NtRp3141
(dp3142
g20
(lp3143
(lp3144
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp3145
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp3146
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp3147
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp3148
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp3149
aasbsg32
Nsg34
g1
(g35
g3
NtRp3150
(dp3151
g38
(lp3152
g152
ag1
(g10
g3
NtRp3153
(dp3154
g13
S'auto_2041'
p3155
sg15
I0
sg16
g1
(g17
g3
NtRp3156
(dp3157
g20
(lp3158
(lp3159
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp3160
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp3161
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp3162
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp3163
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp3164
aasbsg32
Nsg34
g1
(g35
g3
NtRp3165
(dp3166
g38
(lp3167
g1
(g10
g3
NtRp3168
(dp3169
g13
S'auto_2039'
p3170
sg15
I0
sg16
g1
(g17
g3
NtRp3171
(dp3172
g20
(lp3173
(lp3174
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp3175
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp3176
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp3177
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp3178
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp3179
aasbsg32
Nsg34
g1
(g35
g3
NtRp3180
(dp3181
g38
(lp3182
g1
(g10
g3
NtRp3183
(dp3184
g13
S'auto_2038'
p3185
sg15
I0
sg16
g1
(g17
g3
NtRp3186
(dp3187
g20
(lp3188
(lp3189
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp3190
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp3191
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp3192
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp3193
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp3194
aasbsg32
Nsg34
g1
(g35
g3
NtRp3195
(dp3196
g38
(lp3197
g1
(g10
g3
NtRp3198
(dp3199
g13
S'auto_2037'
p3200
sg15
I0
sg16
g1
(g17
g3
NtRp3201
(dp3202
g20
(lp3203
(lp3204
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp3205
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp3206
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp3207
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp3208
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp3209
aasbsg32
Nsg34
g1
(g35
g3
NtRp3210
(dp3211
g38
(lp3212
g1
(g414
g3
NtRp3213
(dp3214
g13
S'auto_1954'
p3215
sg15
Nsg16
g1
(g17
g3
NtRp3216
(dp3217
g20
(lp3218
(lp3219
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp3220
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp3221
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp3222
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp3223
a(g131
I263
g30
S"self.c0 = theano.shared(value=np.zeros((n_h, ), dtype = config.floatX), name = 'c0')"
tp3224
aasbsg427
g1
(g428
g3
NtRp3225
(dp3226
g32
g1396
sg432
(lp3227
g434
(g435
(I0
tS'b'
tRp3228
(I1
(I16
tg412
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
tbasg437
I00
sg438
I00
sg402
g1
(g403
g3
NtRp3229
(dp3230
g406
(I00
tp3231
sg408
S'float64'
p3232
sg410
g412
sg413
I00
sg32
Nsbsg443
Nsbsg32
g1396
sg34
Nsg402
g3229
sbasg16
g1
(g17
g3
NtRp3233
sg445
(lp3234
g3198
asg447
g1
(g1143
g3
NtRp3235
(dp3236
g1146
g3231
sg1147
(lp3237
I0
asg1149
(lp3238
I0
asg1151
(lp3239
sg1153
I01
sg1154
(S'x'
I0
tp3240
sg1156
(dp3241
I0
(lp3242
I0
assbsbsg402
g1
(g403
g3
NtRp3243
(dp3244
g406
(I01
I00
tp3245
sg408
g3232
sg410
g412
sg413
I00
sg32
Nsbsbasg16
g1
(g17
g3
NtRp3246
sg445
(lp3247
g3183
asg447
g1
(g1164
g3
NtRp3248
(dp3249
g1167
g1168
((lp3250
(lp3251
I0
aI00
aatRp3252
sbsbsg402
g1
(g403
g3
NtRp3253
(dp3254
g406
(I00
I00
tp3255
sg408
g3232
sg410
g412
sg413
I00
sg32
Nsbsbasg16
g1
(g17
g3
NtRp3256
sg445
(lp3257
g3168
asg447
g482
sbsg402
g483
sbag1
(g454
g3
NtRp3258
(dp3259
g13
S'auto_2040'
p3260
sg15
Nsg16
g1
(g17
g3
NtRp3261
sg32
Nsg402
g460
sg463
g464
(g465
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp3262
sbasg16
g1
(g17
g3
NtRp3263
sg445
(lp3264
g3153
asg447
g1
(g469
g3
NtRp3265
(dp3266
g472
(g460
tp3267
sbsbsg402
g1
(g403
g3
NtRp3268
(dp3269
g406
(tsg408
g462
sg410
g465
sg413
I00
sg32
Nsbsbasg16
g1
(g17
g3
NtRp3270
sg445
(lp3271
g3138
asg447
g1191
sbsg402
g1
(g403
g3
NtRp3272
(dp3273
g406
(tsg408
g462
sg410
g465
sg413
I00
sg32
Nsbsbag1
(g10
g3
NtRp3274
(dp3275
g13
S'auto_2044'
p3276
sg15
I0
sg16
g1
(g17
g3
NtRp3277
(dp3278
g20
(lp3279
(lp3280
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp3281
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp3282
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp3283
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp3284
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp3285
aasbsg32
Nsg34
g1
(g35
g3
NtRp3286
(dp3287
g38
(lp3288
g1
(g10
g3
NtRp3289
(dp3290
g13
S'auto_2042'
p3291
sg15
I0
sg16
g1
(g17
g3
NtRp3292
(dp3293
g20
(lp3294
(lp3295
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp3296
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp3297
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp3298
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp3299
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp3300
aasbsg32
Nsg34
g1
(g35
g3
NtRp3301
(dp3302
g38
(lp3303
g3183
asg16
g1
(g17
g3
NtRp3304
sg445
(lp3305
g3289
asg447
g482
sbsg402
g483
sbag1
(g454
g3
NtRp3306
(dp3307
g13
S'auto_2043'
p3308
sg15
Nsg16
g1
(g17
g3
NtRp3309
sg32
Nsg402
g460
sg463
g464
(g465
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp3310
sbasg16
g1
(g17
g3
NtRp3311
sg445
(lp3312
g3274
asg447
g1
(g469
g3
NtRp3313
(dp3314
g472
(g460
tp3315
sbsbsg402
g1
(g403
g3
NtRp3316
(dp3317
g406
(tsg408
g462
sg410
g465
sg413
I00
sg32
Nsbsbasg16
g1
(g17
g3
NtRp3318
sg445
(lp3319
g3123
asg447
g1
(g1250
g3
NtRp3320
(dp3321
g408
S'float64'
p3322
sbsbsg402
g1
(g403
g3
NtRp3323
(dp3324
g406
(I00
I00
tp3325
sg413
I00
sg32
Nsg408
g3322
sg410
g412
sg1257
I00
sbsbag3183
ag1
(g892
g3
NtRp3326
(dp3327
g13
S'auto_2050'
p3328
sg15
I0
sg16
g1
(g17
g3
NtRp3329
sg32
Nsg34
g1
(g35
g3
NtRp3330
(dp3331
g38
(lp3332
g3153
asg16
g1
(g17
g3
NtRp3333
sg445
(lp3334
g3326
asg447
g903
sbsg402
g460
sbasg16
g1
(g17
g3
NtRp3335
sg445
(lp3336
g3108
asg447
g1
(g1269
g3
NtRp3337
(dp3338
g472
(lp3339
g473
(Ng460
NtRp3340
asg1274
(lp3341
sg1276
I01
sg1153
I00
sbsbsg402
g3323
sbag1
(g414
g3
NtRp3342
(dp3343
g13
S'auto_1942'
p3344
sg15
Nsg16
g1
(g17
g3
NtRp3345
(dp3346
g20
(lp3347
(lp3348
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp3349
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp3350
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp3351
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp3352
a(g131
I231
g30
S"self.W_hf = theano.shared(value=Wh_value, name='W_hf')"
tp3353
aasbsg427
g1
(g428
g3
NtRp3354
(dp3355
g32
g1526
sg432
(lp3356
g434
(g435
(I0
tS'b'
tRp3357
(I1
(I16
I16
tg412
I00
S'J$\xec\xfb\x9ax\xb8?M$\xe5$y\xf4\xc3?\x0c\xdf\xc9\x8e\xe6\x8d\xd0?C\x141\xec-h\xc4\xbf`\x04\xfc1\x15\x0c\xb5?\xa5!@\x02q\x1b\xda\xbfh\xae\x0c`\xf6\x0e\x9b\xbf\xc7\xa4U"\x12\xfe\xc6?#\xa3q\xe8Q\xbd\xd7?\x16Z<I\xa3V\xb3?\xe5uB.\xab\xf1\xae\xbf\xeasr\xe4\xd0~\xd6\xbf\xbep~\xa3C;\xad?g\xd9\n{^7\xc4?\x10\xe2\x84\x96\xf97\xd0?7&\xa2\xb3\x8f!\xaf?{\x1c\x1b\xb08\x93\xce\xbf\xdb\x14\x04\xb0M\xb6\xc1?5C\x0c\x1e\xbf\t\xdb?l\xe3{c#\xcb\xb0\xbfX\x1b$`\xa3\xad\xc9\xbf2\xcb\xd2\xc3l\x19\xb5\xbf__\x16\xacg\xfdj\xbf\xd9[lU\\\xc0\xc0\xbf\xee\x1b?TG\x9a\xc6?\x85\xac*S\x15\x91\xbb?\x01\xf1\xd8\xfd\x95e\xb5\xbf!\x1c\xb9\x86\x11Mt\xbf\x88\xe09\x83\x03\xa0\xd8\xbf\xfa\xd4\xc0\x17n\x8f\xb4?\x07\xe5\xe31\x08M\xd6\xbf1\x89\xe3\xda\xcc\xbf\xb1\xbfHg\xfa\xed\xaa\x86\xbd\xbf\x1c\x842+n\xdc\xbd?;n~\xd1\xd2l\xbc\xbf\xd6Q\x07B\xdf\n\x88\xbf>\x91f{N\xec\xd7?\x10\xedA\xc5d\x1c\xd9\xbf\xe9o\xdck:\xf4\x9c?)\x11l3\x9a\xa7\xcb?\xa7\xefI\x94\x87\x16\xc4\xbf\xf9\x92\x0c\xcf\xb2lu?\x9aj\xfa\xc4\x00\xc8\xd5\xbf\xaf!\x131\x8f\xbd\xd9\xbf\xabvPa\x84\x1b\xc7?]\x8b\xf0\xb5\xeb\xef\xb4\xbf;\xb4h\xd3\xc1\x00\xd5\xbf\x97\xfe\xb68\xd7K\xbe\xbf^UU\xcf\x86W\xc3?\xcag\xbe\xb2\xb0\xa3\xc1?\x85;E\xe8\x84\xc3\xd0?a^n\x01\xbe \xc0\xbf\xf95I\xde\xf5\x13\xc4\xbf\x83\x1a\xe8))-\xb5?\x15\xce#4d\x00\xd0?\xb8=8y\xc4\xf8\xb7\xbfN\xba\\w\x80\xa9\xce?Z7\t\xcd\x91W\xb5\xbf9d\x9d\x9a\xb3L\xe0?J5\x8b\xc8\xc8\x83\xdb\xbf\xbbN\x0f\x04\xaf\x8e\xd8?X\xce\xca\xcc\xad\xf5\xd7\xbf\xf25\xbf:\x1e\x92\xd3?\x7f\xd8\xc1\xea\x07\xf7\x95?o\xd3\xec\xf5\x91\x03\xbd\xbf\xd9\\\xf8R\xa5\x14\xcd\xbf\x0c\xa3\xc45-\xb3\xcd\xbf\x9cS1\xde\xf1\xd0\xc5?\xc5O\x06\xc7\xb4u\xbd?\xb6P\xd6O\xf3\x1e\xa8\xbf\x9c\x98\x04O\xe68{\xbf\x87z\x12\x1b\x89\xe1\xcb\xbf\x90\xa3\xaaX\xf8\xf7\xa0\xbf#\xf7\x88u\xcfX\xcc?\xbfjU^\xfe\n\xcd\xbfU\x8c\xa7\x94(\xad\xc0?\'\xcf\x85lX\x88\xbd\xbf\xc2\xf1\x8ex\xecp\xd8\xbfO\x8c\\\xf1\xa2\xfc\xd0?\xc4v\xd6\x03\xb0\xfb\xd5\xbf\x85\xb66\xd2\xbc\xbf\xbd\xbf\x97\xf7\x87}\xa9\x1b\xd1?\xb3s\xca\xb0\xd40\xc9\xbf\xd2SA\xcce)\xce?\xc9\xfe\x9d\xef?\xb4\xbc\xbf\xf2\xa1\xec\xdbu\xf5\x97\xbf\x994JA\x1b\'\xde?\x12\x05\r\xd42,\xd2?<\xa3\xd8\x9f?\x10\x96?(\x93\xb6\x95}\xed\xc4\xbf\xf3\x16\x1f\x00\x13\x88{?\xa1\xd4\x17,\xcdd\xda?@\xae\xb8:\\`\xe1?\xf1hf\xfd\xa9\xd5\xc3\xbf\xb5\xf5\xec\xb5\xa0\x1b\xd7?\x87\xf1\xb3Y\xc8>\xd9\xbfz \xb9>\x96\xd2\xc2?\xeb\x1et\x93\x9e\xf5\xb7?\xad\x83\xf9>U\xa8\xd0?\xefOg\xd5\x17\xa3\xca\xbfF\xa1\xf3\xa9\xb0\xb0\xa2?u\xebt\x98\xc4\xc9\xdd\xbfrA_\x88~)\xc4\xbf~\x93\xff\x1dciq\xbfz\xb4.\x00\xce\xe5\xa8?\xacD\x97\xfa\xf4U\xe6?t\x1f\xcf\xba\xf6L\xc0\xbf\x9d\xbc\x15\x07\xf8Yu?9\xc8\x0f"\x9an\xd2\xbf~\xe2\xfa2\xae.\xde\xbf\x95\xe1+\xcaR\xbf\xcc?q\xc1\xd19x\xf9\xcc?{\x80\x81\xf0\xcd\x01\xd6\xbfnB\\-b\t\xdb\xbf\xb9\xcb\xbcc$Y\xc4\xbfvUA;#\xac\xda?4M\xabMm\xcf\xd7\xbf\x13%\xca\xa4G\xd1\xc5?Pk*|\x96\xd2\xa0?\xe3\x13\xbd\'\xfaP\xb3\xbfB7pu\xe5X\xc3\xbfH\xbf#Z\x92[\xaf?\xa2x\xc2\xfd\x10\xe4\xb3\xbf\x01iB%w\x8e\xb9\xbf\x03`3\x9d\xa9\x90\xaa\xbf5sA\xa94\xc9\xd1?\xc2\x95\xe3]c>\xab?}W\xcdT\xd5\xa6\x91?K\x07m\xf0\n\x1f\xd6?y\xb0\xea X)\xb1\xbfjm\x95\x15\xe7\xec\xd6?Q\x01\xa5\x1bA\xa0\xc5\xbf\xe1\xe9\x85\x01,\xff\xc0?\xe7\x15Tk\xb9\xad\xb4\xbfO\xfe?\xd3\xf8\x88\x91\xbf\xf4\xca"sj\x95\xc4\xbf\x0b]+\xaa\x9d\xe7\xb2\xbf\xcf\xfe\x89\x8e=k\xc6\xbf\xf1Y\x11\xeaR\xc8\xb9?\xfcE\xeb+\x80d\xca\xbf*u\xe0\x15{+\xc1?"_\xefw\xca\xc6\xe2?\x96\xaf\xa4\xfar\xe1\xd8\xbf\xbc\xcd\xd8\xc5\x1a\xfa\xe2\xbf\x85T:;L\x9f\xcf\xbf\xd5\xc3v^\x16\xc9\xc7?\xba\xf1\xb1\x9e\xd2\xc1\xc6\xbf\x9b$5\x9e\xb9z\xc2?\xcd=\x14>\x05`\xce?\x90\\\xbd\xf3\xa9\x11\xb0\xbf\x98u\xd2\x81\x05P\xcc?\xb4\x8a\xb5\x8b\xf0\'\xe2\xbf\xd2\\_\xfc}\xb4\xca?\xf2^\xf7\xaa\xe4\x93\xc9?XN\x89\x99nt\x99\xbf\xdd\x8a\xceZ|\x0e\xd0?\xfcO\x00\x19/\x0e\xd7?\xbd\xc7BF\xd5\xec\xde?\xe2J\xddk[\x0f\xdf?&\xe3\x01\x99\xd7m\x8c?.\xd2\x1d\xbbg\x13\xa2\xbf~-)%r\xfe\x93\xbfD\x92R*[e\xe5\xbf\xe7\xfb\xb7\xe3LW\xc6?%\xb9\x96\xffz\xcb\xe2?\xd9\xdbj\xf5N\x1b\xc2?D\xdd\xf0\x99`\xbe\xd6\xbf\x99\xc6\xc3\xae\x83\xd4\xcf\xbf\xa1\xd7jh\x95\x07\xce\xbfob:\xf0H\x83\xda?\xba\x86\xec3\x9c\x13\xc0?\xb60\xab\xbd\x8ck\xc4?\xfb\x83\xdb\x17;\xa0\xb6?\xc9\x06\xa2\xeb\x9d\xc8\xd1\xbf\x00\t\xf0:\x844\xce\xbf\xff\x8e*\x13\x9c\xc8\xc5?]_\xd3\xbf\xf5\x11\x96?5M~h\xc5\xba\xdd\xbf\xd31\xc3\x16"\'\xc9?\xb8\x1d\xfd\xc0\xec\xaa\xd6?J[\x9a\x8b_.Z?o\x1e\x1c8\xc38\xb4\xbfG4\x9d\x16I\xda\xd5?KV\xea\x06\xbd\r\xa9\xbf\x1dI\x9e\xe4m\xa4\xc3\xbf\x91\xf4W\xeb\xb5\x9d\xd8\xbf\xde\xd8\xf6\x19\xcdo\xbf\xbf\xb9f\xdf\r<\xdf\xdd?]\xae\xe5\xb0\xf1\x9e\xd2?\xcd\x8aEZ\xb1\x8e\x9e?\xa1\xdf\xa4wJ\x0fX\xbf\xae\x82e\x14 \xab\xcf?\rH1\xb9l0\x9a?\r\x93\xf4,\xf48\xd4\xbf\xb2\'\xe2=)x\xa2?O/w\xba\x1ew\xa6?\xbe9\xbd\xc0\xa6mj?\xc9\x0c\x98M\x0fz\xb0?\xa4\x82\x1cE>,\xc6\xbf\x84\xbe\x1e\xe9f\xd9\xa3?T\x19\xa0\x80\x07\xa7\xd9\xbfI\x1dU\x08\xd0u\xcd\xbfAy6\xdf\xa46\xaf\xbfH(\xba\xdb\xfcG\xc3?,V\x83:z\x07\xb3\xbf\xcf\xc1\xc8\xe05,\xbc?>\xe4\xc3\t\xe3\\\xd0?o\xc1\xcdB\xa3\\\xe3?\xe9\xea\x9a\x1c\xde\xc2\xb2\xbf\xd7\xa4q\x8dr\x99\xc4\xbf\x98\xcb@\x86\xf4\xc1\x83?\x16a\xdb\xf9\x05f\xa9?\r|w\xbe\xd7y\xc1?\xb9\x97\xba6p\x00\xca?5+\xc2\x1e\xb9\x12\xb2\xbf\xb8\x9cCL\x0cC\xc7?\xfc\x96+M\xbc\xfb\x94?\xa2\x1a<rP\xa3\xd3?}\xa6\xe2\xf1\x10\xd8\xb1\xbf\xb8\x84\x94D\xe5\xf3\xa1?NsO\x89\xe0K\xb1?\x91\x16I\xcf\xd2\x1e\xd2?\xfea\xac\xc3\xd6\xceP\xbf0\x01\xee\xf3\xed\x95\xd0\xbf\x85\xc9\xc2RD!\xdb\xbf\xe6\xd02\xebM\x8b\xd0?\xa8\'\x08\xf8 }\xc4?\x0e\x0bCJV\x97\xda?\x8dY\x1b\xd1\xe1\xab\x97?\xfc1\xb3BE+\x96?\x8b\x89E.{\xf5\xa6?\xe0\xec\xb5\x889\'\xc1\xbf\x16\xb0"`\x82\x85\xc6\xbf\xddsR\xcb\xaf\x0e\xbc?\x92\x9c2\xdc\xbc\xe4\xd2?1\x05\xe0\xe7eR\xc3?\xee\xc4P\t\xae\xc8\xbe\xbfMa\x8d7q-\xbb?\x1d\xa2I\xe6]\x96\xa6?\xeb\xbcW^\xfb\x06\xc2\xbfL\xb0\xbf\x85e\x8f\xd3\xbf\xb2|N\xe1X\x94\xca\xbf\xeb\xd7\xb9\x87\xb1 \xd3?\x00U\xe6\xd3H;\xb0?,m\x89\x1a\xf0}\xc3\xbf\xc2`wU\xcc\x99\x93?\xab\xd6F\r\x12\x8c\xc3?\x84\xe8[\xe7\xe1H\xc1\xbf7\x8e\x8b\xc0\x00{\xc8\xbf~\x1e\xf4\x00$l\xdc\xbf\x85cYf\xb2j\xd1?\xea\xb8\xc5\xc3B\xd0\xc2?\x7f\xb5)\xa0\xa2k\xc5?ODk\xf5@\xfb\xc1?1qh\xed\x818\xe0\xbfU\xd5\xfb7G\x0f\x9c?'
tbasg437
I00
sg438
I00
sg402
g1
(g403
g3
NtRp3358
(dp3359
g406
(I00
I00
tp3360
sg408
S'float64'
p3361
sg410
g412
sg413
I00
sg32
Nsbsg443
Nsbsg32
g1526
sg34
Nsg402
g3358
sbag1
(g414
g3
NtRp3362
(dp3363
g13
S'auto_1950'
p3364
sg15
Nsg16
g1
(g17
g3
NtRp3365
(dp3366
g20
(lp3367
(lp3368
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp3369
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp3370
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp3371
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp3372
a(g131
I255
g30
S"self.b_f = theano.shared(value=np.zeros((n_h, ), dtype=config.floatX), name='b_f')"
tp3373
aasbsg427
g1
(g428
g3
NtRp3374
(dp3375
g32
g1547
sg432
(lp3376
g434
(g435
(I0
tS'b'
tRp3377
(I1
(I16
tg412
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
tbasg437
I00
sg438
I00
sg402
g1
(g403
g3
NtRp3378
(dp3379
g406
(I00
tp3380
sg408
S'float64'
p3381
sg410
g412
sg413
I00
sg32
Nsbsg443
Nsbsg32
g1547
sg34
Nsg402
g3378
sbag1
(g414
g3
NtRp3382
(dp3383
g13
S'auto_1948'
p3384
sg15
Nsg16
g1
(g17
g3
NtRp3385
(dp3386
g20
(lp3387
(lp3388
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp3389
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp3390
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp3391
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp3392
a(g131
I251
g30
S"self.W_hc = theano.shared(value=Wh_value, name='W_hc')"
tp3393
aasbsg427
g1
(g428
g3
NtRp3394
(dp3395
g32
g1568
sg432
(lp3396
g434
(g435
(I0
tS'b'
tRp3397
(I1
(I16
I16
tg412
I00
S'2\xb1 (a`\xd3\xbf\x84\xdbSF\xd5\x13\xd2?R\x96\x92\xd8\xd8\x86G?\xbf\xd2\xcf\xc7\xeaT\xd2?\xe4}V\x82\xd8O\xc7?K\xc5\x14\xd2\xab\xe3\xd1\xbf\xcbt\xe6\xf4\xfc\x08\xd3\xbf\xd7\xc5\x84\x95\xec\x11\x9a\xbfSa\xc9\x04s\xb8\xa5?\t,Af\xa5B\xc6\xbf\xfbm\xa1\xabvZ\xc0?\x08+\x82\x96\xc0l\xab\xbf\xa4\x83\xc6Kt7\xc8\xbf\xb0\xc3\xe4\xcb\x82R\xb0?C\x91S\x01\xd1\x93\xc4\xbfBQ\xf8\x92:6\xd7\xbf\xf4x\x0c\xb0\xbc\'\xd9?d=\xc5\x9a\xbb{\xdf\xbf\xce\xc0D\x06d\x85\xda\xbf\xc1\x1e\x9dV\x10\x8a\xca?J\xe25gQ\xdc\xb0?K\'8\xd7j(\xc2\xbfjY\x9b\x82r\r\xdf?\x04\xa9\x9fGQ=\xb9\xbfu0\x92{\x05\xc9\x9c\xbf\x9eo\xc9\x83q\xdco?\x01\xad\xbd\xb3\xed\x98\xc3?\x86|\xbc\x97\xbf\x18\xc6?\x80\xfeG\xde7\xcc\xd5?@\xa3D`f\xec\xbd\xbfb\xea\xef\x87\xff{\x87\xbf\x0e\xa4\xb6E\xa0,\xb3\xbf\xf8%Qj C\xd5\xbf\xbfW3{/\x12\xb5\xbf\x84m\xd5\xae\x98K\xb5?\xf9\x86\x06Z\x07V\x9d?\xfe|\x13}h\xd9\xd6?9\xab\xee\\\x96n\xa9?\x06\x91\xb9\xef\x04\xb3\xcf\xbf,!bok\x7f\xc0\xbf\x1fwht\x06 \xca\xbf\xd9R\xfcS\xb69\xc3\xbf\xab\xbb\x9a[\x1a\xa0\x96\xbf\x06U\xe5Z9e\xc8?\xf1!wfi\xa5\xcb?\xc8\xa6fJ]7\xcd\xbf\xb8\xfa\x9f\xc5m\xe8\xba?p4?\x1f\x02{\x91\xbf\n\x82\xde\x86tz\xb6\xbf\xa1_\xa2\xae\x9f_\xc5\xbf\xbaoBK\xaf\x8a\xc7\xbf\xe6m\x1bS\xbf\x04\xc1\xbfC,\xf9%8\xb2\xd0?\xddo\x8c\xaa;\x18\xce?\x82\xfb\xbe\xdc\xba\x8d\xca?yL\xec@\x9c2\xe2\xbf\xd9q-@\xcf\xe5\xd3?\t\xa7\xb0\xd2%p\xb3?}\xb8\xfd\x8b\x8d\xb5\xcb?\x91\xf45\xb5\xf7\xeb\xa5\xbf\xe1\x7f\xab\xc8\xf5\xa5\xa7?\x18~\x0f\x89=Z\xd5?\xf0\x05\nh-7\xd0?\xbe\xa9\xeaZ\xed\xaa\xcd\xbf\xa8\xf1\xdc\xa7Ro\xc9\xbf\x0e\xc2;9p\xba\xbc?$\xa6\xb7\x04\xc3T\xa9?\x1c~s\x8e\x05t\xcc\xbf\x92\xecl\x0b\x81\xbd\x8d\xbf\xeeL\xcfg\x9e\xce\xc5\xbf\xd2\x0f4\x01\x1a\xaf\xc2?\xde\r]\xaf\x972\xe2?g\xc7\x85e\x9b\x0b\xcd\xbf\x86G\xe3\x94\xf9Z\xbc?j\xe3\x1a\xe5\xb8\xef\xba?\xa4Y\xf7\xba$\xaf\xa9\xbf\xcb\xac\xd5\x1d\x82\x1c\xb8\xbf\xb8\x87\xd5\xc0\x84\x16\xb6\xbfV\xb5\xb7\xa4\xe6k\xd7\xbffF\xae\x05\xd3\x9a\xdf\xbf\xfd\xc9d\x8a\x8a\x96\xcb\xbfL,\x9e\xa5\xfbP\xc3\xbf:\x1f\xb5\xe3:\xe3\xc7?\x7f\xed\xd7\x87\x7f\x9e\xd1\xbf\x17\x9c\xba{\\\xc1\xc0\xbf\x1e\x03`$\x01)\xd1?\xd4\xc5\x8d\xc6\xedv\xc9?\x96\xdb\xf7\x05\xe0\x9a\xbe?\n\xba\x1b{\x88\xab\xd1?\x90\xac\xe6\x01U=\xe5?\x8eP\x91\x06s\xa8\x99\xbf\xd5\xd9\xa7um\x87\xc3?\xb2\r}D\xa1\x83\xa0\xbf\xfb\xa8dvao\xa7\xbf\xd0\xdc\x10/\x06\xbf\xcc\xbf!\x1e\x0c\xe8<\x11\xdb?c\xabdG\xef\xb5\xa8?A\\\xb61#\x8b\xd8?RC\x0e*\x9c\x8d\xb8?\xbe\x945Q.\xb3\xcb\xbf\xed\xcd7\x08\xe2Kr?\xf4\xab\x08ri\xbc\xc4?\xc3\xb0\xb6\x15\x11\xec\xab?D@\xc3\x02\x83\x0f\xdd\xbf\x94#\xc1\xe2\xbflq?Y\x86%9\xb4\xcd\xb8\xbfi\xcaF\xbeJy\xba\xbf\x7f\x9dON\xe0\xe7\xd5\xbf\x1a|\x00\xbb\xcc8\xde?\xecG{\x89\x9bx\xcf?Nf\xc5\xbbzw\xca\xbf!a\x92a@\x95\xac\xbf\xba\x1bc\x01]\xab\xd4?\xde\x16G\x90Q\x01\xda\xbf\x9d\x97v\x1c\x179\xd9??\xd7\xffl\x81<\xb7?k\x05G\xc7\x83h\xbe?e\xd00\x80\xc3\x8a\xa4\xbfc\xc7\xa8\xd4\xf66\xbc?\xaa\xa8\x05l\xd5S\xdf?\xcd\x0b\xafV\xa34\x9c?\x0f\xcaP\xf8\xa1\xf9\xc5\xbf\xb4\xc3oy\x8c\xbb\xc0\xbf\x88\xd9F\x9a\x83\xb5\xd0?\xe5g~\xed\x9b\xcd\xb1?\x05\xc6\xc7\x0b\x8f>\xae?\x19\x13\xd1\x07\x08\x91\xc1\xbf\xf7*\xec\xcd\xdf\x9b\xd6?\xde|\xb9\xacJ\xb6\xa0?*\x06\xbf\x15\xd4\xd1\xc9\xbf\xcb\xc7e\xf9G\xff\xdb\xbfW(\x04\x88\xa4\x97\xd3\xbf\x1ee\x93\xe2\x02\x16\xba?L\xf1\x16F\xec.\xcc\xbfR\xd5{]g?\xe0\xbf\xbc(\n\x89K\xe8\xca\xbfr[\x03\x15\x04\xe9\xa2\xbf\x12}n"*\xf3\xc2?t7b\xf2\xabB\xe4\xbf\x7fD\xcc\xebJ\x0b\x8a\xbf\xb0\x07`\x16\x18\xcd\xcc?\x12\x84e\xe0m\xc4\xcb\xbf*dJ$tv\xc2\xbf\xd1\xf9MY.\xb6\xa9?\x13\x8aN\xbd\t\xc1\xcf\xbf\xdd\xfc\x18\xd9\x96D\xcd\xbf\x8d\t\x1d:M\xbf\x9d\xbf\xab9zT\x07\xa7\xa6?\xfb\xd6ulBe\xc2?\xf6\x04BO\x06\x99p?\xc5\x99\xa0\xb9\x0f\x02F?\xe1\x9e\x86w\xea\xeb\xaf?\x05\xde\n\xdf\xb7\xf7\xcb\xbf)\xc0\xa0\'\xcd\xc7\xe0\xbf3\x07#\x15\xff\xda\xcc\xbf\xcd\x86I\xe1\xe9$\xbf\xbfx\xd2.\xa5\x940\xca\xbf\x85\x89\x1d\xfd]5\xd2\xbf\xdb\x9d\xee\xd2`\x00\xd1?\xe8>\xa6z\xe1\x97\xca\xbf\\\xab\xfd\xdf\xca\x83\xb7\xbf*\xef\xa0\x12\xa2h\xc2?\x88R\xf6\xfcR\x1e\xbc?\x19\xe1\x97\xcd\x05M\xc7\xbf\'\xd0o\xae\xd5n\xcc\xbf\xbb\xaey\xdf\xd6-\x91\xbf\xf4 \xf1\xf3\xbf+\xc6\xbf\x1d\xb1tod\xc1\xa0\xbf\xfb*\x08<\xa2\x92\xcb\xbf\xac\x02\xc1D\x88\x9c\xba?s\x8a\xb5\xd7+\x9c\xd6\xbf\xb3\x0b\x0f\xe6\x95T\xab\xbf\xe8\x93\xf0\x9a\xcc\xa6\xb2?\x99\x99m\xa6\x90\xbd\xb2?e>`p\xb8W\xe3?:\xfd\xdc)\xb1[\xad\xbf:#excs\xa2?\x00\x92\xd3\x8d<\xd3\x97\xbf\xdf\x05`\xa0\xb4{\xde?i\xf70\x18\x1f\x1e\xd0?\x90\xaegAI\xe7\xde?\xec\xd3\x05h\xc6i\xc2\xbf\x9a\xb8:\x90|+\xa5?P\x9a!\xd1!<\x8a?\x15\xd4\x04T\xcel\xd2\xbf=\xc1pI\xab\x02\xb6?\x98Q\xbd\x99\xfe\xa0\xcf\xbf)R\x89h\xec\xdc\xd0?\xaf\x86\x95\xea\x98\xc3\xaa\xbf\xbbnB\r\x11U\xd8\xbf\x15\x19\xc3\x13^\xe9\xc1\xbf\xc1\xc1\xff\x9a\xd3\x11\x88?[\x1f\x0b\xe3\x1b\xf0\xdb?\x82UA^\x00\xc3\xcb?\x13mR<3\xb8\x97?\x84\xd8voC\t\xcc?\x16t\x12\xfe\xd2\xfd\xa5?U\xc7\xbe\x14\xaby\xcc\xbf\xfa#?`#o\xba?\xfa\xaf\x8c\x8b\xad\x87\xcb?\x1b\xf8\x054\xf2g\xe8?\xc0\x7f\x96\x9c\xb3\xfa\xb2?C\x16U6\x83\xd6\xbe\xbf*`\x01\xce\x00\xc9\xcd?\xf3`\xe6N9\x13\xc6?\xce\x1b\x8b\xdb\xddL\xd9?L\xd0\x8f\xec\x01\x03\xc8?J\xba\x18\xe3\xfaY\xdb\xbf\x94\xb6\x101t$\x8f\xbf~\xc6z;\x00\x9e\xd4?\xae\x1bY\x9aN[\xdb?\xee\xb0t\x94I\x9a\xca\xbf\x9c\xf7[\x12\xae\xa6\xab\xbfKH\xdbG$\xf7\xc4?0\x06\x9ar\x96+\xba\xbf\x90O.\xba\x1aw\xb0\xbfy\xaf\xaf\xf1\x19 \xcd?DE\xed`\xe19\xd0?\xfd\xfe+\xae\x1eF\xd2?\x0bE\xd9\x0f&\'\xc0?\xfc.\x89\xa1>&\xd0\xbf2b\xb48\xce\x8e\xa1\xbf\x98W\xd0\xb2s\x87\xcf\xbf\xdf\xb7\xeb\x87\xcfA\xc0\xbfC\xc2F\xee>h\xc2?:.\xdd\xf8\xb8;\xa5?@\x01c\x82(\xae\xe1?\xe1\xb0;3d\xde\xb0?}b\xd1J=.\xba?\xae\xb41\xf8"?|\xbf\x95\xd5E\x0cX\xae\xc8?\x90\xf4Q\xe7=\xa9\xda?5S\r\t\xe7\xb8\xa5?\x8f\xddY\xc0\xd9b\xd8?\xdf[?\xc8\xa2%\x99\xbf\x8agj\xd7\x8a:\xd1?\x84\\\xd4=\x1c$\x94\xbf\xf1\xb2ob#e\x9a\xbf+;\xa3\'\xa6-\xe0\xbf\xf0N!\xafp\xd0\xdc\xbfG\xb3P\xde\xe8\x03\x9f\xbfM\xe3\xb3\xf3\x95\x1c\xc8?\xdf\x85\x9fd\xa8\xea\x85\xbf\xad\x82W\xcaf\x00\xcb\xbfn\xd3\xeb\xd1\x16\xb6\xce\xbf\x16\x10\x06\xeb\x0c\x17\xc8?K$\xa9L=Z\xd0\xbf@\xfeB.\xb1\xbb\xca?\xbf\xac\xbc\xf3TI\xc6?Y\xa2\xcc8\xc7\xf6\xd7?\xb3%\xf8Q\xbb\xb0\xe3?\xc20*\xc3\x8d\x12\xb0\xbf\xafH\xaa\xbbpB\x9d\xbf\x1c\xb3\xc8`\xc1 \xd7?\xa0\xea\xf7\xf1\xc4m\x87\xbf\xd4\x8b\xa3\x87g\xfd\xd8\xbf'
tbasg437
I00
sg438
I00
sg402
g1
(g403
g3
NtRp3398
(dp3399
g406
(I00
I00
tp3400
sg408
S'float64'
p3401
sg410
g412
sg413
I00
sg32
Nsbsg443
Nsbsg32
g1568
sg34
Nsg402
g3398
sbag1
(g414
g3
NtRp3402
(dp3403
g13
S'auto_1952'
p3404
sg15
Nsg16
g1
(g17
g3
NtRp3405
(dp3406
g20
(lp3407
(lp3408
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp3409
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp3410
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp3411
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp3412
a(g131
I257
g30
S"self.b_c = theano.shared(value=np.zeros((n_h, ), dtype=config.floatX), name='b_c')"
tp3413
aasbsg427
g1
(g428
g3
NtRp3414
(dp3415
g32
g1589
sg432
(lp3416
g434
(g435
(I0
tS'b'
tRp3417
(I1
(I16
tg412
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
tbasg437
I00
sg438
I00
sg402
g1
(g403
g3
NtRp3418
(dp3419
g406
(I00
tp3420
sg408
S'float64'
p3421
sg410
g412
sg413
I00
sg32
Nsbsg443
Nsbsg32
g1589
sg34
Nsg402
g3418
sbasg16
g1
(g17
g3
NtRp3422
sg445
(lp3423
g137
ag1
(g10
g3
NtRp3424
(dp3425
g13
S'auto_2312'
p3426
sg15
I1
sg16
g1
(g17
g3
NtRp3427
(dp3428
g20
(lp3429
(lp3430
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp3431
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp3432
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp3433
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp3434
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp3435
aasbsg32
Nsg34
g149
sg402
g1
(g403
g3
NtRp3436
(dp3437
g406
(I00
I00
tp3438
sg408
g409
sg410
g412
sg413
I00
sg32
Nsbsbasg447
g1
(g1613
g3
NtRp3439
(dp3440
g1616
I00
sg38
(lp3441
g1
(g10
g3
NtRp3442
(dp3443
g13
S'auto_1963'
p3444
sg15
Nsg16
g1
(g17
g3
NtRp3445
(dp3446
g20
(lp3447
(lp3448
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp3449
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp3450
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp3451
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp3452
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp3453
aasbsg32
Nsg34
Nsg402
g1
(g403
g3
NtRp3454
(dp3455
g406
(I00
tp3456
sg408
g2359
sg410
g412
sg413
I00
sg32
Nsbsbag1
(g10
g3
NtRp3457
(dp3458
g13
S'auto_1970'
p3459
sg15
Nsg16
g1
(g17
g3
NtRp3460
(dp3461
g20
(lp3462
(lp3463
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp3464
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp3465
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp3466
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp3467
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp3468
aasbsg32
Nsg34
Nsg402
g1
(g403
g3
NtRp3469
(dp3470
g406
(I00
tp3471
sg408
g2473
sg410
g412
sg413
I00
sg32
Nsbsbag1
(g10
g3
NtRp3472
(dp3473
g13
S'auto_1977'
p3474
sg15
Nsg16
g1
(g17
g3
NtRp3475
(dp3476
g20
(lp3477
(lp3478
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp3479
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp3480
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp3481
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp3482
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp3483
aasbsg32
Nsg34
Nsg402
g1
(g403
g3
NtRp3484
(dp3485
g406
(I00
tp3486
sg408
g2591
sg410
g412
sg413
I00
sg32
Nsbsbag1
(g10
g3
NtRp3487
(dp3488
g13
S'auto_1984'
p3489
sg15
Nsg16
g1
(g17
g3
NtRp3490
(dp3491
g20
(lp3492
(lp3493
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp3494
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp3495
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp3496
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp3497
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp3498
aasbsg32
Nsg34
Nsg402
g1
(g403
g3
NtRp3499
(dp3500
g406
(I00
tp3501
sg408
g2709
sg410
g412
sg413
I00
sg32
Nsbsbag1
(g10
g3
NtRp3502
(dp3503
g13
S'auto_2019'
p3504
sg15
Nsg16
g1
(g17
g3
NtRp3505
(dp3506
g20
(lp3507
(lp3508
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp3509
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp3510
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp3511
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp3512
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp3513
aasbsg32
S'h0[t-1]'
p3514
sg34
Nsg402
g2995
sbag1
(g10
g3
NtRp3515
(dp3516
g13
S'auto_2036'
p3517
sg15
Nsg16
g1
(g17
g3
NtRp3518
(dp3519
g20
(lp3520
(lp3521
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp3522
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp3523
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp3524
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp3525
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp3526
aasbsg32
S'c0[t-1]'
p3527
sg34
Nsg402
g3229
sbag1
(g10
g3
NtRp3528
(dp3529
g13
S'auto_2195'
p3530
sg15
Nsg16
g1
(g17
g3
NtRp3531
(dp3532
g20
(lp3533
(lp3534
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp3535
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp3536
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp3537
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp3538
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp3539
aasbsg32
S'W_hf_copy'
p3540
sg34
Nsg402
g3358
sbag1
(g10
g3
NtRp3541
(dp3542
g13
S'auto_2196'
p3543
sg15
Nsg16
g1
(g17
g3
NtRp3544
(dp3545
g20
(lp3546
(lp3547
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp3548
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp3549
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp3550
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp3551
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp3552
aasbsg32
S'b_f_copy'
p3553
sg34
Nsg402
g3378
sbag1
(g10
g3
NtRp3554
(dp3555
g13
S'auto_2197'
p3556
sg15
Nsg16
g1
(g17
g3
NtRp3557
(dp3558
g20
(lp3559
(lp3560
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp3561
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp3562
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp3563
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp3564
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp3565
aasbsg32
S'W_hc_copy'
p3566
sg34
Nsg402
g3398
sbag1
(g10
g3
NtRp3567
(dp3568
g13
S'auto_2198'
p3569
sg15
Nsg16
g1
(g17
g3
NtRp3570
(dp3571
g20
(lp3572
(lp3573
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp3574
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp3575
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp3576
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp3577
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp3578
aasbsg32
S'b_c_copy'
p3579
sg34
Nsg402
g3418
sbasg1756
(dp3580
g1758
(dp3581
I0
I5
sI1
I6
ssg1760
(dp3582
I0
(lp3583
sI1
(lp3584
sI2
(lp3585
sI3
(lp3586
sI4
(lp3587
sI5
(lp3588
I0
asI6
(lp3589
I1
asI7
(lp3590
sI8
(lp3591
sI9
(lp3592
sI10
(lp3593
ssg1773
(dp3594
I0
g3584
sI1
g3585
sI2
g3586
sI3
g3587
sI4
g3588
sI5
g3589
sI6
g3590
sI7
g3591
sI8
g3592
sI9
g3593
ssg1775
(dp3595
I0
I5
sI1
I6
ssg1777
(dp3596
I0
(lp3597
I4
asI1
(lp3598
I5
assg1781
(dp3599
I0
I1
sI1
I2
sI2
I3
sI3
I4
sI4
I5
sI5
I6
sI6
I7
sI7
I8
sI8
I9
sI9
I10
ssg1783
(dp3600
I0
I-1
sI1
I-1
sI2
I-1
sI3
I-1
sI4
I0
sI5
I1
sI6
I-1
sI7
I-1
sI8
I-1
sI9
I-1
ssg1785
(dp3601
I0
I-1
sI1
I-1
sI2
I-1
sI3
I-1
sI4
I-1
sI5
I0
sI6
I1
sI7
I-1
sI8
I-1
sI9
I-1
sI10
I-1
ssg1787
(dp3602
I0
I0
sI1
I1
ssg1789
(dp3603
I0
g3588
sI1
g3589
ssg1791
(dp3604
I0
g3597
sI1
g3598
ssg1793
(dp3605
I0
(lp3606
sI1
(lp3607
I0
asI2
(lp3608
I1
asI3
(lp3609
I2
asI4
(lp3610
I3
asI5
g3597
sI6
g3598
sI7
(lp3611
I6
asI8
(lp3612
I7
asI9
(lp3613
I8
asI10
(lp3614
I9
asssg1804
(lp3615
(lp3616
I-1
aa(lp3617
I-1
aasg1808
I0
sg1809
I4644787806613997460
sg445
(lp3618
g1
(g10
g3
NtRp3619
(dp3620
g13
S'auto_2230'
p3621
sg15
I0
sg16
g1
(g17
g3
NtRp3622
(dp3623
g20
(lp3624
(lp3625
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp3626
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp3627
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp3628
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp3629
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp3630
a(g1823
I761
g1824
S'condition, outputs, updates = scan_utils.get_updates_and_outputs(fn(*args))'
tp3631
a(g131
I289
g1826
S'h_t, c_t = self.lstm_as_activation_function(Wix, Wfx, Wcx, Wox, h_tm1, c_tm1)'
tp3632
a(g131
I711
g1828
S'h_t = T.tanh(c_t)'
tp3633
aasbsg32
Nsg34
g1
(g35
g3
NtRp3634
(dp3635
g38
(lp3636
g1
(g10
g3
NtRp3637
(dp3638
g13
S'auto_2229'
p3639
sg15
I0
sg16
g1
(g17
g3
NtRp3640
(dp3641
g20
(lp3642
(lp3643
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp3644
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp3645
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp3646
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp3647
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp3648
a(g1823
I761
g1824
S'condition, outputs, updates = scan_utils.get_updates_and_outputs(fn(*args))'
tp3649
a(g131
I289
g1826
S'h_t, c_t = self.lstm_as_activation_function(Wix, Wfx, Wcx, Wox, h_tm1, c_tm1)'
tp3650
a(g131
I709
g1828
S'c_t = f_t * c_tm1 + (1 - f_t) * T.tanh(Wcx + T.dot(h_tm1, self.W_hc) + self.b_c)'
tp3651
aasbsg32
Nsg34
g1
(g35
g3
NtRp3652
(dp3653
g38
(lp3654
g1
(g10
g3
NtRp3655
(dp3656
g13
S'auto_2221'
p3657
sg15
I0
sg16
g1
(g17
g3
NtRp3658
(dp3659
g20
(lp3660
(lp3661
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp3662
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp3663
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp3664
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp3665
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp3666
a(g1823
I761
g1824
S'condition, outputs, updates = scan_utils.get_updates_and_outputs(fn(*args))'
tp3667
a(g131
I289
g1826
S'h_t, c_t = self.lstm_as_activation_function(Wix, Wfx, Wcx, Wox, h_tm1, c_tm1)'
tp3668
a(g131
I709
g1828
S'c_t = f_t * c_tm1 + (1 - f_t) * T.tanh(Wcx + T.dot(h_tm1, self.W_hc) + self.b_c)'
tp3669
aasbsg32
Nsg34
g1
(g35
g3
NtRp3670
(dp3671
g38
(lp3672
g1
(g10
g3
NtRp3673
(dp3674
g13
S'auto_2220'
p3675
sg15
I0
sg16
g1
(g17
g3
NtRp3676
(dp3677
g20
(lp3678
(lp3679
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp3680
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp3681
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp3682
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp3683
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp3684
a(g1823
I761
g1824
S'condition, outputs, updates = scan_utils.get_updates_and_outputs(fn(*args))'
tp3685
a(g131
I289
g1826
S'h_t, c_t = self.lstm_as_activation_function(Wix, Wfx, Wcx, Wox, h_tm1, c_tm1)'
tp3686
a(g131
I707
g1828
S'f_t = T.nnet.sigmoid(Wfx + T.dot(h_tm1, self.W_hf) + self.b_f)  #self.w_cf * c_tm1'
tp3687
aasbsg32
Nsg34
g1
(g35
g3
NtRp3688
(dp3689
g38
(lp3690
g1
(g10
g3
NtRp3691
(dp3692
g13
S'auto_2219'
p3693
sg15
I0
sg16
g1
(g17
g3
NtRp3694
(dp3695
g20
(lp3696
(lp3697
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp3698
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp3699
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp3700
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp3701
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp3702
a(g1823
I761
g1824
S'condition, outputs, updates = scan_utils.get_updates_and_outputs(fn(*args))'
tp3703
a(g131
I289
g1826
S'h_t, c_t = self.lstm_as_activation_function(Wix, Wfx, Wcx, Wox, h_tm1, c_tm1)'
tp3704
a(g131
I707
g1828
S'f_t = T.nnet.sigmoid(Wfx + T.dot(h_tm1, self.W_hf) + self.b_f)  #self.w_cf * c_tm1'
tp3705
aasbsg32
Nsg34
g1
(g35
g3
NtRp3706
(dp3707
g38
(lp3708
g1
(g10
g3
NtRp3709
(dp3710
g13
S'auto_2218'
p3711
sg15
I0
sg16
g1
(g17
g3
NtRp3712
(dp3713
g20
(lp3714
(lp3715
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp3716
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp3717
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp3718
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp3719
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp3720
a(g1823
I761
g1824
S'condition, outputs, updates = scan_utils.get_updates_and_outputs(fn(*args))'
tp3721
a(g131
I289
g1826
S'h_t, c_t = self.lstm_as_activation_function(Wix, Wfx, Wcx, Wox, h_tm1, c_tm1)'
tp3722
a(g131
I707
g1828
S'f_t = T.nnet.sigmoid(Wfx + T.dot(h_tm1, self.W_hf) + self.b_f)  #self.w_cf * c_tm1'
tp3723
aasbsg32
Nsg34
g1
(g35
g3
NtRp3724
(dp3725
g38
(lp3726
g3457
ag1
(g10
g3
NtRp3727
(dp3728
g13
S'auto_2217'
p3729
sg15
I0
sg16
g1
(g17
g3
NtRp3730
(dp3731
g20
(lp3732
(lp3733
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp3734
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp3735
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp3736
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp3737
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp3738
a(g1823
I761
g1824
S'condition, outputs, updates = scan_utils.get_updates_and_outputs(fn(*args))'
tp3739
a(g131
I289
g1826
S'h_t, c_t = self.lstm_as_activation_function(Wix, Wfx, Wcx, Wox, h_tm1, c_tm1)'
tp3740
a(g131
I707
g1828
S'f_t = T.nnet.sigmoid(Wfx + T.dot(h_tm1, self.W_hf) + self.b_f)  #self.w_cf * c_tm1'
tp3741
aasbsg32
Nsg34
g1
(g35
g3
NtRp3742
(dp3743
g38
(lp3744
g3502
ag3528
asg16
g1
(g17
g3
NtRp3745
sg445
(lp3746
g3727
asg447
g449
sbsg402
g1
(g403
g3
NtRp3747
(dp3748
g406
(I00
tp3749
sg408
S'float64'
p3750
sg410
g412
sg413
I00
sg32
Nsbsbasg16
g1
(g17
g3
NtRp3751
sg445
(lp3752
g3709
asg447
g1191
sbsg402
g1
(g403
g3
NtRp3753
(dp3754
g406
(I00
tp3755
sg408
g409
sg410
g412
sg413
I00
sg32
Nsbsbag3541
asg16
g1
(g17
g3
NtRp3756
sg445
(lp3757
g3691
asg447
g1191
sbsg402
g1
(g403
g3
NtRp3758
(dp3759
g406
(I00
tp3760
sg408
g409
sg410
g412
sg413
I00
sg32
Nsbsbasg16
g1
(g17
g3
NtRp3761
sg445
(lp3762
g3673
asg447
g1959
sbsg402
g1
(g403
g3
NtRp3763
(dp3764
g406
(I00
tp3765
sg408
g409
sg410
g412
sg413
I00
sg32
Nsbsbag3515
asg16
g1
(g17
g3
NtRp3766
sg445
(lp3767
g3655
asg447
g1974
sbsg402
g1
(g403
g3
NtRp3768
(dp3769
g406
(I00
tp3770
sg408
g409
sg410
g412
sg413
I00
sg32
Nsbsbag1
(g10
g3
NtRp3771
(dp3772
g13
S'auto_2228'
p3773
sg15
I0
sg16
g1
(g17
g3
NtRp3774
(dp3775
g20
(lp3776
(lp3777
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp3778
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp3779
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp3780
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp3781
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp3782
a(g1823
I761
g1824
S'condition, outputs, updates = scan_utils.get_updates_and_outputs(fn(*args))'
tp3783
a(g131
I289
g1826
S'h_t, c_t = self.lstm_as_activation_function(Wix, Wfx, Wcx, Wox, h_tm1, c_tm1)'
tp3784
a(g131
I709
g1828
S'c_t = f_t * c_tm1 + (1 - f_t) * T.tanh(Wcx + T.dot(h_tm1, self.W_hc) + self.b_c)'
tp3785
aasbsg32
Nsg34
g1
(g35
g3
NtRp3786
(dp3787
g38
(lp3788
g1
(g10
g3
NtRp3789
(dp3790
g13
S'auto_2223'
p3791
sg15
I0
sg16
g1
(g17
g3
NtRp3792
(dp3793
g20
(lp3794
(lp3795
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp3796
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp3797
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp3798
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp3799
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp3800
a(g1823
I761
g1824
S'condition, outputs, updates = scan_utils.get_updates_and_outputs(fn(*args))'
tp3801
a(g131
I289
g1826
S'h_t, c_t = self.lstm_as_activation_function(Wix, Wfx, Wcx, Wox, h_tm1, c_tm1)'
tp3802
a(g131
I709
g1828
S'c_t = f_t * c_tm1 + (1 - f_t) * T.tanh(Wcx + T.dot(h_tm1, self.W_hc) + self.b_c)'
tp3803
aasbsg32
Nsg34
g1
(g35
g3
NtRp3804
(dp3805
g38
(lp3806
g1
(g10
g3
NtRp3807
(dp3808
g13
S'auto_2222'
p3809
sg15
I0
sg16
g1
(g17
g3
NtRp3810
(dp3811
g20
(lp3812
(lp3813
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp3814
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp3815
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp3816
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp3817
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp3818
a(g1823
I761
g1824
S'condition, outputs, updates = scan_utils.get_updates_and_outputs(fn(*args))'
tp3819
a(g131
I289
g1826
S'h_t, c_t = self.lstm_as_activation_function(Wix, Wfx, Wcx, Wox, h_tm1, c_tm1)'
tp3820
a(g131
I709
g1828
S'c_t = f_t * c_tm1 + (1 - f_t) * T.tanh(Wcx + T.dot(h_tm1, self.W_hc) + self.b_c)'
tp3821
aasbsg32
Nsg34
g1
(g35
g3
NtRp3822
(dp3823
g38
(lp3824
g2044
asg16
g1
(g17
g3
NtRp3825
sg445
(lp3826
g3807
asg447
g1
(g1143
g3
NtRp3827
(dp3828
g1146
(tsg1147
(lp3829
sg1149
(lp3830
I0
asg1151
(lp3831
sg1153
I01
sg1154
(S'x'
tp3832
sg1156
(dp3833
I0
(lp3834
I0
assbsbsg402
g1
(g403
g3
NtRp3835
(dp3836
g406
(I01
tp3837
sg408
g2053
sg410
g2054
sg413
I00
sg32
Nsbsbag3673
asg16
g1
(g17
g3
NtRp3838
sg445
(lp3839
g3789
asg447
g2071
sbsg402
g1
(g403
g3
NtRp3840
(dp3841
g406
(I00
tp3842
sg408
g409
sg410
g412
sg413
I00
sg32
Nsbsbag1
(g10
g3
NtRp3843
(dp3844
g13
S'auto_2227'
p3845
sg15
I0
sg16
g1
(g17
g3
NtRp3846
(dp3847
g20
(lp3848
(lp3849
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp3850
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp3851
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp3852
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp3853
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp3854
a(g1823
I761
g1824
S'condition, outputs, updates = scan_utils.get_updates_and_outputs(fn(*args))'
tp3855
a(g131
I289
g1826
S'h_t, c_t = self.lstm_as_activation_function(Wix, Wfx, Wcx, Wox, h_tm1, c_tm1)'
tp3856
a(g131
I709
g1828
S'c_t = f_t * c_tm1 + (1 - f_t) * T.tanh(Wcx + T.dot(h_tm1, self.W_hc) + self.b_c)'
tp3857
aasbsg32
Nsg34
g1
(g35
g3
NtRp3858
(dp3859
g38
(lp3860
g1
(g10
g3
NtRp3861
(dp3862
g13
S'auto_2226'
p3863
sg15
I0
sg16
g1
(g17
g3
NtRp3864
(dp3865
g20
(lp3866
(lp3867
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp3868
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp3869
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp3870
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp3871
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp3872
a(g1823
I761
g1824
S'condition, outputs, updates = scan_utils.get_updates_and_outputs(fn(*args))'
tp3873
a(g131
I289
g1826
S'h_t, c_t = self.lstm_as_activation_function(Wix, Wfx, Wcx, Wox, h_tm1, c_tm1)'
tp3874
a(g131
I709
g1828
S'c_t = f_t * c_tm1 + (1 - f_t) * T.tanh(Wcx + T.dot(h_tm1, self.W_hc) + self.b_c)'
tp3875
aasbsg32
Nsg34
g1
(g35
g3
NtRp3876
(dp3877
g38
(lp3878
g1
(g10
g3
NtRp3879
(dp3880
g13
S'auto_2225'
p3881
sg15
I0
sg16
g1
(g17
g3
NtRp3882
(dp3883
g20
(lp3884
(lp3885
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp3886
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp3887
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp3888
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp3889
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp3890
a(g1823
I761
g1824
S'condition, outputs, updates = scan_utils.get_updates_and_outputs(fn(*args))'
tp3891
a(g131
I289
g1826
S'h_t, c_t = self.lstm_as_activation_function(Wix, Wfx, Wcx, Wox, h_tm1, c_tm1)'
tp3892
a(g131
I709
g1828
S'c_t = f_t * c_tm1 + (1 - f_t) * T.tanh(Wcx + T.dot(h_tm1, self.W_hc) + self.b_c)'
tp3893
aasbsg32
Nsg34
g1
(g35
g3
NtRp3894
(dp3895
g38
(lp3896
g3472
ag1
(g10
g3
NtRp3897
(dp3898
g13
S'auto_2224'
p3899
sg15
I0
sg16
g1
(g17
g3
NtRp3900
(dp3901
g20
(lp3902
(lp3903
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp3904
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp3905
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp3906
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp3907
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp3908
a(g1823
I761
g1824
S'condition, outputs, updates = scan_utils.get_updates_and_outputs(fn(*args))'
tp3909
a(g131
I289
g1826
S'h_t, c_t = self.lstm_as_activation_function(Wix, Wfx, Wcx, Wox, h_tm1, c_tm1)'
tp3910
a(g131
I709
g1828
S'c_t = f_t * c_tm1 + (1 - f_t) * T.tanh(Wcx + T.dot(h_tm1, self.W_hc) + self.b_c)'
tp3911
aasbsg32
Nsg34
g1
(g35
g3
NtRp3912
(dp3913
g38
(lp3914
g3502
ag3554
asg16
g1
(g17
g3
NtRp3915
sg445
(lp3916
g3897
asg447
g449
sbsg402
g1
(g403
g3
NtRp3917
(dp3918
g406
(I00
tp3919
sg408
S'float64'
p3920
sg410
g412
sg413
I00
sg32
Nsbsbasg16
g1
(g17
g3
NtRp3921
sg445
(lp3922
g3879
asg447
g1191
sbsg402
g1
(g403
g3
NtRp3923
(dp3924
g406
(I00
tp3925
sg408
g409
sg410
g412
sg413
I00
sg32
Nsbsbag3567
asg16
g1
(g17
g3
NtRp3926
sg445
(lp3927
g3861
asg447
g1191
sbsg402
g1
(g403
g3
NtRp3928
(dp3929
g406
(I00
tp3930
sg408
g409
sg410
g412
sg413
I00
sg32
Nsbsbasg16
g1
(g17
g3
NtRp3931
sg445
(lp3932
g3843
asg447
g2175
sbsg402
g1
(g403
g3
NtRp3933
(dp3934
g406
(I00
tp3935
sg408
g409
sg410
g412
sg413
I00
sg32
Nsbsbasg16
g1
(g17
g3
NtRp3936
sg445
(lp3937
g3771
asg447
g1974
sbsg402
g1
(g403
g3
NtRp3938
(dp3939
g406
(I00
tp3940
sg408
g409
sg410
g412
sg413
I00
sg32
Nsbsbasg16
g1
(g17
g3
NtRp3941
sg445
(lp3942
g3637
asg447
g1191
sbsg402
g1
(g403
g3
NtRp3943
(dp3944
g406
(I00
tp3945
sg408
g409
sg410
g412
sg413
I00
sg32
Nsbsbasg16
g1
(g17
g3
NtRp3946
sg445
(lp3947
g3619
asg447
g2175
sbsg402
g1
(g403
g3
NtRp3948
(dp3949
g406
(I00
tp3950
sg408
g409
sg410
g412
sg413
I00
sg32
Nsbsbag3637
asg2204
I5
sg2205
I00
sg628
g1168
((ltRp3951
sg2207
I0
sg2208
I2
sg2209
(lp3952
g464
(g465
S'\xff\xff\xff\xff\xff\xff\xff\xff'
tRp3953
ag464
(g465
S'\xff\xff\xff\xff\xff\xff\xff\xff'
tRp3954
asg2213
I2
sg2214
I7
sg2215
I00
sg2216
I-1
sg2217
I4
sg32
g2218
sg2219
g1
(g2220
g3
NtRp3955
(g1
(g2222
g3
NtRp3956
(dp3957
g2225
I01
sg2226
Nsg2227
Nsg2228
Nsg2229
Nsg2230
Nsg2231
Nsg2232
I00
sg2233
g3955
sg2234
g2235
sbg2237
tbsg2270
g1168
((lp3958
(lp3959
g1804
ag3615
aa(lp3960
g2217
aI4
aa(lp3961
g1808
aI0
aa(lp3962
g2276
aI0
aa(lp3963
g2278
a(lp3964
aa(lp3965
g2281
aI0
aa(lp3966
g2213
aI2
aa(lp3967
g2284
aI0
aa(lp3968
g2207
aI0
aa(lp3969
g2216
aI-1
aa(lp3970
g32
ag2218
aa(lp3971
g2233
aNaa(lp3972
g628
ag3951
aa(lp3973
g2291
aI00
aa(lp3974
g2215
aI00
aa(lp3975
g1616
aI00
aa(lp3976
g2232
aI00
aa(lp3977
g437
aI00
aa(lp3978
g2205
aI00
aatRp3979
sg2298
((t(g2299
(t(t(tS'NPY_ABI_VERSION=0x1000009'
S'md5:5951dbcd215530e16c8c014e8a22e751'
(g449
((g2995
((I-1
I4
tp3980
I00
tt(g3398
((I-1
I8
tp3981
I00
ttt(I1
(I00
ttt(g449
((g2995
(g3980
I00
tt(g3358
((I-1
I6
tp3982
I00
ttt(I1
(I00
ttt(g3827
((g2051
((S'dfbfa6b497a7e9cf3e97bf96db4ff1e7'
I2
I0
tI00
ttt(I1
(I00
ttt(g1191
((g3484
((I-1
I2
tp3983
I00
tt(g3917
((I0
I0
tI00
ttt(I1
(I00
ttt(g1191
((g3469
((I-1
I1
tp3984
I00
tt(g3747
((I1
I0
tI00
ttt(I1
(I00
ttt(g1191
((g3923
((I3
I0
tI00
tt(g3418
((I-1
I9
tp3985
I00
ttt(I1
(I00
ttt(g1191
((g3753
((I4
I0
tI00
tt(g3378
((I-1
I7
tp3986
I00
ttt(I1
(I00
ttt(g2175
((g3928
((I5
I0
tI00
ttt(I1
(I00
ttt(g1959
((g3758
((I6
I0
tI00
ttt(I1
(I00
ttt(g2071
((g3835
((I2
I0
tI00
tt(g3763
((I8
I0
tI00
ttt(I1
(I00
ttt(g1974
((g3763
((I8
I0
tI00
tt(g3229
((I-1
I5
tp3987
I00
ttt(I1
(I00
ttt(g1974
((g3840
((I9
I0
tI00
tt(g3933
((I7
I0
tI00
ttt(I1
(I00
ttt(g1191
((g3768
((I10
I0
tI00
tt(g3938
((I11
I0
tI00
ttt(I1
(I00
ttt(g2175
((g3943
((I12
I0
I1
tI00
ttt(I1
(I00
ttt(g3454
((I-1
I0
tI00
tt(g3469
(g3984
I00
tt(g3484
(g3983
I00
tt(g3499
((I-1
I3
tI00
tt(g2995
(g3980
I00
tt(g3229
(g3987
I00
tt(g3358
(g3982
I00
tt(g3378
(g3986
I00
tt(g3398
(g3981
I00
tt(g3418
(g3985
I00
ttttp3988
sg2281
I0
sg2309
(lp3989
I00
aI00
asg2311
(lp3990
I00
aI00
aI00
aI00
asg2313
I0
sg437
I00
sg2284
I0
sg2232
I00
sg2233
Nsg2314
(lp3991
g1
(g403
g3
NtRp3992
(dp3993
g406
(I00
I00
tp3994
sg408
g409
sg410
g412
sg413
I00
sg32
Nsbag3436
asg2291
I00
sg2276
I0
sg2319
I7
sg2278
g3964
sbsbsg402
g3992
sbag1
(g454
g3
NtRp3995
(dp3996
g13
S'auto_2313'
p3997
sg15
Nsg16
g1
(g17
g3
NtRp3998
sg32
Nsg402
g460
sg463
g464
(g465
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp3999
sbasg16
g1
(g17
g3
NtRp4000
sg445
(lp4001
g121
asg447
g1
(g469
g3
NtRp4002
(dp4003
g472
(g473
(g460
NNtRp4004
tp4005
sbsbsg402
g1
(g403
g3
NtRp4006
(dp4007
g406
(I00
I00
tp4008
sg408
g409
sg410
g412
sg413
I00
sg32
Nsbsbag1
(g414
g3
NtRp4009
(dp4010
g13
S'auto_2357'
p4011
sg15
Nsg16
g1
(g17
g3
NtRp4012
(dp4013
g20
(lp4014
(lp4015
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp4016
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp4017
a(g29
I115
g30
S'self.final_layer = LinearLayer(rng, self.rnn_layers[-1].output, input_size, self.n_out)'
tp4018
a(g102
I95
g30
S"W = theano.shared(value=numpy.asarray(W_value, dtype=theano.config.floatX), name='W', borrow=True)"
tp4019
aasbsg427
g1
(g428
g3
NtRp4020
(dp4021
g32
S'W'
sg432
(lp4022
g434
(g435
(I0
tS'b'
tRp4023
(I1
(I16
I4
tg412
I00
S"\x8c.\x945\xef\xeb\xd6\xbfx\xe9b\x1c\x82\xfdr\xbf\xa9\xe8\x9d.X\xa7\xdc?\xd7\xdej\xb0\xc1s\xd3?\xea\x8f\xec\xe6\xb6\xd5\xc7?c\xdd!M\xc9\xf1\xd3?|]$v\xff\xbc\xd1\xbf\xcaOq\xd0\x95\x0c\xd7\xbf\xca]8O-\xce\xd4?\x88 O\xa4\x01p\xc3\xbf\xc1\xf0sNN\xa6\xc9\xbf\x8f5]\xaf?{\xc3?\xd9).\x03\xd6\xb1\xaf\xbf\xdc\xcd,\xe8\xb14\x9f\xbf\x9eK\x96w\xac\xde\xb5?BK\x07\xa6\x9c]\xa6?k\xd3Ef\xe3\x06\xda\xbf\x9d-\xf6')\x03\xbe\xbf\xc7\xb8\xd7O\xc1.\xc7?\x8a\xa6\x92\xb2\xae\xf8\xc5\xbfdXbj\x8d\x9a\xb4\xbf\xcf,M\xd5\xfe\x94\xb2\xbf(va_\x08j\xe4\xbf\xf5\x94\xfe\x8fi\x02\x9a?\xd7\xdf\xe8\t\x85\x8d\xc3\xbf\xc6-\xfc\xfe}\xbe\xc2?\xda\x9cM\x81\x0c\x9d\xb0?\xa8\xe2k\x8d\xc1n\xc9\xbf\xf8\xab\x01\xcf2\xe6\xbd?\x12\xc1h\xc1\x1b\x12\xbf\xbf\xf6\t\xa5\xe2\x80\xff\xc5\xbf\xf0\xf1n\t\xdda\xd7\xbfA.\xd9d\xc9\x14\xbc?\x07\xddc*\xc9b\xa3\xbf\xf6D\x1fv\x99~\xc0\xbf.=\x82\x8fS\r\xd9\xbf\x07]\xe37#\x97\xd1?Q\xfc*\x85\x0f\x13\xb2\xbfq\x8c\x9f^\x86\xca\xb5?\xb1\x897\xed\x82\x8c\xb3?&e\x91\xd6j\xf7\xd5\xbf)!'E\xaf\xff\xc5?~\xc5\x7f\x8b\xb8P\xb0\xbf=*\xa9\x85\xc5\xec\xa9\xbf\xf4X\xdfa<\r\xdf\xbf$2y\x1d\xa7\xa0\xd3?\x14Y8\xe6\xadW\x9a?\xf7xL\x1d]\xa0\xab\xbf\x10\r?\xdft:\xc6\xbf_f\xbf\x99\x0e\xea\x8d\xbfO\xbcP\xc8km\xc4?\x00\xa0\xdd7\xb9\x00\x95\xbfCp\xf2\xc4\x81-\xbe?\tu_\xa6\x16\x81\xd1\xbf8\x19(\xdc2Q\xdd\xbf\xf5\xdb7Y\xd2\xf1\xc8\xbf\xb4\x02\xb5\xb0\x98\x01\xb7\xbf\x07+\xee\x9aJ\x9e\xd0\xbfSk\xf4*\xe8\x90\x92\xbf\xa2\x99\x9dBE3\xb1\xbfD(\x06\x8b6+\xde\xbf:9S\xf4P\xa5\xc7?\xee\xcc\xe8\xcc\xfb\x03\xad\xbf\xda\xdc$\xef:w\xd2\xbf"
tbasg437
I00
sg438
I00
sg402
g1
(g403
g3
NtRp4024
(dp4025
g406
(I00
I00
tp4026
sg408
S'float64'
p4027
sg410
g412
sg413
I00
sg32
Nsbsg443
Nsbsg32
S'W'
sg34
Nsg402
g4024
sbasg16
g1
(g17
g3
NtRp4028
sg445
(lp4029
g107
asg447
g449
sbsg402
g1
(g403
g3
NtRp4030
(dp4031
g406
(I00
I00
tp4032
sg408
S'float64'
p4033
sg410
g412
sg413
I00
sg32
Nsbsbag1
(g10
g3
NtRp4034
(dp4035
g13
S'auto_2365'
p4036
sg15
I0
sg16
g1
(g17
g3
NtRp4037
(dp4038
g20
(lp4039
(lp4040
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp4041
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp4042
a(g29
I115
g30
S'self.final_layer = LinearLayer(rng, self.rnn_layers[-1].output, input_size, self.n_out)'
tp4043
a(g102
I111
g30
S'self.output = T.dot(self.input, self.W) + self.b'
tp4044
aasbsg32
Nsg34
g1
(g35
g3
NtRp4045
(dp4046
g38
(lp4047
g1
(g414
g3
NtRp4048
(dp4049
g13
S'auto_2358'
p4050
sg15
Nsg16
g1
(g17
g3
NtRp4051
(dp4052
g20
(lp4053
(lp4054
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp4055
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp4056
a(g29
I115
g30
S'self.final_layer = LinearLayer(rng, self.rnn_layers[-1].output, input_size, self.n_out)'
tp4057
a(g102
I100
g30
S"name='b', borrow=True)"
tp4058
aasbsg427
g1
(g428
g3
NtRp4059
(dp4060
g32
S'b'
sg432
(lp4061
g434
(g435
(I0
tS'b'
tRp4062
(I1
(I4
tg412
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
tbasg437
I00
sg438
I00
sg402
g1
(g403
g3
NtRp4063
(dp4064
g406
(I00
tp4065
sg408
S'float64'
p4066
sg410
g412
sg413
I00
sg32
Nsbsg443
Nsbsg32
S'b'
sg34
Nsg402
g4063
sbasg16
g1
(g17
g3
NtRp4067
sg445
(lp4068
g4034
asg447
g1
(g1143
g3
NtRp4069
(dp4070
g1146
g4065
sg1147
(lp4071
I0
asg1149
(lp4072
I0
asg1151
(lp4073
sg1153
I01
sg1154
(S'x'
I0
tp4074
sg1156
(dp4075
I0
(lp4076
I0
assbsbsg402
g1
(g403
g3
NtRp4077
(dp4078
g406
(I01
I00
tp4079
sg408
g4066
sg410
g412
sg413
I00
sg32
Nsbsbasg16
g1
(g17
g3
NtRp4080
sg445
(lp4081
g92
asg447
g1191
sbsg402
g1
(g403
g3
NtRp4082
(dp4083
g406
(I00
I00
tp4084
sg408
g409
sg410
g412
sg413
I00
sg32
Nsbsbag1
(g10
g3
NtRp4085
(dp4086
g13
S'auto_1518'
p4087
sg15
Nsg16
g1
(g17
g3
NtRp4088
(dp4089
g20
(lp4090
(lp4091
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp4092
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp4093
a(g29
I53
g30
S"self.y = T.matrix('y')"
tp4094
aasbsg32
S'y'
sg34
Nsg402
g1
(g403
g3
NtRp4095
(dp4096
g406
(I00
I00
tp4097
sg408
g409
sg410
g412
sg413
I00
sg32
Nsbsbasg16
g1
(g17
g3
NtRp4098
sg445
(lp4099
g79
asg447
g2071
sbsg402
g1
(g403
g3
NtRp4100
(dp4101
g406
(I00
I00
tp4102
sg408
g409
sg410
g412
sg413
I00
sg32
Nsbsbag1
(g10
g3
NtRp4103
(dp4104
g13
S'auto_2389'
p4105
sg15
I0
sg16
g1
(g17
g3
NtRp4106
(dp4107
g20
(lp4108
(lp4109
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp4110
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp4111
a(g29
I129
g30
S'self.finetune_cost = T.mean(T.sum((self.final_layer.output - self.y) ** 2, axis=1))'
tp4112
aasbsg32
Nsg34
g1
(g35
g3
NtRp4113
(dp4114
g38
(lp4115
g1
(g2043
g3
NtRp4116
(dp4117
g13
S'auto_37'
p4118
sg15
Nsg16
g1
(g17
g3
NtRp4119
(dp4120
g2049
Nsbsg32
Nsg2050
I01
sg402
g1
(g403
g3
NtRp4121
(dp4122
g406
(tsg408
S'int16'
p4123
sg410
g2054
sg413
I00
sg32
Nsbsg463
g434
(g435
(I0
tS'b'
tRp4124
(I1
(tg2054
I00
S'\x02\x00'
tbsbasg16
g1
(g17
g3
NtRp4125
sg445
(lp4126
g4103
asg447
g1
(g1143
g3
NtRp4127
(dp4128
g1146
(tsg1147
(lp4129
sg1149
(lp4130
I0
aI1
asg1151
(lp4131
sg1153
I01
sg1154
(S'x'
S'x'
tp4132
sg1156
(dp4133
I0
(lp4134
I0
assbsbsg402
g1
(g403
g3
NtRp4135
(dp4136
g406
(I01
I01
tp4137
sg408
g4123
sg410
g2054
sg413
I00
sg32
Nsbsbasg16
g1
(g17
g3
NtRp4138
sg445
(lp4139
g66
asg447
g1
(g615
g3
NtRp4140
(dp4141
g618
g619
sg620
g1
(ctheano.scalar.basic
Pow
p4142
g3
NtRp4143
(dp4144
g624
g625
sg32
S'pow'
p4145
sbsg32
S'Elemwise{pow,no_inplace}'
p4146
sg628
(dp4147
sg630
(S'power'
I2
I1
tp4148
sg632
(dp4149
sg634
I00
sg635
S"elementwise power\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Parameters\n    ----------\n    scalar_op\n        An instance of a subclass of scalar.ScalarOp which works uniquely\n        on scalars.\n    inplace_pattern\n        A dictionary that maps the index of an output to the\n        index of an input so the output is calculated inplace using\n        the input's storage. (Just like destroymap, but without the lists.)\n    nfunc_spec\n        Either None or a tuple of three elements,\n        (nfunc_name, nin, nout) such that getattr(numpy, nfunc_name)\n        implements this operation, takes nin inputs and nout outputs.\n        Note that nin cannot always be inferred from the scalar op's\n        own nin field because that value is sometimes 0 (meaning a\n        variable number of inputs), whereas the numpy function may\n        not have varargs.\n\n    Note\n    ----\n    | Elemwise(add) represents + on tensors (x + y)\n    | Elemwise(add, {0 : 0}) represents the += operation (x += y)\n    | Elemwise(add, {0 : 1}) represents += on the second argument (y += x)\n    | Elemwise(mul)(rand(10, 5), rand(1, 5)) the second input is completed along the first dimension to match the first input\n    | Elemwise(true_div)(rand(10, 5), rand(10, 1)) same but along the second dimension\n    | Elemwise(int_div)(rand(1, 5), rand(10, 1)) the output has size (10, 5)\n    | Elemwise(log)(rand(3, 4, 5))\n\n    "
p4150
sbsbsg402
g1
(g403
g3
NtRp4151
(dp4152
g406
(I00
I00
tp4153
sg408
g409
sg410
g412
sg413
I00
sg32
Nsbsbasg16
g1
(g17
g3
NtRp4154
sg445
(lp4155
g53
asg447
g1
(ctheano.tensor.elemwise
Sum
p4156
g3
NtRp4157
(dp4158
g408
g409
sg620
g1194
sg1167
(I1
tp4159
sS'acc_dtype'
p4160
g409
sbsbsg402
g1
(g403
g3
NtRp4161
(dp4162
g406
(I00
tp4163
sg408
g409
sg410
g412
sg413
I00
sg32
Nsbsbasg16
g1
(g17
g3
NtRp4164
sg445
(lp4165
g40
asg447
g1
(g4156
g3
NtRp4166
(dp4167
g408
g409
sg620
g1194
sg1167
Nsg4160
g409
sbsbsg402
g1
(g403
g3
NtRp4168
(dp4169
g406
(tsg408
g409
sg410
g412
sg413
I00
sg32
Nsbsbag1
(g10
g3
NtRp4170
(dp4171
g13
S'auto_2398'
p4172
sg15
I0
sg16
g1
(g17
g3
NtRp4173
(dp4174
g20
(lp4175
(lp4176
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp4177
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp4178
a(g29
I129
g30
S'self.finetune_cost = T.mean(T.sum((self.final_layer.output - self.y) ** 2, axis=1))'
tp4179
aasbsg32
Nsg34
g1
(g35
g3
NtRp4180
(dp4181
g38
(lp4182
g1
(g10
g3
NtRp4183
(dp4184
g13
S'auto_2396'
p4185
sg15
I0
sg16
g1
(g17
g3
NtRp4186
(dp4187
g20
(lp4188
(lp4189
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp4190
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp4191
a(g29
I129
g30
S'self.finetune_cost = T.mean(T.sum((self.final_layer.output - self.y) ** 2, axis=1))'
tp4192
aasbsg32
Nsg34
g1
(g35
g3
NtRp4193
(dp4194
g38
(lp4195
g1
(g10
g3
NtRp4196
(dp4197
g13
S'auto_2393'
p4198
sg15
I0
sg16
g1
(g17
g3
NtRp4199
(dp4200
g20
(lp4201
(lp4202
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp4203
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp4204
a(g29
I129
g30
S'self.finetune_cost = T.mean(T.sum((self.final_layer.output - self.y) ** 2, axis=1))'
tp4205
aasbsg32
Nsg34
g1
(g35
g3
NtRp4206
(dp4207
g38
(lp4208
g53
asg16
g1
(g17
g3
NtRp4209
sg445
(lp4210
g4196
asg447
g482
sbsg402
g483
sbasg16
g1
(g17
g3
NtRp4211
sg445
(lp4212
g4183
asg447
g1
(g615
g3
NtRp4213
(dp4214
g618
S'tensor.basic'
p4215
sg32
Nsg620
g1
(ctheano.scalar.basic
Cast
p4216
g3
NtRp4217
(dp4218
g624
g1
(ctheano.scalar.basic
specific_out
p4219
g3
NtRp4220
(dp4221
S'spec'
p4222
(g1
(g459
g3
NtRp4223
(dp4224
g408
g409
sbtp4225
sbsS'o_type'
p4226
g4223
sg32
S'convert_to_float64'
p4227
sS'ctor'
p4228
cnumpy
float64
p4229
sbsg628
(dp4230
sg630
Nsg632
(dp4231
sS'__oplist_tags'
p4232
(lp4233
S'casting'
p4234
asg634
I00
sbsbsg402
g1
(g403
g3
NtRp4235
(dp4236
g406
(I00
tp4237
sg408
g409
sg410
g412
sg413
I00
sg32
Nsbsbag1
(g454
g3
NtRp4238
(dp4239
g13
S'auto_2397'
p4240
sg15
Nsg16
g1
(g17
g3
NtRp4241
sg32
Nsg402
g460
sg463
g464
(g465
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp4242
sbasg16
g1
(g17
g3
NtRp4243
sg445
(lp4244
g4170
asg447
g1
(g469
g3
NtRp4245
(dp4246
g472
(g460
tp4247
sbsbsg402
g1
(g403
g3
NtRp4248
(dp4249
g406
(tsg408
g409
sg410
g412
sg413
I00
sg32
Nsbsbasg16
g1
(g17
g3
NtRp4250
sg445
(lp4251
g11
asg447
g1
(g615
g3
NtRp4252
(dp4253
g618
g619
sg620
g1
(ctheano.scalar.basic
TrueDiv
p4254
g3
NtRp4255
(dp4256
g624
g625
sg32
S'true_div'
p4257
sbsg32
S'Elemwise{true_div,no_inplace}'
p4258
sg628
(dp4259
sg630
(S'true_divide'
p4260
I2
I1
tp4261
sg632
(dp4262
sg634
I00
sg635
S"elementwise [true] division (inverse of multiplication)\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Parameters\n    ----------\n    scalar_op\n        An instance of a subclass of scalar.ScalarOp which works uniquely\n        on scalars.\n    inplace_pattern\n        A dictionary that maps the index of an output to the\n        index of an input so the output is calculated inplace using\n        the input's storage. (Just like destroymap, but without the lists.)\n    nfunc_spec\n        Either None or a tuple of three elements,\n        (nfunc_name, nin, nout) such that getattr(numpy, nfunc_name)\n        implements this operation, takes nin inputs and nout outputs.\n        Note that nin cannot always be inferred from the scalar op's\n        own nin field because that value is sometimes 0 (meaning a\n        variable number of inputs), whereas the numpy function may\n        not have varargs.\n\n    Note\n    ----\n    | Elemwise(add) represents + on tensors (x + y)\n    | Elemwise(add, {0 : 0}) represents the += operation (x += y)\n    | Elemwise(add, {0 : 1}) represents += on the second argument (y += x)\n    | Elemwise(mul)(rand(10, 5), rand(1, 5)) the second input is completed along the first dimension to match the first input\n    | Elemwise(true_div)(rand(10, 5), rand(10, 1)) same but along the second dimension\n    | Elemwise(int_div)(rand(1, 5), rand(10, 1)) the output has size (10, 5)\n    | Elemwise(log)(rand(3, 4, 5))\n\n    "
p4263
sbsbsg402
g1
(g403
g3
NtRp4264
(dp4265
g406
(tsg408
g409
sg410
g412
sg413
I00
sg32
NsbsbsS'rnn_layers'
p4266
(lp4267
g1
(clayers.gating
SimplifiedLstm
p4268
g3
NtRp4269
(dp4270
S'w_cf'
p4271
g1
(g414
g3
NtRp4272
(dp4273
g13
S'auto_1524'
p4274
sg15
Nsg16
g1
(g17
g3
NtRp4275
(dp4276
g20
(lp4277
(lp4278
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp4279
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp4280
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp4281
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp4282
a(g131
I232
g30
S"self.w_cf = theano.shared(value=Wc_value, name='w_cf')"
tp4283
aasbsg427
g1
(g428
g3
NtRp4284
(dp4285
g32
g4271
sg432
(lp4286
g434
(g435
(I0
tS'b'
tRp4287
(I1
(I16
tg412
I00
S'\xed\xbf\xf6Bl+\xc5\xbf%\x82\x14\x9d2\xc0\xcd\xbf\xe7z\x1b\x11\xa4)\xc6\xbf\x88T1@3l\x8d\xbf\xa1ZE\x1f\xdf\x88\xd2\xbf\xc9\xee\xc5_\xb11\xa0?\xe7\xd6\xf8h\x97\xc2\xd5\xbf+\x9f\x00\xa7\x9b\xc4\xc8?\x10\x8b\x9bQ\xb3\xe9\xd0\xbf\xe0!<\xac\xd1\x1f\xd5?\x9ct\xe1\xdb\xff\x8bd\xbfi\x11\x80\xe7\x84\x0f\xcb\xbf\xd5\xf1\xb7p\xaf*\xcd?\x1f;\x83p\xf0\xfd\xd5\xbfk\xad\xc3\xcf\x8f\x81\xc1\xbf\x89\x15PJ\x81\xcc\xf3\xbe'
tbasg437
I00
sg438
I00
sg402
g1
(g403
g3
NtRp4288
(dp4289
g406
(I00
tp4290
sg408
S'float64'
p4291
sg410
g412
sg413
I00
sg32
Nsbsg443
Nsbsg32
g4271
sg34
Nsg402
g4288
sbsS'Wcx'
p4292
g684
sS'w_ci'
p4293
g1
(g414
g3
NtRp4294
(dp4295
g13
S'auto_1521'
p4296
sg15
Nsg16
g1
(g17
g3
NtRp4297
(dp4298
g20
(lp4299
(lp4300
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp4301
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp4302
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp4303
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp4304
a(g131
I222
g30
S"self.w_ci = theano.shared(value=Wc_value, name='w_ci')"
tp4305
aasbsg427
g1
(g428
g3
NtRp4306
(dp4307
g32
g4293
sg432
(lp4308
g434
(g435
(I0
tS'b'
tRp4309
(I1
(I16
tg412
I00
S'3~:\xd0V&\xb6\xbf\x96\x90\xfeb\xd8\x01\x9c?\x88\xc2\xfe\x84\x01\xb9\xc8\xbf\xc1Q\x85O\x8f\xd5\xc7?\xb3H\xa5;\xfd\x17\xb0?XPfw\xc9;\xc6\xbf\xc3AnF\xa1r\xcc?y1\x08j\xbc\x93\xd2?\xf3\x9biyfC\x99\xbf\x8c>\xa8}\x90\x84\xab\xbfF\x15\r\x12^a\xdc\xbf\xf1\xe3A\xb2\xaf\x14\xba\xbf\x02\x18B\xc5\x0b\xa8\xb2\xbf0h\xa5\xa8\x97h\xaf?\x1bC\xd1O\xff\x8e\xa5\xbf5\x06TSF<\xaf?'
tbasg437
I00
sg438
I00
sg402
g1
(g403
g3
NtRp4310
(dp4311
g406
(I00
tp4312
sg408
S'float64'
p4313
sg410
g412
sg413
I00
sg32
Nsbsg443
Nsbsg32
g4293
sg34
Nsg402
g4310
sbsS'w_co'
p4314
g1
(g414
g3
NtRp4315
(dp4316
g13
S'auto_1527'
p4317
sg15
Nsg16
g1
(g17
g3
NtRp4318
(dp4319
g20
(lp4320
(lp4321
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp4322
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp4323
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp4324
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp4325
a(g131
I242
g30
S"self.w_co = theano.shared(value=Wc_value, name='w_co')"
tp4326
aasbsg427
g1
(g428
g3
NtRp4327
(dp4328
g32
g4314
sg432
(lp4329
g434
(g435
(I0
tS'b'
tRp4330
(I1
(I16
tg412
I00
S'41\x84]\xf6\t\xc5\xbf3\x1b\x0b\xbd\xeaX\xc7?\xe9\xe9\x8d\xde_\xe2\xd1\xbf\x86C\xb2\xaf\x8bW\xc3\xbf\xea,/\xfc\xfd\xaf\xd6?\x19*\x088us\xc7\xbf\xd0\xb4\xe5\x15\x84S\xcb\xbf+Q>\x8bYm\xc2? Tb\xb3\x96F\xdf?\x18,\xbb<\x81\xad\xae\xbf\x00\x96j\xf2{\x99\xc8?`\xf0\x88CE\x88\xd5?+\xb4-\xbd\xd8\xd5\xb4?}w\x8c\xbbUF\xb1\xbf\xbd7`_\xde\n\xcc\xbfE\xe80\x02\xaa\xcd\xd6\xbf'
tbasg437
I00
sg438
I00
sg402
g1
(g403
g3
NtRp4331
(dp4332
g406
(I00
tp4333
sg408
S'float64'
p4334
sg410
g412
sg413
I00
sg32
Nsbsg443
Nsbsg32
g4314
sg34
Nsg402
g4331
sbsg1526
g1512
sS'n_h'
p4335
I16
sg1568
g1554
sS'W_ho'
p4336
g1
(g414
g3
NtRp4337
(dp4338
g13
S'auto_1526'
p4339
sg15
Nsg16
g1
(g17
g3
NtRp4340
(dp4341
g20
(lp4342
(lp4343
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp4344
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp4345
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp4346
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp4347
a(g131
I241
g30
S"self.W_ho = theano.shared(value=Wh_value, name='W_ho')"
tp4348
aasbsg427
g1
(g428
g3
NtRp4349
(dp4350
g32
g4336
sg432
(lp4351
g434
(g435
(I0
tS'b'
tRp4352
(I1
(I16
I16
tg412
I00
S'i\n\x8d\xa9\xbe\x9a\xd6\xbf\x87\xe8d\x07)+\xbf?>\xdb\x80\xe66\\\xcf\xbf\x87\x02\x1a\xa3\xe70\xd0?0\xb7i"\xf2\xa0\xa7\xbf\xa6af}\xac\xe3\xe1\xbf\xd8|\xf4%\xcd\xe9\xb6\xbf\xdf\xf2%Z<0\xad\xbf\xde\x82\xc1\xae\x06\x12\xbf?6\x8e\xacf\xd6t\xc5?\x90\n\xf8\xe1\x16\xfa\xb4\xbf(\xe5\xc0G\xb54\xd0?~~\xa9\x1a!V\xe9\xbf\x00\x1c\x87t\xff\xd8\xc6\xbf\xef\xc0Gz>\xcc\xd1\xbf\xb8P\x92\xba"\x11\xd4\xbf\x98i\xd6"\xea\xb5\xce?\x98\xefS\\\x90\x88\xca?\x0b"\\\xa6\x1b\xd3\xc8\xbf\xefN\rMR\xd9\xd2?\x02\xbb\xb5\xf8\xbb\xf9\x99?\x03\xa3\x84O\xdf\xfc\xba\xbf\xcaQ\xa2ml,\xc6\xbf!\xef\x91\x1b\x9a\xe7\xc8\xbf\xdey\xc7y\xf1A\xbe?\xba\x98\x9f\xa6\x11\xce\xc4?{\xa33-5\x87\xae?\xf4T\x90\x86\xd8f\xe0\xbf%\x8f\xe8K\x8a\xf7\xb2?y(\xfa\x88\xba\x17\xc2?I\xa1\xb8\xdf!j\xc5\xbfk\xba\x90f\xef$\x86?\xb5d\xd0Wx\xd2\xdd\xbfX\x1a\xf0\t\xf4\xad\xd3\xbfs\x9d9\x9eE\xc0\xb4\xbf#\xa8\\v\xf6\xd2\xb3\xbfP\xe9\x152\xea\x81\xb6?\xc1\xf9^y\xa5\xfd\xd2\xbf\xa2\x87/\xf6Q\xd6\xb5\xbf\xa0\x87\xc7J\x8dX\xbf\xbf\x01\xf5\xb58v\xe5\xc0?\xa3\xbf\x85W\x97\xbc\xd6?\xb9\xb2\xc9\xbe\xe3\x88\xdb?\xc9\t.\x97T\x18\xd9\xbf\xe1\xc9\x9f\xeeP\x95\x88\xbf\xb8{\xb5\x88\xeb\xcc\xd1\xbf\xe6\xe96\t \x93\x90\xbf\xaa\x18\xb3\x06\x1c\x11\xbb?=Q\xdah\x96\xdc\x94?\x1c!\xe3\xb6\x0f\x18\x89\xbf\\\xdc$I\x87\xba\xd7?\xf82DXX\x12\xc7?\x07s\xda\xb2+s\xb1\xbf\x12\xa0\xf2\xec\xdc\xcax?\xf11\xca\x13e\xde\xcb?%3\x1bag\x83\xc3?J1\xedfr4\xbb\xbf\xa0\xf7\x8f\teg\xdc\xbf\x8f\xb8Fj[\xf4\xd2\xbfe\x0b\xaa~r\xaf\xa2?\n\xeaZ.\x9d\x95\xdc\xbf\x11\x13\x89\xb4\xa9\x81\xa3\xbf\x07\xbe\x8c\x02G\x07\xbd\xbf*\xc5\xb0\x03\xe1\xf9\xcf?\x9eY\xc8\x1e\xb5\x16\xd5\xbf\xb8\xe9\xbc\x96\x86\xe8\xde\xbf\xe56R\xd7d\xdb\xba\xbf\xba\xd2\\\xc5\xfaO\xc4?\xe1f\xfc\xf6b\x1e\xd1?\x87\xd0\xaf\xf84\x19\xcd\xbf\x92\xe1\x1a\x1e\xcd\x18\xbe?\xeb\xaf\x0eKk\xc8\xd1\xbf\xa2\xf4^\x04e\xf6\xc7\xbf\x8a{5j\xbc)\xc2?\xa7\xac\xbb\xd8\x16\xfb\xc6?47LV\xed\xfa\xcf\xbfV"|\xef\xbbd\xbe?:\xe4g\x0f`\xe5\xdd\xbf\xa6sB!\xba\xf0\xa9\xbf;\xb0&B\xe1%\xd2\xbf\xae\xb8dI\xac\xd8\xc9\xbf&\x05\xea\x15\xd0j\xd4\xbf\xa6\xdd\xc5\xb3N\xb7\xc1?\x9b\x03\x13\xf4V\xb9\xc1?\xd4\xeaueP\x1e\xc6\xbf\x96j\xc8^\x8a\t\xb8?X\xc4\xc3\x83\xb0\xb8\xb0?V\xec\xfci\x1bq\xa0\xbf[N\xd3\xbc\xeeC\xe1?X\xaf\x10Fz\xe8\xca\xbf8\xe0;\xc6\xfcKm?\x18LOr\x07y\xb8\xbfP8\tg>\xcb\xb7\xbf\x12\xd4\x14\xd0\x9cg\xa4?_q\x19\x10a\xd7\xb2\xbf\x7faf\xb3\x9d\x88\xcb\xbfU>\x00\x91_\xcd\x9f?\xd9X\xbd\x96\xd4\xea\xd2?\xb7\xd48f$+\xce?t\x9a\xac\x9e\\\xfd\xa9?\x05+\x1b\xe6^\x88\xc7\xbf\xcdl\\\xd6\xec\xdc\xa7?\x9b\xaf\x91\xa4\xb2Z\xd1?\x03\xa7\xd0x\x1c\x0f\xd3?\xe7sh\xdf\x1c\x05\xb7?\x86\xaa\xb1\xdc\xa0Q\xb7\xbfw\x7f\xfeU\xcd\xf3\xa9\xbfM\xb9\x1d\xa9\x99\xb4\xc8?\x83_SV\x8c\xf6\xc5?A1\xe5\xa0\x89\x1f\xdc\xbf\xe6S\xab$e\x13\xc5?\x90~\xce\xc3\xdf\xc2\xc6?\x9f\x0evE\xdfc\xcc\xbf\n\xa0\x87\xad\xb9z\xc8\xbf\xca\xdb\xe33\xb0:\xc8\xbf\x80\xab0\x7f\xb6\xc4\xc5\xbf\x89\xeey\x9d\x01\xab\xd6\xbf&L\x84\xbb\xb2\t\xb4?tA1\x02\x9d$\xc9\xbfr\xda-\xd2\xac\x04\x92\xbf^.\xad\xbc*\xd8\xbf\xbf\x0f\xaeD\x19\xd4T\xb0?\x08Z\xeb\xc4|+\xd0\xbf\x94\xc0\x02\x16\xdbd\xaf?\xb6\x1b\x05\x13,\xf2\xb8? \xcb\xb8\xa3\xa7{\xca?\x813\xd0p\xfb{\xdf?"*Y\xda\x9f\xbc\xe0\xbf\xfa\xa5\xa4\xb1\x07\x80\xb4?\xf8\xa8\x87Ev\xb1\xc6\xbf\xb4\x8d\xb0R\n\xcd\xde\xbf\xf7@MX\xa3\xee\xca?\x92\x04Q\xd3\xb0P\xd5?\x82N3\xacm\x10\xb9\xbf%\xc6;!N\xff\xaa?^_oOUg\x90\xbfbl\x1d\x04\xe5\xc9\xbb?2\xbe\x92NY-\xcc?\xab=\xfe\x0bt\x13\xb6?\xda.\xbe2\x18!\xb6?7[S\x81\xe1\'\xd4?BP\x91\xd5\xa6\x13\xa5\xbfrh:\xb6\xbe\x89\xcd?e\x8bS\xd4\xd3M\xca\xbf\x98\xac\x80\xb4\x9e\xb6\xd9?\xc9\xccL\xffC\x9c\xc7?\xfd\xc4`:2\xd7\xb9\xbfF\x8a\x0c8\x98\xea\xe0\xbf_\x13\xa6\xea\xf7\\\x14\xbfOh\x8c\xfb\xb0\xe8\xd2\xbfx\x0bZ\x9d6-\xb3?\x1fr\xae\xcc\xfc7\xd7?\x14\x94\xbb\xdb\xd6|\xa4?#Of\n\x1e\xc9\xa6\xbf\xc1N\xab~\xb1\xe6\xb5?X\xd3\x98\xc2\x17H\xb2?\x8b\x8e5L%\xe7\xe2\xbf\x11\xb5\xca\xe7\x04\xd7\xae?\xfd1\xdf\xe5O\xd9\xc3?\xca\xd0q\xa7\r\x99\xb0\xbf\x1f(\xba [P\xcf?\xf1\xad.\xf5\xa3W\xa0\xbfk\xa0\x1d\xfd@\x8b\xc8?\xc9\x9e\xf9\xbaQ/\xe2?\x02\x10\xcb\xca\x16\xad\x98\xbfh\x0e\x92-\xf9\x12\xdf\xbf_\x93\xc0\x03\xb8\x8a\xb5\xbf\xf0\x10q\xd6>\x9d\xdb\xbf\xd5wT\xa1B\x8f\xc3?oS\xc7\x01\x1a\xf3\xd4?{\xe8\xa0l\xa5D\xc6?\x0b\xab\x98\x04\xee\x7f\xb4?J\xa7\x8d\xb6:\xa3\xc4\xbf\x16\x07\x0e\x82\xdc5\xd9?\xed\x89\xec\xb6\xd6\x1a\xc8?0\x1b\xb7\xcc\xbf4\xb2?v\xcdF\xe9\xdc8\xaa?j\x9a\xbdN\x9c\x93\x9c?\xd0\xa9\xe7\'\x1d\xf1\xbc?))\xfaQ`\xa0\xc3\xbffU\x8cylg\xd8?#\xb6<x\xde\x7f\xa3?\x14(\x13d\xa53\xc3?\x17.\x8d\xf7\x90\xbf\xbb\xbfl-\x17N\xaa\xfe\xb7?\x9ap\x84j\x07A\xe2\xbf\xac\x19b]\x8d\xe4\xd1\xbf\x97?3\x83b\x15\x80\xbfS\x86X\x90\xd9(\xd5\xbfu\xa0M\x85\xeb\x83\xe3?\xd9\xf3$\x08v\xb0\xda\xbf?\\1\xe5<#\xb6?\xeeB|\xfd\x0b~\xda?*m\n=h\xcd\xbe?\x8c\xd4\x05\xab\xc4\xda\xb3\xbf\xf7\xbb\xd7\x11*\xab\xc1\xbf(1D\x18O\x8b\xc5?\xf2\xcf`B\xd1\x9b\xc9\xbf\x0er\xf4E\xa4\x96\x9e\xbf\xd22\xd3\x89L\x1e\xc6?\xf0?\x91;J\xb4\xb3\xbfKI\xd5W\x0eg\x96?\x99;jZ&v\xb3\xbf,\xa3\xd9\xfb\x94\x08\xcf\xbfmw\x9e\xa8\xc2\x06\xd3?/s\x87\xd3\xffI\xd6?97*\xe2\xcfD\xb4\xbf\xd7\xcb\x07%3\xff\xb0\xbfI\x04s\xd1g\xc5\xa6\xbfBj\xe6\\\xe0=\xc1?G\xb8\x08C8\xf8\xcc\xbf\x1a\x7f7,\x98\xa9\x96\xbf\xd9\xdd\x887R\xd4\xb0?X\xb2H\xfa\x9b\x8b\xc4?^\xe8\xf8\x9c\'?\xe6\xbf6\xaf\x0c\xb2[\xd1\xb9?r\xad\xf7tZ"\xb6?=\x17\xbe\xa4\xa7\x1f\xd0?\xb4\xe7\xcd\xa1\'\xd7\xc0\xbf\x8f\t\rvY\x96\xc0\xbf\x84MJ\x08\x82=\xd3?f\xf16\x9b\xb0\x02\xd9\xbfsm;\xfb\xc0\x10\xda?\xf9IS\xcbxr\xe4?\xc7\x90\xce\x82\x91\x8e\xbe?\xba\x85\xf7=\x18\r\xca?qb\xcb\xa0S\xd5\xd7\xbf/s\x1fr\xd59\xc6\xbfkG<G\x01\xed\xd0?\x8d\xb1\x9e\x8e\xfb\'\xb7?\xdd\xea%\xde\x039\xa7\xbf\xfb\xb7\xd2\xdd\xa7\xce\xad?)\xe4\x7f\xbf&9\xc0?\x8d\x16\xb1x\x14\xc2\xb2\xbf\xdf\x8d\x1b|\x01\xa4}\xbfS\xe6\xbaV\xe1\x96\x82\xbf\xcf\xd96|"\xd6\xd0\xbfY\xb8\x0f>\xc6\xb5\xb4?\xad\xa1l\xe7|\xdb\xdc?\x8a\xf60\xec\x1d\xb6\xdb?\xebT8\xdeT\x9f\xd7\xbf;Ong\x9cB\xc2?\x90\x11\xea\x1a\xba\x9d\xc5?J\x93\x1f\xad\xcdE\xba\xbf\xa0\x89\xfc\x07\xba\xda\xce\xbf\\K\xb70\x0e"\xd5\xbfTb\xa4\xd6\x06v\xbc\xbf\x05\xde\xc1\xb8\x8cf\xb6?\xa6\x94\xe4\x13@;\xa4\xbf/ND\x8c\xc3\x8c\xc3\xbf\x00\xbd\xf3\xa9\x8b\xfc\xd3\xbf\x91\x01\xfd\x9a"r\xb6?Yy\x18\xd0\x8e\x10\xd1?~\x9fzDX\xa9\xcd\xbflD\xe6e\x0f\xb3\xbc?\xe9\xc9#\xa2T\x12\xde\xbf'
tbasg437
I00
sg438
I00
sg402
g1
(g403
g3
NtRp4353
(dp4354
g406
(I00
I00
tp4355
sg408
S'float64'
p4356
sg410
g412
sg413
I00
sg32
Nsbsg443
Nsbsg32
g4336
sg34
Nsg402
g4353
sbsS'W_hi'
p4357
g1
(g414
g3
NtRp4358
(dp4359
g13
S'auto_1520'
p4360
sg15
Nsg16
g1
(g17
g3
NtRp4361
(dp4362
g20
(lp4363
(lp4364
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp4365
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp4366
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp4367
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp4368
a(g131
I221
g30
S"self.W_hi = theano.shared(value=Wh_value, name='W_hi')"
tp4369
aasbsg427
g1
(g428
g3
NtRp4370
(dp4371
g32
g4357
sg432
(lp4372
g434
(g435
(I0
tS'b'
tRp4373
(I1
(I16
I16
tg412
I00
S'\xe6\x8a\xd3\xc4\xb4[\xbe?m\xd0j3\xaa\x0b\xc2\xbf\xbc\xb7\x7f\xb6\x0e\xea\xcf\xbf\xc4U\x8e\xce\xc6\x99\xd1\xbf{\x18{\xce\xbb4\xc8\xbf4\x17\xbaJ\x83\x96\xb4?\x0c\xb6\xac\x8a\xb2Y\xc8?\x93}\xb4\xae\xb6\xb3\xb4?\x83C$G\n\x91\xc1\xbf\x84j\xfb\xe9@\xe5\xdc?\xfbAH\nFM\xd8?)\xb5\xc2\x16\xf0\xa7\xb6\xbf\xc1\xa5\xe6\xd1\x8cY\xca\xbf\xd0\x80\xc74\xe2\xaa\xa0?~`\xac\xf1\xdaF\xd4?%\xe1\xa3y\x05L\xb5?\x8f\x08\xc7:?\xcf\xc1?j\x1a\xa7\x02q%\xab\xbf\x83\xa7@\xd7\x8a3\xbd?\xd8\x8e#>t\xb6\xd8?\xf8\xd2(uw\xad\xae\xbf,O1d\xe8W\xa2?\xc8\xdc}v\x87>\xb0?\xd4H\x05e\x8e(\xb2?p\xfeD\xca\x18\x97\xd6\xbf\x8b\xda}m\xa7\x07\xde\xbf0\xf5\xec\xd5\x81P\xd0\xbfT\xc3.\x15"\x7f\xa5?\xe3~\xf5\x900\xb9\xc1?O\x80\xe16I\xfb\xc0\xbf\xbeaq$?\t\xd6?\x7f\xe6\xa6\x1f\x97S\xa2\xbf\xbdb\x03\x90\xb7\xcdt?\xad\x8bP\xe0\xce\xd3\xa8\xbf\xbe=\xd19\xca\'\xa1?\x88\xb5\x9c6\r\x8b\xc6?\xb1\xb5Ip\x08M\xc5?o\x9e|w\xe1\xbf\xcc\xbf\xbb3\xa1D\xed`\xd8?\x1ctnv:\x85\xd1\xbf\xf0\x99z\xba8H\x94?\x00nZ\xa5\xb6\x8f\xb1\xbf\xd3\xbe=\x7f\xab\xc8\xd0\xbf\x03\x99\x9aT\x1a;\x93\xbfa\xf3\x16\x16\xbf\xb4\xc7\xbf\xef\x1c\x83\x91\x0c\xaa\x92?n}:\x0f)\xcc\xb9?\xa31\\\xcf\x05\x8d\xd7?\xac\xeb\x93\xdb.\xac\xb3?\xec\x0f\xe3q(\x8f\xc3\xbf\xd7h\xe0\x89L\x10\xb9\xbfD\x83\xf5u\xcd\xea\xa1?\x989\xff\x85\x0c\xed\x97?c#\xcaFzZ\xd7?G\xf1\xfa\x97]S\xd6?\x8fz$d\xce\xf8\xb6\xbf\xdd\x8f\xb8\xefy\x8e\xc1\xbf!vT\x0b\xd9t\xe4\xbfrl\xea\x8a\xc1\x90\xc1\xbf\xecr\xa7\xac?L\xcf\xbf\x8f\xa4\xd5\xa4q\xb5\xb6\xbfYs\xa1Z\xb7\x0f\xb9?\x01\x80\x81\xfd<\xae\xa6?\xee.\xc8\xe8\xee\xaf~\xbfz\xf3\xfe\x17\xe8\x8b\xa9?\x98X\xbc\x8f\xa0$\xa0\xbf\x9e\xc8\xfb\x97\xea7\xa9?G\xb94^3\xd9\xe9\xbf5U\xe0\xc2\x1a<\xb1\xbf\x92"\xa9}\xb6`\x9c\xbf\xcf\xfb\x9ea;\xd7\xb5\xbf\x08@\x02\xc2\xa9\xe5\xab\xbfC\xa0]8\x84\x81\xc6?\xc1\x81\xb5\xca\xad#\xc3\xbfG\x02\xc3\xb3\t\x9b\xe1?\xcb\xb6\xa7H\x87\x06\xc6?\xef\xa6q\xc6\xa1\xd5Y\xbf\xc8X\xc6\x0c\xe9s\xaa\xbf5\xecb\x16S&\x96\xbf\x86\x9ff\r2J\xcd\xbf\x88\xfb\x9b\x901_\x98\xbf\xd6\xb9\x91c\xf3\xd5\xb1?Y\xdb\xb1\xdb\x9a\x8b\xc2?\x14\x03h\x94\xd1\x8c\xc2?.\xf29\xfe\x97\x97\xb1\xbfzq0\xddE\xa8\xd6\xbf;\xe4*\xe9Ii\xc5\xbf\xa9|\x9b\xee\x8a\xcb\xd9?\xd8\xf2\xec{\x82\xac\xcc?m\xcc\xc8\xe8\xd8\xa7\xb7?\x8a\x16|\xbf\x85\\\xc8\xbf\\\xdc\xd6\xacq\xdcM?\xb2\x818\x0c8\x17\xd4\xbf\x12F\xd2\x85w\xa9\xc1\xbf\xa73\xb4\xb6\xd2b\xaf\xbf\x03{\x12\xd0\x1b%\xb7\xbf\xf1\xa1%\xa7{\x9c\xce?\xd2Q\xac\xf1\x19\xb3\xd6\xbfD\xf0\xe1\x04\x9f\xb1\xcb\xbf\xa2\xeb[\xd0\xb8\xfe\xd5\xbf\x91\x84\xe1\xe12\xcc\xd3\xbf\x0cD\x1d\x92 \xc2\x9f??\xb6J\x88g\x9b\xd9\xbf\xcf\xa8\xd2j\xb1\x1f\xc8?\xda\xa3\x0c\xcd\xa8\x97\xaf\xbf`\xa2\x8b\xb6\x1c\x9c\x91?\x94~\t\xe7\x18\xa5\xb4?\xca\xea__b\xc9\xbb\xbf+\x1bOs\t\x85\xd0?:]\xc1\xf38\xe0\xa8\xbf\xd6\xe6\xb8\x9f\x9f\x02\xc3?f\xe4\x15\xba\x83|\xa9\xbf)\xfbN\x9b\xaf\x9d\xb2?\x04d\x8fA\xfe\xe5\xb1?\xda\xe8x\xd5\x03\xff\xaf?5t\xcb\xa7\x87-\xcf\xbf\xfa\xae\xe7|c\xe5\xbb?l\xdb@\x93\xcai\xb4\xbf!(\xef;\xf5,\xc4?\x88\xd7\xa4{N8\xe1\xbf\x9a\n)\xb5\x1dq\xd7\xbf\x1e\xc3\xcf,\xb1B\xb7?\xce}\xcd\'\x8d\xce\xdd?M`\xf9\x1e\xcd\xb8\xca?\x1eopW\xa3\xd6\xc5\xbfv\xa8\xb2\x8d\xa5\x12\xdb\xbf\xf4\x86\xe2\xe4\x15\xc4\xc7?3\xe1G\x1f\x1a\xa1\x94\xbf\x8c\xe6.\x88\x0c\xe7\xc2?\xcez*\x917\x84\x9d?w\x1c\xcd\x07\xb7Z~?\x00\xccY\xd1C\xab\xe7?\'\xd9v\xe3\xba\x1bY\xbf"\xcb\xe4\xa2%b\xa4\xbf!\xb7\x00\xa9B\x17\x9f\xbf\x8d\xc9H1U\xac\xc2\xbf\xe1\xdf/.+\xaf\xcf?\xb9/\x9a7\xe9\xa3\xb6\xbf\xcb\xf1[\x84\xa4Y\xc4?;\x12Y\xa0\xef6\xb2?zR\xc2Q\xf7\x80\xd3?\xf5\xbb\xe0\xf68\xe4\xba?\xf7%\xfa(\x06j\xd3\xbf:\x9auAK9\xd5\xbf%\x88\xf1\x15\xae\x88\xd6?\xef\xc3\x17\x14\x8fz\xc3\xbfI[\xb3+0!\xd5\xbfJ|g\xfc\x83m\xc5\xbf(\x8e\x93\xb9\xe7;\xd4?6h\xfdC1\xb9\xd6\xbfg:I&T\xba\xcb\xbf\xdbC`\xb3|V\xc5\xbf\xc4u:\xac\xdf\x04\xd4\xbf<\xa9*9\x01\xf3\xd2\xbf\xf7\xdd\x98\x96+J\xd8\xbf\xa2\xf0/6\x18\x84\xbd\xbf\xa4\xa7X\x88\xd3\xb6\xb6\xbf\xb5iRAZ\xd7\xc5\xbfoO}\xdd\x8bu\xda\xbf\xf5\\j\xfe\xa9\r\xd4?=\x9b\x91)\xe8C\xd5\xbf\xb6\xb7\x14\xe9M\xcb\xb1?hv\x84t>2\xd1\xbfC\xa4\xc0\r\xdab\xc5?$\xda<\xbc-\x96\xce?\xd1\xe9\xa2\x16i\x15\xcc\xbfR\x99\x1d%\x8a\xc7\xde\xbf\xdb\xa2\x95\xc4\xe3C\xc6?\x84C\x1foG\x03\xde?n\xae}E\xbd\x9a\xba?\xb0\xc2\xe77\xb8\x8c\xa4?\xa5d\x1a\x9az;\xca?$\x83\xe6LT{\xc8?H\x168\x97\x13\x87\xca\xbf)\xd8Q}\xc4\x17\xc5\xbf\x1e\xc7\xa9\xf9R\x8e\xc3?\x7f\xc3\xce\x84\x07o\xa2\xbf\xccn\x7f\x07\xd1\x10\xd5?\x16\x99\xe3\x8a\xf8\x89\xc6\xbf\xe6\x1b\xa0\x16\xff\x04\xc8?eJ\x16\xdb\xc7\xed\xb5?\xb54\x8f(\x1b/\xa0\xbf9\xb3@\xd0\x87\xd0\xd2?\xfde\x13`%\xc3\xc5? I\x15pX\x14\xd0\xbf\xed \xd6\xe2\xab|\xc4?\xfe.)-\xf6\xff\xd5?\xdd\x1b\x90\\i\xb2\xa0\xbf]g\xaet\xf4\xd3\xaf\xbf\xca\xa2\xdf\xda\xbfm\xc5\xbf\xcf\xde\x97\xa0Z\xdck\xbf`\xe1"$[\xf5\xc5?6U\xb5\xb5V*\xca\xbf\xa4k\xc19\xae\x8a\xd5\xbf2\x1b\xc9ZI\x0c\xb8\xbf\xa0\x04\xcd\x7fZ\x13\xd6\xbf\xcf"\xbf\x994\xbe\xc0?\x15P\xea\x9b\xe2N\xbb\xbf\xce\xf0\x9a> \x16\xdc\xbfpE\xbc\xe4\x95O\xb6\xbfzAZ\x9c\x9b\xa7\xa8\xbf!T\xb6L\xa3\xbe\xbc?\xe6b\xf0\xc7E\x9b\xa2\xbf=\xc0\x94\xb6M\xe6\xdd?nj\xd5\xd18\x99\xc0\xbf\xf2.\xf5\xda\xb3\xf2\x8f\xbf\x81`\xab\x9aYX\x9a\xbfR\xc4\xfc\\\x95\x16\xb2\xbflC\xdff\x00;\xa2?"$!L\xc4Q\xc1?\xa4\x9d\x91V\x0bq\xd5?-O#P\xac\x1b\xd9\xbfc\xce\x17\x94\xbaT\xc0\xbf\xf9\'\xfezI\xa8\xbc\xbf\x00\xccv\xa0\xde\x02\xce?\xb0\x14\xc0M\x91\xd3\xb6\xbf\xcf?\x87\xa4\xa3R\xde\xbf\xa4{+\xf1\x80u\x96?|3d\x07\xb7?\x81\xbft@2l\x19\x02\xa7?\xc9\x1eE\xd5\x81\xa4\xd0\xbf\xe9)\x7f\x82*\x81\xdb?\x9b@\xf6b\x1e\xba\xb4\xbfI\xbd\x95\x88\x1c\x1a\xa8\xbf\x0bg\xae\xc5\xde\xcc\xcc\xbf}\xe0\xe4\xb6\xc4\xca\xcd\xbf;\xb4[\xa1T\x90\xd3\xbfZ\xf7cG\x01,\xb9\xbfW\x81\x16\xab\x82\xa4\xce\xbf\xcf\xd5>&\xa5s\xe0?\xe2\x1aH\xc9C7\xde\xbf\x02L8U\xa4\r\xd2\xbf\xe1b\x97$\xc6\xb0\xb9\xbf}Z\xb2\x94=\x8d\xc5?\xafm\x81$\xfez\xba\xbf#\xb6G\xfb}\xa1\xc5?D)\x02\xc0\xe5\x93\xcf\xbf\xf0\x81\nRh[\x8e?\x19xy\xa0\x97\xe7\xdb?MTM\x18\xc3\xf7\xce\xbf\x0f|\x9ba2\xda\xba?\xbad\xfb\xd7\x99|\xaa?\x17\xf1T\xc6$\x03\xe2\xbf\x15\xc3l\xc2\xd8\xd8\xc2\xbf\x98\x8e\x81\xbd2\x19\xd2?\x18\xec\xde\xa49J\xa1?\xca\x82\xd9#te\xd3\xbf\xa1\xc4\x7f\xf0\xd8\x1a\xc6?\x95\xda8I\xf3\xa9\xbe\xbf\x11\x86\x805\x12\x0b\xb7?x\xb5-\x8bu\x1f\xb8?\xb7\x96\xd1[-\xe6\xd1\xbf}\xbaTqEF\xc9?\xc2\xcb{\x8c\xc1\x1e\xd0\xbf\x0eCx\xb8\x7f\xe4\xd4\xbf\x0cC\xc7\x93"@\xcc\xbf'
tbasg437
I00
sg438
I00
sg402
g1
(g403
g3
NtRp4374
(dp4375
g406
(I00
I00
tp4376
sg408
S'float64'
p4377
sg410
g412
sg413
I00
sg32
Nsbsg443
Nsbsg32
g4357
sg34
Nsg402
g4374
sbsS'n_in'
p4378
I8
sS'Wox'
p4379
g803
sS'params'
p4380
(lp4381
g558
ag1512
ag699
ag1554
ag1533
ag1575
asS'input'
p4382
g392
sg1134
g1120
sg572
g558
sS'b_i'
p4383
g1
(g414
g3
NtRp4384
(dp4385
g13
S'auto_1530'
p4386
sg15
Nsg16
g1
(g17
g3
NtRp4387
(dp4388
g20
(lp4389
(lp4390
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp4391
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp4392
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp4393
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp4394
a(g131
I254
g30
S"self.b_i = theano.shared(value=np.zeros((n_h, ), dtype=config.floatX), name='b_i')"
tp4395
aasbsg427
g1
(g428
g3
NtRp4396
(dp4397
g32
g4383
sg432
(lp4398
g434
(g435
(I0
tS'b'
tRp4399
(I1
(I16
tg412
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
tbasg437
I00
sg438
I00
sg402
g1
(g403
g3
NtRp4400
(dp4401
g406
(I00
tp4402
sg408
S'float64'
p4403
sg410
g412
sg413
I00
sg32
Nsbsg443
Nsbsg32
g4383
sg34
Nsg402
g4400
sbsg713
g699
sS'b_o'
p4404
g1
(g414
g3
NtRp4405
(dp4406
g13
S'auto_1532'
p4407
sg15
Nsg16
g1
(g17
g3
NtRp4408
(dp4409
g20
(lp4410
(lp4411
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp4412
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp4413
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp4414
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp4415
a(g131
I256
g30
S"self.b_o = theano.shared(value=np.zeros((n_h, ), dtype=config.floatX), name='b_o')"
tp4416
aasbsg427
g1
(g428
g3
NtRp4417
(dp4418
g32
g4404
sg432
(lp4419
g434
(g435
(I0
tS'b'
tRp4420
(I1
(I16
tg412
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
tbasg437
I00
sg438
I00
sg402
g1
(g403
g3
NtRp4421
(dp4422
g406
(I00
tp4423
sg408
S'float64'
p4424
sg410
g412
sg413
I00
sg32
Nsbsg443
Nsbsg32
g4404
sg34
Nsg402
g4421
sbsg832
g818
sg1589
g1575
sS'L2_cost'
p4425
g1
(g10
g3
NtRp4426
(dp4427
g13
S'auto_1937'
p4428
sg15
I0
sg16
g1
(g17
g3
NtRp4429
(dp4430
g20
(lp4431
(lp4432
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp4433
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp4434
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp4435
a(g131
I699
g30
S'self.L2_cost = (self.W_xf ** 2).sum() + (self.W_hf ** 2).sum() + (self.W_xc ** 2).sum() + (self.W_hc ** 2).sum()'
tp4436
aasbsg32
Nsg34
g1
(g35
g3
NtRp4437
(dp4438
g38
(lp4439
g1
(g10
g3
NtRp4440
(dp4441
g13
S'auto_1926'
p4442
sg15
I0
sg16
g1
(g17
g3
NtRp4443
(dp4444
g20
(lp4445
(lp4446
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp4447
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp4448
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp4449
a(g131
I699
g30
S'self.L2_cost = (self.W_xf ** 2).sum() + (self.W_hf ** 2).sum() + (self.W_xc ** 2).sum() + (self.W_hc ** 2).sum()'
tp4450
aasbsg32
Nsg34
g1
(g35
g3
NtRp4451
(dp4452
g38
(lp4453
g1
(g10
g3
NtRp4454
(dp4455
g13
S'auto_1915'
p4456
sg15
I0
sg16
g1
(g17
g3
NtRp4457
(dp4458
g20
(lp4459
(lp4460
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp4461
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp4462
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp4463
a(g131
I699
g30
S'self.L2_cost = (self.W_xf ** 2).sum() + (self.W_hf ** 2).sum() + (self.W_xc ** 2).sum() + (self.W_hc ** 2).sum()'
tp4464
aasbsg32
Nsg34
g1
(g35
g3
NtRp4465
(dp4466
g38
(lp4467
g1
(g10
g3
NtRp4468
(dp4469
g13
S'auto_1904'
p4470
sg15
I0
sg16
g1
(g17
g3
NtRp4471
(dp4472
g20
(lp4473
(lp4474
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp4475
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp4476
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp4477
a(g131
I699
g30
S'self.L2_cost = (self.W_xf ** 2).sum() + (self.W_hf ** 2).sum() + (self.W_xc ** 2).sum() + (self.W_hc ** 2).sum()'
tp4478
aasbsg32
Nsg34
g1
(g35
g3
NtRp4479
(dp4480
g38
(lp4481
g1
(g10
g3
NtRp4482
(dp4483
g13
S'auto_1903'
p4484
sg15
I0
sg16
g1
(g17
g3
NtRp4485
(dp4486
g20
(lp4487
(lp4488
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp4489
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp4490
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp4491
a(g131
I699
g30
S'self.L2_cost = (self.W_xf ** 2).sum() + (self.W_hf ** 2).sum() + (self.W_xc ** 2).sum() + (self.W_hc ** 2).sum()'
tp4492
aasbsg32
Nsg34
g1
(g35
g3
NtRp4493
(dp4494
g38
(lp4495
g558
ag1
(g10
g3
NtRp4496
(dp4497
g13
S'auto_1902'
p4498
sg15
I0
sg16
g1
(g17
g3
NtRp4499
(dp4500
g20
(lp4501
(lp4502
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp4503
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp4504
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp4505
a(g131
I699
g30
S'self.L2_cost = (self.W_xf ** 2).sum() + (self.W_hf ** 2).sum() + (self.W_xc ** 2).sum() + (self.W_hc ** 2).sum()'
tp4506
aasbsg32
Nsg34
g1
(g35
g3
NtRp4507
(dp4508
g38
(lp4509
g4116
asg16
g1
(g17
g3
NtRp4510
sg445
(lp4511
g4496
asg447
g1
(g1143
g3
NtRp4512
(dp4513
g1146
(tsg1147
(lp4514
sg1149
(lp4515
I0
aI1
asg1151
(lp4516
sg1153
I01
sg1154
(S'x'
S'x'
tp4517
sg1156
(dp4518
I0
(lp4519
I0
assbsbsg402
g1
(g403
g3
NtRp4520
(dp4521
g406
(I01
I01
tp4522
sg408
g4123
sg410
g2054
sg413
I00
sg32
Nsbsbasg16
g1
(g17
g3
NtRp4523
sg445
(lp4524
g4482
asg447
g4140
sbsg402
g1
(g403
g3
NtRp4525
(dp4526
g406
(I00
I00
tp4527
sg408
g409
sg410
g412
sg413
I00
sg32
Nsbsbasg16
g1
(g17
g3
NtRp4528
sg445
(lp4529
g4468
asg447
g1
(g4156
g3
NtRp4530
(dp4531
g408
g409
sg620
g1194
sg1167
Nsg4160
g409
sbsbsg402
g1
(g403
g3
NtRp4532
(dp4533
g406
(tsg408
g409
sg410
g412
sg413
I00
sg32
Nsbsbag1
(g10
g3
NtRp4534
(dp4535
g13
S'auto_1911'
p4536
sg15
I0
sg16
g1
(g17
g3
NtRp4537
(dp4538
g20
(lp4539
(lp4540
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp4541
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp4542
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp4543
a(g131
I699
g30
S'self.L2_cost = (self.W_xf ** 2).sum() + (self.W_hf ** 2).sum() + (self.W_xc ** 2).sum() + (self.W_hc ** 2).sum()'
tp4544
aasbsg32
Nsg34
g1
(g35
g3
NtRp4545
(dp4546
g38
(lp4547
g1
(g10
g3
NtRp4548
(dp4549
g13
S'auto_1910'
p4550
sg15
I0
sg16
g1
(g17
g3
NtRp4551
(dp4552
g20
(lp4553
(lp4554
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp4555
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp4556
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp4557
a(g131
I699
g30
S'self.L2_cost = (self.W_xf ** 2).sum() + (self.W_hf ** 2).sum() + (self.W_xc ** 2).sum() + (self.W_hc ** 2).sum()'
tp4558
aasbsg32
Nsg34
g1
(g35
g3
NtRp4559
(dp4560
g38
(lp4561
g1512
ag1
(g10
g3
NtRp4562
(dp4563
g13
S'auto_1909'
p4564
sg15
I0
sg16
g1
(g17
g3
NtRp4565
(dp4566
g20
(lp4567
(lp4568
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp4569
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp4570
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp4571
a(g131
I699
g30
S'self.L2_cost = (self.W_xf ** 2).sum() + (self.W_hf ** 2).sum() + (self.W_xc ** 2).sum() + (self.W_hc ** 2).sum()'
tp4572
aasbsg32
Nsg34
g1
(g35
g3
NtRp4573
(dp4574
g38
(lp4575
g4116
asg16
g1
(g17
g3
NtRp4576
sg445
(lp4577
g4562
asg447
g1
(g1143
g3
NtRp4578
(dp4579
g1146
(tsg1147
(lp4580
sg1149
(lp4581
I0
aI1
asg1151
(lp4582
sg1153
I01
sg1154
(S'x'
S'x'
tp4583
sg1156
(dp4584
I0
(lp4585
I0
assbsbsg402
g1
(g403
g3
NtRp4586
(dp4587
g406
(I01
I01
tp4588
sg408
g4123
sg410
g2054
sg413
I00
sg32
Nsbsbasg16
g1
(g17
g3
NtRp4589
sg445
(lp4590
g4548
asg447
g4140
sbsg402
g1
(g403
g3
NtRp4591
(dp4592
g406
(I00
I00
tp4593
sg408
g409
sg410
g412
sg413
I00
sg32
Nsbsbasg16
g1
(g17
g3
NtRp4594
sg445
(lp4595
g4534
asg447
g1
(g4156
g3
NtRp4596
(dp4597
g408
g409
sg620
g1194
sg1167
Nsg4160
g409
sbsbsg402
g1
(g403
g3
NtRp4598
(dp4599
g406
(tsg408
g409
sg410
g412
sg413
I00
sg32
Nsbsbasg16
g1
(g17
g3
NtRp4600
sg445
(lp4601
g4454
asg447
g1191
sbsg402
g1
(g403
g3
NtRp4602
(dp4603
g406
(tsg408
g409
sg410
g412
sg413
I00
sg32
Nsbsbag1
(g10
g3
NtRp4604
(dp4605
g13
S'auto_1922'
p4606
sg15
I0
sg16
g1
(g17
g3
NtRp4607
(dp4608
g20
(lp4609
(lp4610
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp4611
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp4612
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp4613
a(g131
I699
g30
S'self.L2_cost = (self.W_xf ** 2).sum() + (self.W_hf ** 2).sum() + (self.W_xc ** 2).sum() + (self.W_hc ** 2).sum()'
tp4614
aasbsg32
Nsg34
g1
(g35
g3
NtRp4615
(dp4616
g38
(lp4617
g1
(g10
g3
NtRp4618
(dp4619
g13
S'auto_1921'
p4620
sg15
I0
sg16
g1
(g17
g3
NtRp4621
(dp4622
g20
(lp4623
(lp4624
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp4625
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp4626
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp4627
a(g131
I699
g30
S'self.L2_cost = (self.W_xf ** 2).sum() + (self.W_hf ** 2).sum() + (self.W_xc ** 2).sum() + (self.W_hc ** 2).sum()'
tp4628
aasbsg32
Nsg34
g1
(g35
g3
NtRp4629
(dp4630
g38
(lp4631
g699
ag1
(g10
g3
NtRp4632
(dp4633
g13
S'auto_1920'
p4634
sg15
I0
sg16
g1
(g17
g3
NtRp4635
(dp4636
g20
(lp4637
(lp4638
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp4639
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp4640
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp4641
a(g131
I699
g30
S'self.L2_cost = (self.W_xf ** 2).sum() + (self.W_hf ** 2).sum() + (self.W_xc ** 2).sum() + (self.W_hc ** 2).sum()'
tp4642
aasbsg32
Nsg34
g1
(g35
g3
NtRp4643
(dp4644
g38
(lp4645
g4116
asg16
g1
(g17
g3
NtRp4646
sg445
(lp4647
g4632
asg447
g1
(g1143
g3
NtRp4648
(dp4649
g1146
(tsg1147
(lp4650
sg1149
(lp4651
I0
aI1
asg1151
(lp4652
sg1153
I01
sg1154
(S'x'
S'x'
tp4653
sg1156
(dp4654
I0
(lp4655
I0
assbsbsg402
g1
(g403
g3
NtRp4656
(dp4657
g406
(I01
I01
tp4658
sg408
g4123
sg410
g2054
sg413
I00
sg32
Nsbsbasg16
g1
(g17
g3
NtRp4659
sg445
(lp4660
g4618
asg447
g4140
sbsg402
g1
(g403
g3
NtRp4661
(dp4662
g406
(I00
I00
tp4663
sg408
g409
sg410
g412
sg413
I00
sg32
Nsbsbasg16
g1
(g17
g3
NtRp4664
sg445
(lp4665
g4604
asg447
g1
(g4156
g3
NtRp4666
(dp4667
g408
g409
sg620
g1194
sg1167
Nsg4160
g409
sbsbsg402
g1
(g403
g3
NtRp4668
(dp4669
g406
(tsg408
g409
sg410
g412
sg413
I00
sg32
Nsbsbasg16
g1
(g17
g3
NtRp4670
sg445
(lp4671
g4440
asg447
g1191
sbsg402
g1
(g403
g3
NtRp4672
(dp4673
g406
(tsg408
g409
sg410
g412
sg413
I00
sg32
Nsbsbag1
(g10
g3
NtRp4674
(dp4675
g13
S'auto_1933'
p4676
sg15
I0
sg16
g1
(g17
g3
NtRp4677
(dp4678
g20
(lp4679
(lp4680
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp4681
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp4682
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp4683
a(g131
I699
g30
S'self.L2_cost = (self.W_xf ** 2).sum() + (self.W_hf ** 2).sum() + (self.W_xc ** 2).sum() + (self.W_hc ** 2).sum()'
tp4684
aasbsg32
Nsg34
g1
(g35
g3
NtRp4685
(dp4686
g38
(lp4687
g1
(g10
g3
NtRp4688
(dp4689
g13
S'auto_1932'
p4690
sg15
I0
sg16
g1
(g17
g3
NtRp4691
(dp4692
g20
(lp4693
(lp4694
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp4695
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp4696
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp4697
a(g131
I699
g30
S'self.L2_cost = (self.W_xf ** 2).sum() + (self.W_hf ** 2).sum() + (self.W_xc ** 2).sum() + (self.W_hc ** 2).sum()'
tp4698
aasbsg32
Nsg34
g1
(g35
g3
NtRp4699
(dp4700
g38
(lp4701
g1554
ag1
(g10
g3
NtRp4702
(dp4703
g13
S'auto_1931'
p4704
sg15
I0
sg16
g1
(g17
g3
NtRp4705
(dp4706
g20
(lp4707
(lp4708
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp4709
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp4710
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp4711
a(g131
I699
g30
S'self.L2_cost = (self.W_xf ** 2).sum() + (self.W_hf ** 2).sum() + (self.W_xc ** 2).sum() + (self.W_hc ** 2).sum()'
tp4712
aasbsg32
Nsg34
g1
(g35
g3
NtRp4713
(dp4714
g38
(lp4715
g4116
asg16
g1
(g17
g3
NtRp4716
sg445
(lp4717
g4702
asg447
g1
(g1143
g3
NtRp4718
(dp4719
g1146
(tsg1147
(lp4720
sg1149
(lp4721
I0
aI1
asg1151
(lp4722
sg1153
I01
sg1154
(S'x'
S'x'
tp4723
sg1156
(dp4724
I0
(lp4725
I0
assbsbsg402
g1
(g403
g3
NtRp4726
(dp4727
g406
(I01
I01
tp4728
sg408
g4123
sg410
g2054
sg413
I00
sg32
Nsbsbasg16
g1
(g17
g3
NtRp4729
sg445
(lp4730
g4688
asg447
g4140
sbsg402
g1
(g403
g3
NtRp4731
(dp4732
g406
(I00
I00
tp4733
sg408
g409
sg410
g412
sg413
I00
sg32
Nsbsbasg16
g1
(g17
g3
NtRp4734
sg445
(lp4735
g4674
asg447
g1
(g4156
g3
NtRp4736
(dp4737
g408
g409
sg620
g1194
sg1167
Nsg4160
g409
sbsbsg402
g1
(g403
g3
NtRp4738
(dp4739
g406
(tsg408
g409
sg410
g412
sg413
I00
sg32
Nsbsbasg16
g1
(g17
g3
NtRp4740
sg445
(lp4741
g4426
asg447
g1191
sbsg402
g1
(g403
g3
NtRp4742
(dp4743
g406
(tsg408
g409
sg410
g412
sg413
I00
sg32
Nsbsbsg1547
g1533
sg431
g415
sS'Wfx'
p4744
g543
sg1396
g1382
sS'c'
g1
(g10
g3
NtRp4745
(dp4746
g13
S'auto_1897'
p4747
sg15
I0
sg16
g1
(g17
g3
NtRp4748
(dp4749
g20
(lp4750
(lp4751
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp4752
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp4753
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp4754
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp4755
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp4756
aasbsg32
Nsg34
g1
(g35
g3
NtRp4757
(dp4758
g38
(lp4759
g1598
ag1
(g454
g3
NtRp4760
(dp4761
g13
S'auto_1896'
p4762
sg15
Nsg16
g1
(g17
g3
NtRp4763
sg32
Nsg402
g460
sg463
g464
(g465
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp4764
sbasg16
g1
(g17
g3
NtRp4765
sg445
(lp4766
g4745
asg447
g1
(g469
g3
NtRp4767
(dp4768
g472
(g473
(g460
NNtRp4769
tp4770
sbsbsg402
g1
(g403
g3
NtRp4771
(dp4772
g406
(I00
I00
tp4773
sg408
g409
sg410
g412
sg413
I00
sg32
NsbsbsS'h'
g257
sS'output'
p4774
g257
sS'Wix'
p4775
g377
sbag1
(g4268
g3
NtRp4776
(dp4777
g4271
g1
(g414
g3
NtRp4778
(dp4779
g13
S'auto_1943'
p4780
sg15
Nsg16
g1
(g17
g3
NtRp4781
(dp4782
g20
(lp4783
(lp4784
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp4785
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp4786
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp4787
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp4788
a(g131
I232
g30
S"self.w_cf = theano.shared(value=Wc_value, name='w_cf')"
tp4789
aasbsg427
g1
(g428
g3
NtRp4790
(dp4791
g32
g4271
sg432
(lp4792
g434
(g435
(I0
tS'b'
tRp4793
(I1
(I16
tg412
I00
S'\xaf.e\xe8F\xcc\xbc?\x83Hj_\x89\x1b\x92?b\x87m_\x85\xcf\xe2\xbfw\xd2\xd41P\xf3\x9f\xbf|\x8f\xa4\x9faw\xb0\xbf\x02`\xa2\xa7\xa2\x99\xd0?\x8e\x04\xdf\xce4\x9b\x9a\xbf\xee?\xac\xd6T\xa5\xc0\xbfw*Q\xba!\xaa\xc0\xbf[u\xdd\xa2\x8f!\xc7?Yq.\xb5*\x85\xc5?f\xe9\xf4\xe2uc\xab\xbf\xeb\xcb\xd2\xe6M\x87\xb9\xbf\xdb|\x14\xbblj\xe2\xbf\x1f\xd6\xf4\x05LU\xe0\xbf\xbc\xc6+\xb7\x01\xbc\xca\xbf'
tbasg437
I00
sg438
I00
sg402
g1
(g403
g3
NtRp4794
(dp4795
g406
(I00
tp4796
sg408
S'float64'
p4797
sg410
g412
sg413
I00
sg32
Nsbsg443
Nsbsg32
g4271
sg34
Nsg402
g4794
sbsg4292
g2551
sg4293
g1
(g414
g3
NtRp4798
(dp4799
g13
S'auto_1940'
p4800
sg15
Nsg16
g1
(g17
g3
NtRp4801
(dp4802
g20
(lp4803
(lp4804
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp4805
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp4806
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp4807
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp4808
a(g131
I222
g30
S"self.w_ci = theano.shared(value=Wc_value, name='w_ci')"
tp4809
aasbsg427
g1
(g428
g3
NtRp4810
(dp4811
g32
g4293
sg432
(lp4812
g434
(g435
(I0
tS'b'
tRp4813
(I1
(I16
tg412
I00
S'\x8b\xa0\xa0\x18\x8f\xf5\xc9?\xc0\xb5\x079\xbd\xd6\xca?X\xd3\xf2\x10\x90]\xc6?\xe7H:\xd8\x85\xab\xa2?\xc2\x81\x8eY\x80V\xb3?C\x88\xe8\xb7\xea\x91\x97?=\xbaKt\x8c\xe2\xbe?\xf9\xca7,\xa8 \xc1?\x98I\xcdt\xe8\x10\xa1?"\x98\x86P*q\xc0?\xb6Y\r\xca\r\xea\xc5\xbf\xf6\x18\x0e\x9f-\xa5\xb3\xbf\x08\x95\xaf\x12\xfa\x80\xad?\xad\xf1\x98\x8c\xb5\xc6\xde?-r\xed4~\xed\xc0?v\x9cf\n\x07?\xa1\xbf'
tbasg437
I00
sg438
I00
sg402
g1
(g403
g3
NtRp4814
(dp4815
g406
(I00
tp4816
sg408
S'float64'
p4817
sg410
g412
sg413
I00
sg32
Nsbsg443
Nsbsg32
g4293
sg34
Nsg402
g4814
sbsg4314
g1
(g414
g3
NtRp4818
(dp4819
g13
S'auto_1946'
p4820
sg15
Nsg16
g1
(g17
g3
NtRp4821
(dp4822
g20
(lp4823
(lp4824
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp4825
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp4826
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp4827
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp4828
a(g131
I242
g30
S"self.w_co = theano.shared(value=Wc_value, name='w_co')"
tp4829
aasbsg427
g1
(g428
g3
NtRp4830
(dp4831
g32
g4314
sg432
(lp4832
g434
(g435
(I0
tS'b'
tRp4833
(I1
(I16
tg412
I00
S'J\x89\xd3\xf5\xd6\xa2\xc4\xbf\x9bP\xff*\xc1[\xcc\xbf\x95\xef\xb9\xcd\xc3\x9b\x95?<V\x8a\xe6R\x88\xce\xbf\xeb\xc9\x9e\x8a\x84\x1e\xd1\xbf{\xbf\x95%W\xd8\xc4?\xe8U\xc7\xe8\xef\xc5\xcd\xbf\xd6\xf0\x85m`(\xc2?\x88I\xd5\x154\x9e\xb4\xbf\xe4q] \x96\x84\xc2\xbf\x05\x19\x91\xefu\x13\xcd?#SW1\x03\xc1\xcf?\xbe\xb9\x15U\xd5j\xab?\xa3\xb8\x820{\x8f\xd6?!\x1bj\xd1\xa4\xe7\xda\xbf\xb1\x16zt\x1cK\xd1?'
tbasg437
I00
sg438
I00
sg402
g1
(g403
g3
NtRp4834
(dp4835
g406
(I00
tp4836
sg408
S'float64'
p4837
sg410
g412
sg413
I00
sg32
Nsbsg443
Nsbsg32
g4314
sg34
Nsg402
g4834
sbsg1526
g3342
sg4335
I16
sg1568
g3382
sg4336
g1
(g414
g3
NtRp4838
(dp4839
g13
S'auto_1945'
p4840
sg15
Nsg16
g1
(g17
g3
NtRp4841
(dp4842
g20
(lp4843
(lp4844
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp4845
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp4846
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp4847
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp4848
a(g131
I241
g30
S"self.W_ho = theano.shared(value=Wh_value, name='W_ho')"
tp4849
aasbsg427
g1
(g428
g3
NtRp4850
(dp4851
g32
g4336
sg432
(lp4852
g434
(g435
(I0
tS'b'
tRp4853
(I1
(I16
I16
tg412
I00
S'1\xff2.\xc8\x0b\xbb\xbf\x89\xfe\x08Z5\xc2\xc9\xbf\nr\x05|\x96\xa0\xd0\xbf\xee]"|\x9ft\xa1\xbf\xce\xa1\x99\xf2I\xb1\x91\xbf\xbbZ\xf5\x96\xc2\x9c\xd0\xbf\x95\x8f\xf6\x11\x9cO\xd2\xbft\x1b\x1e\xe4y\xad\xb7?\xec\x0f\x01\x01{.\xbe?\xbb\x84g\xdfy2\xca\xbf! d\xdeC\x04\xa6\xbf\xd0W\xe8>\xab\xc8\xbf?\xd0\xfe\x99\x99\xcc\xbc\xa0?OCx*U\x00\xd9?\x06\x91\x9a\x03\xa4y\xd5\xbfl_\x89\xcb\x86\xe8\xd8\xbf\x82\xfa1rj!\xc7?\xa7\x13\x8esVh\xb6?\xde\x1b\xfe\x88\x93\x89\xc1\xbf\xf89\x9aqie\xd1?{s\xd4\xf1\xa9\xa3\xc4\xbf\x12\x08t\xd7Na\xc0?\xd8{I?\xf6\xf7\xa6\xbf\x92\xc6\x88\x92\x0e\xcd\xc8\xbf\xdd\xc5\xdcb\x03!\xbb\xbf@9c\x16\x91\xbe\xd2?H!\xd1\xb3C\xb8\xb8\xbf\xca\xe5\x1c\x84\xd2!\xd8?\xb9f\xf1=\x16\xe5\xa3?\x995\xa0U\xe5:\xb0\xbf\xf9\x93\t\xb9r\x11\xd0\xbf\xc1\xedc\xf9\xe5\xa5\xc5?\x0f\xf0\xe7\xdf\xe9b\xaa?\xca\xb1\x89j\xd5\t\x94\xbf\x9b\x0e7\xe9\x8e\x93\x99?y\xbf\xeb|K\x16\x9f\xbf\xe7\x8e\xe6\x9aT%\xd3\xbf8m\x07\xc4\x98\xf1\xc4?4\x11\xce\t\xe2\xb6\xdd?L\xfc\xba\xe7\x1d+\xdb?\xb9L\x93T\x8e\x04\x9b?\xf6\xbf)I\xaa9\xb0\xbf\x96\x92?m`\xab\x95?q\xfe%Lu\xe2\xc3\xbf\xea\xe8\xcf\x1fh\xfc\xb1?]k\x1c\xa8\x9d\xf7\xb7?<`\xb8\x9d\x1d?\xd3\xbf\n"&M\xe8\x0b\xb5\xbfk\x90s\xd3u\xf9\xcb?\xd0_\x0c\xd2\xa3\xd0\xcc?\xa6\xf0K\x00\x05"\xd4\xbf\x85\xd1]"\x9f\x88\xd1?\xfeY\xdf\xcf\xddH\xb2\xbf\xae\xc3\xad\xb2\xa4X{\xbfp\xd7\xe0\xd5\xa8\xdc\xa4\xbf{\xce\xeb_\xde\xe8\xe0\xbfl\x1f*\x11\xde\xf2\xba?\x04s!_\x04\xbd\xd9\xbf\x01A\x9f+\xfc\x8f\xca?\x9dp\xe4\x90d\xd5\xd4\xbf?d\x1e\xaex\xf6\xd0?\xc0\xee\x10\x9e\xf7\x93\xad?{\x843\xe8\xecw\xc3?\xd7\xed\x0f\xde\xb6\xf1\xc6\xbf7\x16w\x8e\x94\xf1\xdc\xbf\xa9\xc3\xf6\xbaHd\xcf\xbf]\xce\xec\x91\x89\x88\xb4?\xb5&m\xde\xce;\xbd?|`\x01d\xf9\x89\xcb\xbf\x1ei\x0e\xfc\xc94\xd5?[\xe4\x0bS\xb2~s\xbf\xb4\x15\x7f\xe2\xf7>\xda\xbf\xf8/54\xaf;\xb1?\x9f\x11\x80!g\xba\xc8\xbf\x1bO\xd8\xd8\x17O\xca?y\xf1\xf1\xb4F\xcb\xac?W6U\xa3@C\xa3?l~\x8d\x1c\x95|\xb2\xbf\xff\'\x83\x0b\xc3\xf8\xd1?\x13g\x99\xac\xc9\x15\xcd\xbf\xb3*\xda\xe7\xb4\x85\xb5?\xf5\x02E+:z\x85?\xa6\xc1\x13\xf8\xf5\x88\xd0\xbf\x95\x0b\xa3B%I\x93\xbfVK,GCG\xce\xbf\xf0\x1dr\x02\xceR\xe0?\xb0\xe7\xf6\'2A\xd0?\xca\xfe\x05\x10\xff#\xda\xbfq\xe8\xab\xe0\x9b\xd6\xbc\xbfP0<\x91\xc3\x81\xc3?1\'\x0f0\xa8\xc7\xd2?\xe3`\xa3\xb5\xe7\xe5\xcb?t\xc9mD\xbfy\xde?M\xd1\xf3\xc2=\x16\xa1?\x97\x87t\xafn\x82\xd4?\xc5\xe93n\x07\x8c\xd2\xbf[t\x1e\xc8&\xdb\xcb?\x95\xc8\xa4\xb7T\xd5\xaa\xbf\xe7\x92\xe8" \xc6\xa2\xbfRd\xff\xd4\xe6\x16\xd6?>\x10!\xf5\x16\xff\xce?\x8f\x939\x0eB\x85\xa5\xbf\xd7p\xdd\xa5\xf7j\xe4?\xd3\xf07\x9c*$\xd4?\x95`A\xb7\xf2E\xbc\xbf\xa2M\xaa\'\xfca\xe3\xbf*\xdf\'\xbb\xab\xc7\xb1?Bzj>\x0c\x07\xb9\xbf\x10\xf5\xeb\xca\x9a\x0c\xc4\xbf\x92\x9c\x84\x0f\x1c\xb8\xbf\xbf\x92\x88WJ\xcf\x99\xa3?\xac\xb5\x0e\xb4\xe1\t\xd5?v\xd4\xf8S\xc4^\xcf\xbfN\x17\x19Ir\x04\x92\xbf;\x1b(\x0c\xfb\xd2\xa9\xbf\xbd\xe0\xf0YZ\\\xca\xbfD@Q\t\xc0\x00\xb2?\x89\xc7uk\x91Z\xdc?\xd4^V5\xbc\xb7\xc3?\xc93yy\x864\x92?5\x04\xae\xdb\x01\x15\xbc\xbfj\x8f\x0f\xf0\x82\xf4\x87?\x80\xc6LP\x0e{\xdb\xbf\xbbH\xc6^\xa6\xcf\x8e\xbf3\x9f\xfb\xef\x0b\xbe\xa8\xbf"\xb7\x8b\xcc\xf2\x8c\xbe?:\x92y\x87&Z\xce?R\xa4\xbe\x16\xbd\xd9\xc7?\xe4\xd5\xd5\xb4Q\xe3\xa0\xbf\xe2 $\xe2\x9d\x8e\xc0\xbfCBI\xa3\x9a\x13\xc4\xbf\xf5\xa1+\x18\xbc\x03\xc9\xbf\x7f\x90~t\x9c\xae\xc3\xbf\x96z{\x80G\x85\x9f\xbf\xb7N4\x03\'\x86\xd3\xbf\xa8\x8e#t\xdb]\xbc?t\x91\xd7\xd0 \xc7\x9b\xbf&_\x17Kb\xb7\xca\xbf\xbag\xd49\xf1{\xc4\xbf\xf8\xbd\x1e\x05Z\xd8\xca?\x9c@\xcc\xde\xd2\xee\xcc?\xd9V\xf9\xe6\x19\x1c\xe3?\x02\xcef\xcd\xde%\xc2?X\x90\x07\xa5\x8e\x9e\xc5\xbf\xc1[[Q\xa0\x13\xc7\xbf8\'\x12\xa8\xde\xe7\xb8?\x00\xc7\xb3\x84\xc6\xc7\xc9?\xf7Zc;!\x86\xd6?,\xc6\xd0\xa8\xa8\xf9\xcb\xbf\x1a\xe1\x99\x96\xcc\xd9\x99?C\x81\x9e\x08\xe2\x95\xd2\xbfo\x84(\xf5\xddO\xb8?\xbb\x18s\xb5\xe06\xd0\xbfo3\xe6\xc3\xcdH\xd7?\x91\x1b\xd4\x1d\x81\xe5\xc8\xbf\x8d\xb3t\xe0\x05~\xc3?\xba\xd6\xc2\xd32X\xa3?\xe4d\xdb&\x9e!\x89?\xcfIf\xafM\xde\xdc\xbf\x98\x1d\x96>\x85R\x97\xbf\xe0[t\x15{X\xcf\xbfdQ\x05\x15R\xb8\xc2\xbfA\xbc[[4G\xbf?\\\n\x87FK\xbd\xe5?`\x9f\x937\r_\xde?5\x88^\xa3H\x88\xc0?\xc5\x87.jF\xaa\xb8?\xb0@h\x13\x10t\xb6\xbf\xb3}\xc1e=\x04\xd0\xbfh\xdf[\xbd\xb2Y\xbc?\x1ee\x13\xef\xd6q\xbc\xbf\x04\xeal@k\x19\xdc?-\xc8\xf8\xa9\xcb+\xe1?\xb2\xdc\xac\xed\x94\x1f\xe1?Ti*\xe4\xfcU\xc4\xbf\x83\x0b\xa7\xcd\x88;\xc0\xbf\x01 \x8c{\xec_\xd3\xbf\xc0\x1c\xf7Q\xad\xbf\xc4?\x18W\x84S\xd0Z\xcb\xbf\xc2\xacJ\x86\x1cR\xc3\xbf\x0c\xe6\xc5e\xf8f\xcc\xbf7\r\x89\\\x94\xd1\xc1\xbf\x0ce\xebG\xa9u\xda?\x83\x0c\x9d\xf1\xbb\xbb\xe3\xbf\xaf-\x82.\x1d\xd4\xc0?\x182\x8c\x88\x04\xce\xc9\xbfQ\xa7\x98\x99\xf2\xc0\xe2?\xa2i\xef\x80\xdb~\xca?u s\xd8\xcdL\xd0\xbf;\xcc\xb4*B\x8b\xc3\xbf}\x05\xb4\xaa\xdf<\xc2\xbf\xa5w\xb4[\x18i\xd2?\xd0U\xda\xd9\x89\x1c\xdb??^~\x12\xbd\xa9\xa3?c\xa1\xe1u\x11U\xa2\xbf\xb2\xd2\xdc\xf7-\xb3\xd0?O\xdb\xc4\x06\x97\x04|?\x1b\xbfJ_\xfd\xf2\xbd?\x14F\xa0\xe5\xb0S\xac?\xdc\x97\xdf\x8dj9\xc9\xbf\xbb\xc7`\xeb\xec\xcf\xd5?\xea\xc8\x11H\x83\xf0\xc2\xbf\xdb\x13\xf5\xc89\x01\xdf?\xf5\xcd\x0fr\x08\xe2\xd2?\xce\xf2\xc0\x810\xcb\xa8?kE\t\xd0\x8b\xe6\xd3\xbf\xa1m\xf4\x120\xd0\xda?\xf4Z\x92\xcd\'/\xb4?|\xcd\x9c\xe6\x1d\x98\xcc?~\xae}\xff\x86\xa1\xd7?\xbe\x95\x98\xf7\x87\xeb\xd1\xbf\xeb\xd92\xa0\xb8E\xb7?\xedUh\xe2\x8e\x1f\xb8\xbf\x01\xe4e\xf4\x80r\xb4?\xfbH\xdd\xa8\x90A\xbd?\\]\x1d\xa8\xff\x9d\xda\xbf!\x16\xe1Q\xb51\xad\xbfx\xc1\xfd]>\xf3\x96?F\xda\x0b\x03\x86\t\xd4\xbf\xb3\xdd\xfc\x91\xf7\x87\xc7\xbf\\g\xbc\x0f\x12\xe8\x9f?\xd7\xe0\x9b\x17\xb3\xf5\xc5?2\x18O\xe01\xc7\xa2\xbf\xf7&\xef\x85s\\\xc6\xbf\xd3JQ\xdc\x15\x11\xd0\xbf\xdb\x08\x1d?\x88\xdd\xb6\xbf\xfe\xe68\\\x98\x91\xc9\xbf*\xec\xec\xaa\xd3\x0c\xc3?D\x10\xc7Z#1\xb0?\xa30gj\xe5\xce\xc4\xbf\xb1M\xe9\x0f\xed/\xad?\xe0?6\r\xca\xa4\xe2?\xb0\xef\xc1\x80c\x13\xc8?\x92%\x13\x8bAL\xb0?,\xf5)\x1d\xb2\xf2\xc6?\x92\x01\xc0\xc9[:\xd4?\x7f;^\xcdsW\xd8\xbf?\xa1\xa8\xa2\x8aE\xbb\xbf\xcef\xd8\xa7>\xbf\xc3\xbfq\x82t{p\xa9\xc4\xbf\xb2\x00\xbf\xb3\n\xea\xe0?\x02\x90d\x05=T\xc0?3!0\xd6P\xda\xd1?\x8f\x97`\xcf\xb4!\xb3?\xee\xda\x7f\xb5\xdd\x05\xe6?\xfd)\xe21\x8f\x14\xe0\xbf\xa6\x13\xce\x1d)\x00\xbf\xbf\xef\x06\\\xa9#3\xbc\xbf\xc4K\xf5+\xa2R\xb6\xbf\x0c\x87\xe4\\\x99C\xcd?\xb8\x19\xbb)\xa3\x17\x97?\x1bo~+,\xd1\xc4?B\x9f\xa50K\xad\xd0?\x12zV\x8d+\xda\xac?1I:\xce\x19P\xc7?\xde\x8b\xa6W\xf6,\xbc\xbf'
tbasg437
I00
sg438
I00
sg402
g1
(g403
g3
NtRp4854
(dp4855
g406
(I00
I00
tp4856
sg408
S'float64'
p4857
sg410
g412
sg413
I00
sg32
Nsbsg443
Nsbsg32
g4336
sg34
Nsg402
g4854
sbsg4357
g1
(g414
g3
NtRp4858
(dp4859
g13
S'auto_1939'
p4860
sg15
Nsg16
g1
(g17
g3
NtRp4861
(dp4862
g20
(lp4863
(lp4864
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp4865
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp4866
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp4867
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp4868
a(g131
I221
g30
S"self.W_hi = theano.shared(value=Wh_value, name='W_hi')"
tp4869
aasbsg427
g1
(g428
g3
NtRp4870
(dp4871
g32
g4357
sg432
(lp4872
g434
(g435
(I0
tS'b'
tRp4873
(I1
(I16
I16
tg412
I00
S'P$\xc5\x15:=\xb8?\xe0\xb8\x0fw>W\xc4\xbfh\x85C\x9a(\x85\xda\xbf{\x1f\x80\x9d\x0fX\xd5\xbf\x9e4\x84\xa6~\xd7\xcb?\xaat2\xc6|\xd5\xcf\xbf\xedj\x95<[s\x9c?2\x04\x96\xac\xe45\xdc\xbfE\x93.\xa8mi\xb9?~\xc6\xfbQa\xb6\xde?\x17\xb1\xc0l\xc3?\xd5\xbf7\x8b1\xba\x1e\x97\xc1?\xb7u\x08-\x04p\xb1?\xbe,H\'N_\xcd?CL\xbb\x97{\xcc\xa0\xbf\xa0\x04\xed\xbe\xf6u\xb1?\xe6^\x8f\xa0\xedJ\xa7?\xa1J\xa7v\xbaT\xc2?H\x827\xe3\x02\xda\xca\xbfw\xab&8)\xa2\xa8?\xa7\xd8\x89\xf2/\xee\xc9?=E\x03\xe7\x16\xb0\xd2?I\xc4\xf6\xc5\x05\xba\xbf?,\xb7]t~\x1c\xd2\xbfr5\xfa\xc9t\xdb\xd8\xbfZ\xaf\x07\xd3\xeb&\xba?\nI1\\\xb1/\xd0\xbf\xef\xa2\x00\x02\xca\x04\xcb?J\xe4r\x1b\x0fk\xb2\xbf\xb8\xc2\x0f3\x94/\xd0?$\xe7\x7f%\xac\x01\xe1?\x17g~\xf7\xc1\xe8\x8f\xbf\x83%5\x8a3\xb2\x9d\xbf%\xd7\xf8aD7\xd0?\xd7\x81FG\xc1\x05\xd1?Oi\x8a|\xc99\xdb?\xbf\xd0,{1)\xa9?\xb1\x93\x195r@\xc4\xbf\x0c\xa4:\x1a[\x98_?\xd5\xf7\xa85\xc5\xf4\xc3\xbf\x96\xb0\xbe\x98\x15\xb2\xae?\xecJ\x0f\x99\x9e\xc8\xcb\xbf\xe6^\xd5\xa4<\xdd\xcc?\x0f\x97g\xdf\xd6Q\xc6?{\xcb\xb0\xe2\xd7\xcb\xa1?\xc6\rr\xff\xbc0z?\xd12\x8f\xa2\n%\xa9\xbf\x90\x19\xf2O\xff\xfe\xd4?\xca\x9bmy\xa9\xff\xd2?\x0f\x9bq\x92\xd9\xa6\xa2?\x8b]\xc9\x00\xadi\xcb\xbf\xebY4\xe7^\xd4\xd2\xbf\xbe\x8d\t\xb5`h\xb2?~\xd3@\xde\x00k\xc4\xbfM\x80:X\xb3u\xbe?\x02\xc9\xa0\xa3\x9e\xbf\xb8\xbf\x10\'\x82\x80\x98\xc2\xc8?\x87B\xdd-\x95\x8c\xaa?\x9e,\x98\xf9\x0c\xf0\xcf?\xa0\xbb\x87\xb7\t\xdf\xe1\xbfp\xeb.\x82\xfb\x0f\xad\xbf\xe8U\xb4j\xfb\xbb\xe1?eB\xd0Gy\x06\xe4\xbfv\x88d\xc8\x01\xf7\xca?CT\r\xc3\x92\xc0\xba?\x8e\xcd\xcdD;\x92\xd4?\x99xQ\x86A8\xa6\xbf\xb3\x16\xa6\x18\xb1\x0b\xd3?\tkq8rx\xd3?\xd5\tT\x0f\x170\xa9?\x12\n\\\xeb\xca\x9f\xd2\xbf\x93g\xdfHU7\xcd?\t\xecnWe&\xcf\xbf\x01\xc8\xe72\x8e\x95\xa1\xbf\xed\xb4\x9f\x84\x12M\xce?\x0fS\xc6\xfc\x1by\xd1?\x90\xf7\x90\xb6\xf5D\xb6\xbf\x8c\x03\xdc\x84>\x10\xc4?\xb2TX\xdf:\xae\xd8\xbfvA\x8d\x1a};\xbe\xbf@\x81\xa7\x19\xb1\x80\xd7?\x96a5w\x84~\xd5?\xd1\xf7\xad"3j\xc5?\x16\x0f\xff\xe6\xa1\'\xa2\xbf\xb14\xe6\xaa\xc1\x1c\xcb?[\x0b\x97\x94!\xc9w\xbf\r\xc7\xb7\xd7\x83\x88\xa5?\xd2-!%C\xa0\x96?8k\xfd\xf5\x0f\xd1\xc8\xbf\x1a\x18\x7f\xab\xc6:\xc7?\x90\xd6\xc9\x04\x81\x1e\xd1\xbf\x11zp\x96\xb8\xd3\xc8?\xb1\x05rdA\xbd\xce\xbf\xe0~ \x88>\x1b\xc7\xbf=\xd3\xb0-\x0e\xba\xe6\xbf\x84\xb4V\xe4\x8a\xfa\xa3\xbf\t\xed\n&X7\xa8?\xafT\xb0\xc3`w\xca?\xd7Dl\x1fY\xf9\xd4?Ef\t\t\xea\xd7\xd7\xbfp\xb8&\xef\xb4\x83\xcf?\xb1\xee\xdb\xb9\xbc\xb2\xbd\xbf\xb2\xf8%\xd5\x87r\x92\xbf\x87\xbc|\xf0\xdd\xf2\x9a\xbf\xe0\x89\x8f.\xd9\xc4\xbc\xbf\xe1&\xb5\xc0&z\xcc\xbf\xc4\xcc\x15\xc9\xaf\xde\xb1?9\x8a\xe3s\xe6\xf4\xc9?g\xae+b\x06(\xd4\xbf\xf6\x1c\xfa\x08\xff\xecs\xbf\x1f4\xd5N\xde \xc4\xbf\xb4G+F\xe5\x88\xd1?p\x85\x06\xab\xce\x96\xbf?\xc9<\\\xf9\xa7#\xd8?g\x9df\xcf\xbd\xc7\xd8\xbf\x16\xf8\x02\xbc\x11\x8c\xd0?<\x92\x1e]8\xd2\xa4?\xa6\x8aY\xf3\x9e4\xc7\xbf\xe2\x1b{+\x1cO\xbf?\x81\xdf\xb3\xe7x\x0e\xd9?\xaa\xb7B\xdc\x7f\xac\xd9?\xaf\xa7.\x8d\x9cO\xca? \'\x05\xc09\xbb\xcf\xbf\xd59\xab\x85\xcd\xd4\xb3?H=ka@\xea\xb5?\xee{u\xd2L\xdf\xd3?]\x00\xe8>\xa1\x1a\xa5\xbfYNYV\x19\xe4o?\xbbM\xf9\x0f\x8b\xe9\xc4\xbf\xc6D \xa9\xf8`\xc5?\x9e\xc9\x10\'\x92\x92\xab\xbf\xff\x11;z%\xce\xa7?y\rK\x7f\x1b\r\xbe\xbfL\xe1\x1ch\xca/\x88?\xd5\xc9\xa8%_I\xd1\xbf\xde\xe2\xe5&\x04\x98\xa4?\xf7\x00.\xd6KH\xc3\xbfK\xb4\xcdF\xe6`\xc6?\xf8\xc3\xd5P+\x8f\xdd?W%#\r\xfc\x0f\xcb?\x05\x83\xaf\xde3\xeb\xd1\xbf\xa0\x08\x16\xa7\xb7\xfe\xb6\xbfV\x10\xed\xa1O\xc1\xd9\xbf\xef\xf1>\xe0\x9e\xcak?\x0c\x95\x86;8c\xdc\xbf\xf7\x83\xe2h\xd78\xd3\xbfYbh\x8fD\x8a\xd1?4\xedO)\x9d\x8d\xcb?\xb3\x985zlS\xd8\xbf\xaej\xa8\x11\xdc\xa2\xbc\xbf\'\xd7\x80r\xc6\xa9\xbd?^\x9c\xc3\n\x9c\x1e\xb9?\xd1$\x92x\xe0\x08\xda\xbf\x14_b\xa6\xff\xa3\xb0?\t\xbbE\\\x87s\xc3\xbf\xda\x1e\xa8e\xbe-\xd3?\x9d\xafm\xa4}\x9f\xa9\xbf\xc6\xe0\xd4\xdf\x90\xfe\xb6?Qus\x00T\xef\x9b\xbf\xa3W5U\x83S\xc5?\x94k\x89R\x06\x94\xc8\xbf\xf2\xe4\xc2\xbbTb\xc5?\x92/\xe0e\xe9W\xd3?\xe7X\x89\xd7t^\xdd?<\xe3l\xc63W\xd9?\xff\xfd\xca\xf9\xe8\'\xc1\xbf\x0b-f\xb2\x02x\xc2?4_jr\x04\xd7\xc9?\xd6\xc0\x9c\xbf\xa5\xe1\xc2?Uz\xf5\xdf~\x1c\xc8?\xc1\xb7\xeed\xe4!\xbb?\xa8\x91\nx\xbbr\xc1\xbf\x95\xf0\xd1>\x99\x82\xaa?\r\xa9\x98l\xe0\x18\xcb?\xe7U\xe5X\xf1\x8a\xbd? k\x19\xf9\xa9\x8a\xd1\xbf\xdah\xa0\xecr\x15\xcc\xbf\xcfl\x04\xc0\x031\xba\xbf]\xc6t-T7\xaa\xbf\x9d\xf4Cv\x87!\xa4?\x87`\x19\xb1[D\xcf\xbf\x8b\x07\xa87Gp\xc9?wKo^\x95\xb8\xdd\xbfw\xe8{\xcc\x1f\xeb\xc0?H\xae>\x97\x855\xc0?\xb4\xcc\xdc\xc7t\x9c\xc4?\xe4.\xe5\xcf0\x89\xe8\xbfF\xca\xed\xe3\xa1\x96\xd5\xbf\x9cS\x0cQ\x92\x92\xb6\xbfX$p\x0cD\x8a\xa5?\x9a\xc5!"\x11\xd6\x94\xbf\xc0\\CO6\n\xca\xbf\x8c\x13\xa8!Y\x87\xd4?*?\xeb9\xe6\xbc\xb4?\xd3\xf6\x91"\xaaC\xb9\xbfE\x87(\x9c/\x9a\xcf\xbf\x89\xe2X\x19mv\x91?&\xf3\xc8\x12\xa3#\xd4?"\x9b\x87 \x17\x03\x82?\xd4\xc1\xc8j\x85h\x80\xbf7\xe0L\r\xe2\xf7\x90?\xa4\xf6\x16w\xae\xe0\x9e?\xa1\xeb\xf5\xc3\x0e\xd9\xad\xbf\xb9\x0e\xec\xd1\xa0!\xcf\xbf\x06cL\xb5\xd7v\xd8?v\xb8\xc4\xe2Vf\xc4?|\xdcY\xa2\xe3\xef\xe0?\x7f\x96\xab\xe0\xf4\xd7\xbf?*z\x96r\xf9\x9a\xad\xbf\x8c\xbepIKD\xce\xbf\x91\xa8S\x96\xa6\x1e\xb5\xbf\xeb\xa6\xfeNtr\xd2\xbf\xcc\x95@\xb1`\xc8\xe0?\x86\x19&\xad\xc2pq\xbf\x99\xf1\x120`\'\xc9?\xe6a\x90}r\xc8\xce?A\xf8z\xaamK\xd1?\x12u\x99\x8d\tb\xe4?p\xd8E\xff\xe9l\x98\xbf;\xdc\r\x91AG\xa7\xbfl>p\xb1\xb0\r\xa5?\x12\x1f7]\r\xf4\xc7?0[B\xf3q\xe5\xa6?\x90\xe1/\xf2\xdb4\xb1\xbf\xff\x0cl\x8a\xf5\xe8\xc6\xbf\t\x11\xa4\x91x\xc7\xc8\xbf]\xb0\x8cZ\n?\xb1?\x9c\x05\x05\x85\xcf\xf6\xcf\xbf\x93l\xcb\x0bG\x06\xdd\xbf\xe9&\x7f{V\x80\x9d?\xbc\x9d\x19\xd4!\x9a\xd2?\x98\x8e\xa3(\x8e-\xc5?z\xd3.\xa90Qr\xbf$\xe9\x942\xc8\xca\xb9?\x80#\xcf\xfe\x95Z\xda\xbf\xc7I\x0b@\x88\x11\xc6\xbf\xb8\x96-\x93^\xd9\xda?\xee\x14\xf8\x7f&\xf2\xd2?\x1a\x85\xda\x0c4\xc5\xc6\xbf\xf3\xc6\r\xbb\xa9\x11\xdc?\xd9\xef\xcdQ\xf6\xf8\xc6\xbf\x13\x04r\xd4\x96W\xca\xbf~\x17\xcaL\x1e\x93\xd8?7\xf7\x8e\xd5\x80\xec\xd4?m\xc7\xed\xbcz\xd5\xc2\xbf!\xe2_\xa0+"\x89\xbf\xa2?c\x99i\xde\xb5\xbf\xa8q\xda-\xe7!\xc0?\x8aM]\x8c\t\x14\xd9?8\xbc{\xf6h\x07\xc1?\x9d\x0e\xa5\xea\xd6(\x9d\xbf\xe4\xe6\xe4\xe0q\x8a\xd5\xbf\xa6\xa8"\xf0\x12\xe5\xc8?\xd8\x90\x97\x071\x91\xd3\xbfc,\x98\xf4\xf9\xf3\xa7\xbf\xd3\xdf\x03\xcc\xdd\xa9\xce?'
tbasg437
I00
sg438
I00
sg402
g1
(g403
g3
NtRp4874
(dp4875
g406
(I00
I00
tp4876
sg408
S'float64'
p4877
sg410
g412
sg413
I00
sg32
Nsbsg443
Nsbsg32
g4357
sg34
Nsg402
g4874
sbsg4378
I16
sg4379
g2669
sg4380
(lp4878
g2448
ag3342
ag2566
ag3382
ag3362
ag3402
asg4382
g257
sg1134
g2979
sg572
g2448
sg4383
g1
(g414
g3
NtRp4879
(dp4880
g13
S'auto_1949'
p4881
sg15
Nsg16
g1
(g17
g3
NtRp4882
(dp4883
g20
(lp4884
(lp4885
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp4886
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp4887
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp4888
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp4889
a(g131
I254
g30
S"self.b_i = theano.shared(value=np.zeros((n_h, ), dtype=config.floatX), name='b_i')"
tp4890
aasbsg427
g1
(g428
g3
NtRp4891
(dp4892
g32
g4383
sg432
(lp4893
g434
(g435
(I0
tS'b'
tRp4894
(I1
(I16
tg412
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
tbasg437
I00
sg438
I00
sg402
g1
(g403
g3
NtRp4895
(dp4896
g406
(I00
tp4897
sg408
S'float64'
p4898
sg410
g412
sg413
I00
sg32
Nsbsg443
Nsbsg32
g4383
sg34
Nsg402
g4895
sbsg713
g2566
sg4404
g1
(g414
g3
NtRp4899
(dp4900
g13
S'auto_1951'
p4901
sg15
Nsg16
g1
(g17
g3
NtRp4902
(dp4903
g20
(lp4904
(lp4905
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp4906
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp4907
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp4908
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp4909
a(g131
I256
g30
S"self.b_o = theano.shared(value=np.zeros((n_h, ), dtype=config.floatX), name='b_o')"
tp4910
aasbsg427
g1
(g428
g3
NtRp4911
(dp4912
g32
g4404
sg432
(lp4913
g434
(g435
(I0
tS'b'
tRp4914
(I1
(I16
tg412
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
tbasg437
I00
sg438
I00
sg402
g1
(g403
g3
NtRp4915
(dp4916
g406
(I00
tp4917
sg408
S'float64'
p4918
sg410
g412
sg413
I00
sg32
Nsbsg443
Nsbsg32
g4404
sg34
Nsg402
g4915
sbsg832
g2684
sg1589
g3402
sg4425
g1
(g10
g3
NtRp4919
(dp4920
g13
S'auto_2356'
p4921
sg15
I0
sg16
g1
(g17
g3
NtRp4922
(dp4923
g20
(lp4924
(lp4925
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp4926
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp4927
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp4928
a(g131
I699
g30
S'self.L2_cost = (self.W_xf ** 2).sum() + (self.W_hf ** 2).sum() + (self.W_xc ** 2).sum() + (self.W_hc ** 2).sum()'
tp4929
aasbsg32
Nsg34
g1
(g35
g3
NtRp4930
(dp4931
g38
(lp4932
g1
(g10
g3
NtRp4933
(dp4934
g13
S'auto_2345'
p4935
sg15
I0
sg16
g1
(g17
g3
NtRp4936
(dp4937
g20
(lp4938
(lp4939
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp4940
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp4941
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp4942
a(g131
I699
g30
S'self.L2_cost = (self.W_xf ** 2).sum() + (self.W_hf ** 2).sum() + (self.W_xc ** 2).sum() + (self.W_hc ** 2).sum()'
tp4943
aasbsg32
Nsg34
g1
(g35
g3
NtRp4944
(dp4945
g38
(lp4946
g1
(g10
g3
NtRp4947
(dp4948
g13
S'auto_2334'
p4949
sg15
I0
sg16
g1
(g17
g3
NtRp4950
(dp4951
g20
(lp4952
(lp4953
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp4954
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp4955
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp4956
a(g131
I699
g30
S'self.L2_cost = (self.W_xf ** 2).sum() + (self.W_hf ** 2).sum() + (self.W_xc ** 2).sum() + (self.W_hc ** 2).sum()'
tp4957
aasbsg32
Nsg34
g1
(g35
g3
NtRp4958
(dp4959
g38
(lp4960
g1
(g10
g3
NtRp4961
(dp4962
g13
S'auto_2323'
p4963
sg15
I0
sg16
g1
(g17
g3
NtRp4964
(dp4965
g20
(lp4966
(lp4967
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp4968
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp4969
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp4970
a(g131
I699
g30
S'self.L2_cost = (self.W_xf ** 2).sum() + (self.W_hf ** 2).sum() + (self.W_xc ** 2).sum() + (self.W_hc ** 2).sum()'
tp4971
aasbsg32
Nsg34
g1
(g35
g3
NtRp4972
(dp4973
g38
(lp4974
g1
(g10
g3
NtRp4975
(dp4976
g13
S'auto_2322'
p4977
sg15
I0
sg16
g1
(g17
g3
NtRp4978
(dp4979
g20
(lp4980
(lp4981
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp4982
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp4983
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp4984
a(g131
I699
g30
S'self.L2_cost = (self.W_xf ** 2).sum() + (self.W_hf ** 2).sum() + (self.W_xc ** 2).sum() + (self.W_hc ** 2).sum()'
tp4985
aasbsg32
Nsg34
g1
(g35
g3
NtRp4986
(dp4987
g38
(lp4988
g2448
ag1
(g10
g3
NtRp4989
(dp4990
g13
S'auto_2321'
p4991
sg15
I0
sg16
g1
(g17
g3
NtRp4992
(dp4993
g20
(lp4994
(lp4995
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp4996
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp4997
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp4998
a(g131
I699
g30
S'self.L2_cost = (self.W_xf ** 2).sum() + (self.W_hf ** 2).sum() + (self.W_xc ** 2).sum() + (self.W_hc ** 2).sum()'
tp4999
aasbsg32
Nsg34
g1
(g35
g3
NtRp5000
(dp5001
g38
(lp5002
g4116
asg16
g1
(g17
g3
NtRp5003
sg445
(lp5004
g4989
asg447
g1
(g1143
g3
NtRp5005
(dp5006
g1146
(tsg1147
(lp5007
sg1149
(lp5008
I0
aI1
asg1151
(lp5009
sg1153
I01
sg1154
(S'x'
S'x'
tp5010
sg1156
(dp5011
I0
(lp5012
I0
assbsbsg402
g1
(g403
g3
NtRp5013
(dp5014
g406
(I01
I01
tp5015
sg408
g4123
sg410
g2054
sg413
I00
sg32
Nsbsbasg16
g1
(g17
g3
NtRp5016
sg445
(lp5017
g4975
asg447
g4140
sbsg402
g1
(g403
g3
NtRp5018
(dp5019
g406
(I00
I00
tp5020
sg408
g409
sg410
g412
sg413
I00
sg32
Nsbsbasg16
g1
(g17
g3
NtRp5021
sg445
(lp5022
g4961
asg447
g1
(g4156
g3
NtRp5023
(dp5024
g408
g409
sg620
g1194
sg1167
Nsg4160
g409
sbsbsg402
g1
(g403
g3
NtRp5025
(dp5026
g406
(tsg408
g409
sg410
g412
sg413
I00
sg32
Nsbsbag1
(g10
g3
NtRp5027
(dp5028
g13
S'auto_2330'
p5029
sg15
I0
sg16
g1
(g17
g3
NtRp5030
(dp5031
g20
(lp5032
(lp5033
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp5034
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp5035
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp5036
a(g131
I699
g30
S'self.L2_cost = (self.W_xf ** 2).sum() + (self.W_hf ** 2).sum() + (self.W_xc ** 2).sum() + (self.W_hc ** 2).sum()'
tp5037
aasbsg32
Nsg34
g1
(g35
g3
NtRp5038
(dp5039
g38
(lp5040
g1
(g10
g3
NtRp5041
(dp5042
g13
S'auto_2329'
p5043
sg15
I0
sg16
g1
(g17
g3
NtRp5044
(dp5045
g20
(lp5046
(lp5047
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp5048
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp5049
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp5050
a(g131
I699
g30
S'self.L2_cost = (self.W_xf ** 2).sum() + (self.W_hf ** 2).sum() + (self.W_xc ** 2).sum() + (self.W_hc ** 2).sum()'
tp5051
aasbsg32
Nsg34
g1
(g35
g3
NtRp5052
(dp5053
g38
(lp5054
g3342
ag1
(g10
g3
NtRp5055
(dp5056
g13
S'auto_2328'
p5057
sg15
I0
sg16
g1
(g17
g3
NtRp5058
(dp5059
g20
(lp5060
(lp5061
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp5062
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp5063
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp5064
a(g131
I699
g30
S'self.L2_cost = (self.W_xf ** 2).sum() + (self.W_hf ** 2).sum() + (self.W_xc ** 2).sum() + (self.W_hc ** 2).sum()'
tp5065
aasbsg32
Nsg34
g1
(g35
g3
NtRp5066
(dp5067
g38
(lp5068
g4116
asg16
g1
(g17
g3
NtRp5069
sg445
(lp5070
g5055
asg447
g1
(g1143
g3
NtRp5071
(dp5072
g1146
(tsg1147
(lp5073
sg1149
(lp5074
I0
aI1
asg1151
(lp5075
sg1153
I01
sg1154
(S'x'
S'x'
tp5076
sg1156
(dp5077
I0
(lp5078
I0
assbsbsg402
g1
(g403
g3
NtRp5079
(dp5080
g406
(I01
I01
tp5081
sg408
g4123
sg410
g2054
sg413
I00
sg32
Nsbsbasg16
g1
(g17
g3
NtRp5082
sg445
(lp5083
g5041
asg447
g4140
sbsg402
g1
(g403
g3
NtRp5084
(dp5085
g406
(I00
I00
tp5086
sg408
g409
sg410
g412
sg413
I00
sg32
Nsbsbasg16
g1
(g17
g3
NtRp5087
sg445
(lp5088
g5027
asg447
g1
(g4156
g3
NtRp5089
(dp5090
g408
g409
sg620
g1194
sg1167
Nsg4160
g409
sbsbsg402
g1
(g403
g3
NtRp5091
(dp5092
g406
(tsg408
g409
sg410
g412
sg413
I00
sg32
Nsbsbasg16
g1
(g17
g3
NtRp5093
sg445
(lp5094
g4947
asg447
g1191
sbsg402
g1
(g403
g3
NtRp5095
(dp5096
g406
(tsg408
g409
sg410
g412
sg413
I00
sg32
Nsbsbag1
(g10
g3
NtRp5097
(dp5098
g13
S'auto_2341'
p5099
sg15
I0
sg16
g1
(g17
g3
NtRp5100
(dp5101
g20
(lp5102
(lp5103
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp5104
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp5105
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp5106
a(g131
I699
g30
S'self.L2_cost = (self.W_xf ** 2).sum() + (self.W_hf ** 2).sum() + (self.W_xc ** 2).sum() + (self.W_hc ** 2).sum()'
tp5107
aasbsg32
Nsg34
g1
(g35
g3
NtRp5108
(dp5109
g38
(lp5110
g1
(g10
g3
NtRp5111
(dp5112
g13
S'auto_2340'
p5113
sg15
I0
sg16
g1
(g17
g3
NtRp5114
(dp5115
g20
(lp5116
(lp5117
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp5118
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp5119
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp5120
a(g131
I699
g30
S'self.L2_cost = (self.W_xf ** 2).sum() + (self.W_hf ** 2).sum() + (self.W_xc ** 2).sum() + (self.W_hc ** 2).sum()'
tp5121
aasbsg32
Nsg34
g1
(g35
g3
NtRp5122
(dp5123
g38
(lp5124
g2566
ag1
(g10
g3
NtRp5125
(dp5126
g13
S'auto_2339'
p5127
sg15
I0
sg16
g1
(g17
g3
NtRp5128
(dp5129
g20
(lp5130
(lp5131
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp5132
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp5133
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp5134
a(g131
I699
g30
S'self.L2_cost = (self.W_xf ** 2).sum() + (self.W_hf ** 2).sum() + (self.W_xc ** 2).sum() + (self.W_hc ** 2).sum()'
tp5135
aasbsg32
Nsg34
g1
(g35
g3
NtRp5136
(dp5137
g38
(lp5138
g4116
asg16
g1
(g17
g3
NtRp5139
sg445
(lp5140
g5125
asg447
g1
(g1143
g3
NtRp5141
(dp5142
g1146
(tsg1147
(lp5143
sg1149
(lp5144
I0
aI1
asg1151
(lp5145
sg1153
I01
sg1154
(S'x'
S'x'
tp5146
sg1156
(dp5147
I0
(lp5148
I0
assbsbsg402
g1
(g403
g3
NtRp5149
(dp5150
g406
(I01
I01
tp5151
sg408
g4123
sg410
g2054
sg413
I00
sg32
Nsbsbasg16
g1
(g17
g3
NtRp5152
sg445
(lp5153
g5111
asg447
g4140
sbsg402
g1
(g403
g3
NtRp5154
(dp5155
g406
(I00
I00
tp5156
sg408
g409
sg410
g412
sg413
I00
sg32
Nsbsbasg16
g1
(g17
g3
NtRp5157
sg445
(lp5158
g5097
asg447
g1
(g4156
g3
NtRp5159
(dp5160
g408
g409
sg620
g1194
sg1167
Nsg4160
g409
sbsbsg402
g1
(g403
g3
NtRp5161
(dp5162
g406
(tsg408
g409
sg410
g412
sg413
I00
sg32
Nsbsbasg16
g1
(g17
g3
NtRp5163
sg445
(lp5164
g4933
asg447
g1191
sbsg402
g1
(g403
g3
NtRp5165
(dp5166
g406
(tsg408
g409
sg410
g412
sg413
I00
sg32
Nsbsbag1
(g10
g3
NtRp5167
(dp5168
g13
S'auto_2352'
p5169
sg15
I0
sg16
g1
(g17
g3
NtRp5170
(dp5171
g20
(lp5172
(lp5173
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp5174
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp5175
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp5176
a(g131
I699
g30
S'self.L2_cost = (self.W_xf ** 2).sum() + (self.W_hf ** 2).sum() + (self.W_xc ** 2).sum() + (self.W_hc ** 2).sum()'
tp5177
aasbsg32
Nsg34
g1
(g35
g3
NtRp5178
(dp5179
g38
(lp5180
g1
(g10
g3
NtRp5181
(dp5182
g13
S'auto_2351'
p5183
sg15
I0
sg16
g1
(g17
g3
NtRp5184
(dp5185
g20
(lp5186
(lp5187
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp5188
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp5189
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp5190
a(g131
I699
g30
S'self.L2_cost = (self.W_xf ** 2).sum() + (self.W_hf ** 2).sum() + (self.W_xc ** 2).sum() + (self.W_hc ** 2).sum()'
tp5191
aasbsg32
Nsg34
g1
(g35
g3
NtRp5192
(dp5193
g38
(lp5194
g3382
ag1
(g10
g3
NtRp5195
(dp5196
g13
S'auto_2350'
p5197
sg15
I0
sg16
g1
(g17
g3
NtRp5198
(dp5199
g20
(lp5200
(lp5201
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp5202
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp5203
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp5204
a(g131
I699
g30
S'self.L2_cost = (self.W_xf ** 2).sum() + (self.W_hf ** 2).sum() + (self.W_xc ** 2).sum() + (self.W_hc ** 2).sum()'
tp5205
aasbsg32
Nsg34
g1
(g35
g3
NtRp5206
(dp5207
g38
(lp5208
g4116
asg16
g1
(g17
g3
NtRp5209
sg445
(lp5210
g5195
asg447
g1
(g1143
g3
NtRp5211
(dp5212
g1146
(tsg1147
(lp5213
sg1149
(lp5214
I0
aI1
asg1151
(lp5215
sg1153
I01
sg1154
(S'x'
S'x'
tp5216
sg1156
(dp5217
I0
(lp5218
I0
assbsbsg402
g1
(g403
g3
NtRp5219
(dp5220
g406
(I01
I01
tp5221
sg408
g4123
sg410
g2054
sg413
I00
sg32
Nsbsbasg16
g1
(g17
g3
NtRp5222
sg445
(lp5223
g5181
asg447
g4140
sbsg402
g1
(g403
g3
NtRp5224
(dp5225
g406
(I00
I00
tp5226
sg408
g409
sg410
g412
sg413
I00
sg32
Nsbsbasg16
g1
(g17
g3
NtRp5227
sg445
(lp5228
g5167
asg447
g1
(g4156
g3
NtRp5229
(dp5230
g408
g409
sg620
g1194
sg1167
Nsg4160
g409
sbsbsg402
g1
(g403
g3
NtRp5231
(dp5232
g406
(tsg408
g409
sg410
g412
sg413
I00
sg32
Nsbsbasg16
g1
(g17
g3
NtRp5233
sg445
(lp5234
g4919
asg447
g1191
sbsg402
g1
(g403
g3
NtRp5235
(dp5236
g406
(tsg408
g409
sg410
g412
sg413
I00
sg32
Nsbsbsg1547
g3362
sg431
g2334
sg4744
g2433
sg1396
g3213
sS'c'
g1
(g10
g3
NtRp5237
(dp5238
g13
S'auto_2316'
p5239
sg15
I0
sg16
g1
(g17
g3
NtRp5240
(dp5241
g20
(lp5242
(lp5243
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp5244
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp5245
a(g29
I78
g30
S'hidden_layer = SimplifiedLstm(rng, layer_input, input_size, hidden_layer_size[i], p=self.dropout_rate, training=self.is_train)'
tp5246
a(g131
I693
g30
S'LstmBase.__init__(self, rng, x, n_in, n_h, p, training)'
tp5247
a(g131
I272
g30
S'outputs_info = [self.h0, self.c0])'
tp5248
aasbsg32
Nsg34
g1
(g35
g3
NtRp5249
(dp5250
g38
(lp5251
g3424
ag1
(g454
g3
NtRp5252
(dp5253
g13
S'auto_2315'
p5254
sg15
Nsg16
g1
(g17
g3
NtRp5255
sg32
Nsg402
g460
sg463
g464
(g465
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp5256
sbasg16
g1
(g17
g3
NtRp5257
sg445
(lp5258
g5237
asg447
g1
(g469
g3
NtRp5259
(dp5260
g472
(g473
(g460
NNtRp5261
tp5262
sbsbsg402
g1
(g403
g3
NtRp5263
(dp5264
g406
(I00
I00
tp5265
sg408
g409
sg410
g412
sg413
I00
sg32
NsbsbsS'h'
g121
sg4774
g121
sg4775
g242
sbasg4378
I8
sS'n_layers'
p5266
I2
sS'L1_reg'
p5267
F0
sS'errors'
p5268
g1
(g10
g3
NtRp5269
(dp5270
g13
S'auto_2424'
p5271
sg15
I0
sg16
g1
(g17
g3
NtRp5272
(dp5273
g20
(lp5274
(lp5275
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp5276
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp5277
a(g29
I130
g30
S'self.errors = T.mean(T.sum((self.final_layer.output - self.y) ** 2, axis=1))'
tp5278
aasbsg32
g33
sg34
g1
(g35
g3
NtRp5279
(dp5280
g38
(lp5281
g1
(g10
g3
NtRp5282
(dp5283
g13
S'auto_2414'
p5284
sg15
I0
sg16
g1
(g17
g3
NtRp5285
(dp5286
g20
(lp5287
(lp5288
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp5289
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp5290
a(g29
I130
g30
S'self.errors = T.mean(T.sum((self.final_layer.output - self.y) ** 2, axis=1))'
tp5291
aasbsg32
Nsg34
g1
(g35
g3
NtRp5292
(dp5293
g38
(lp5294
g1
(g10
g3
NtRp5295
(dp5296
g13
S'auto_2413'
p5297
sg15
I0
sg16
g1
(g17
g3
NtRp5298
(dp5299
g20
(lp5300
(lp5301
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp5302
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp5303
a(g29
I130
g30
S'self.errors = T.mean(T.sum((self.final_layer.output - self.y) ** 2, axis=1))'
tp5304
aasbsg32
Nsg34
g1
(g35
g3
NtRp5305
(dp5306
g38
(lp5307
g1
(g10
g3
NtRp5308
(dp5309
g13
S'auto_2412'
p5310
sg15
I0
sg16
g1
(g17
g3
NtRp5311
(dp5312
g20
(lp5313
(lp5314
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp5315
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp5316
a(g29
I130
g30
S'self.errors = T.mean(T.sum((self.final_layer.output - self.y) ** 2, axis=1))'
tp5317
aasbsg32
Nsg34
g1
(g35
g3
NtRp5318
(dp5319
g38
(lp5320
g1
(g10
g3
NtRp5321
(dp5322
g13
S'auto_2406'
p5323
sg15
I0
sg16
g1
(g17
g3
NtRp5324
(dp5325
g20
(lp5326
(lp5327
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp5328
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp5329
a(g29
I130
g30
S'self.errors = T.mean(T.sum((self.final_layer.output - self.y) ** 2, axis=1))'
tp5330
aasbsg32
Nsg34
g1
(g35
g3
NtRp5331
(dp5332
g38
(lp5333
g92
ag4085
asg16
g1
(g17
g3
NtRp5334
sg445
(lp5335
g5321
asg447
g2071
sbsg402
g1
(g403
g3
NtRp5336
(dp5337
g406
(I00
I00
tp5338
sg408
g409
sg410
g412
sg413
I00
sg32
Nsbsbag1
(g10
g3
NtRp5339
(dp5340
g13
S'auto_2411'
p5341
sg15
I0
sg16
g1
(g17
g3
NtRp5342
(dp5343
g20
(lp5344
(lp5345
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp5346
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp5347
a(g29
I130
g30
S'self.errors = T.mean(T.sum((self.final_layer.output - self.y) ** 2, axis=1))'
tp5348
aasbsg32
Nsg34
g1
(g35
g3
NtRp5349
(dp5350
g38
(lp5351
g4116
asg16
g1
(g17
g3
NtRp5352
sg445
(lp5353
g5339
asg447
g1
(g1143
g3
NtRp5354
(dp5355
g1146
(tsg1147
(lp5356
sg1149
(lp5357
I0
aI1
asg1151
(lp5358
sg1153
I01
sg1154
(S'x'
S'x'
tp5359
sg1156
(dp5360
I0
(lp5361
I0
assbsbsg402
g1
(g403
g3
NtRp5362
(dp5363
g406
(I01
I01
tp5364
sg408
g4123
sg410
g2054
sg413
I00
sg32
Nsbsbasg16
g1
(g17
g3
NtRp5365
sg445
(lp5366
g5308
asg447
g4140
sbsg402
g1
(g403
g3
NtRp5367
(dp5368
g406
(I00
I00
tp5369
sg408
g409
sg410
g412
sg413
I00
sg32
Nsbsbasg16
g1
(g17
g3
NtRp5370
sg445
(lp5371
g5295
asg447
g1
(g4156
g3
NtRp5372
(dp5373
g408
g409
sg620
g1194
sg1167
(I1
tp5374
sg4160
g409
sbsbsg402
g1
(g403
g3
NtRp5375
(dp5376
g406
(I00
tp5377
sg408
g409
sg410
g412
sg413
I00
sg32
Nsbsbasg16
g1
(g17
g3
NtRp5378
sg445
(lp5379
g5282
asg447
g1
(g4156
g3
NtRp5380
(dp5381
g408
g409
sg620
g1194
sg1167
Nsg4160
g409
sbsbsg402
g1
(g403
g3
NtRp5382
(dp5383
g406
(tsg408
g409
sg410
g412
sg413
I00
sg32
Nsbsbag1
(g10
g3
NtRp5384
(dp5385
g13
S'auto_2420'
p5386
sg15
I0
sg16
g1
(g17
g3
NtRp5387
(dp5388
g20
(lp5389
(lp5390
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp5391
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp5392
a(g29
I130
g30
S'self.errors = T.mean(T.sum((self.final_layer.output - self.y) ** 2, axis=1))'
tp5393
aasbsg32
Nsg34
g1
(g35
g3
NtRp5394
(dp5395
g38
(lp5396
g1
(g10
g3
NtRp5397
(dp5398
g13
S'auto_2418'
p5399
sg15
I0
sg16
g1
(g17
g3
NtRp5400
(dp5401
g20
(lp5402
(lp5403
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp5404
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp5405
a(g29
I130
g30
S'self.errors = T.mean(T.sum((self.final_layer.output - self.y) ** 2, axis=1))'
tp5406
aasbsg32
Nsg34
g1
(g35
g3
NtRp5407
(dp5408
g38
(lp5409
g1
(g10
g3
NtRp5410
(dp5411
g13
S'auto_2415'
p5412
sg15
I0
sg16
g1
(g17
g3
NtRp5413
(dp5414
g20
(lp5415
(lp5416
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp5417
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp5418
a(g29
I130
g30
S'self.errors = T.mean(T.sum((self.final_layer.output - self.y) ** 2, axis=1))'
tp5419
aasbsg32
Nsg34
g1
(g35
g3
NtRp5420
(dp5421
g38
(lp5422
g5295
asg16
g1
(g17
g3
NtRp5423
sg445
(lp5424
g5410
asg447
g482
sbsg402
g483
sbasg16
g1
(g17
g3
NtRp5425
sg445
(lp5426
g5397
asg447
g4213
sbsg402
g1
(g403
g3
NtRp5427
(dp5428
g406
(I00
tp5429
sg408
g409
sg410
g412
sg413
I00
sg32
Nsbsbag1
(g454
g3
NtRp5430
(dp5431
g13
S'auto_2419'
p5432
sg15
Nsg16
g1
(g17
g3
NtRp5433
sg32
Nsg402
g460
sg463
g464
(g465
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp5434
sbasg16
g1
(g17
g3
NtRp5435
sg445
(lp5436
g5384
asg447
g1
(g469
g3
NtRp5437
(dp5438
g472
(g460
tp5439
sbsbsg402
g1
(g403
g3
NtRp5440
(dp5441
g406
(tsg408
g409
sg410
g412
sg413
I00
sg32
Nsbsbasg16
g1
(g17
g3
NtRp5442
sg445
(lp5443
g5269
asg447
g4252
sbsg402
g1
(g403
g3
NtRp5444
(dp5445
g406
(tsg408
g409
sg410
g412
sg413
I00
sg32
Nsbsbsg4380
(lp5446
g558
ag1512
ag699
ag1554
ag1533
ag1575
ag2448
ag3342
ag2566
ag3382
ag3362
ag3402
ag4009
ag4048
asS'updates'
p5447
(dp5448
g3362
g1
(g414
g3
NtRp5449
(dp5450
g13
S'auto_2377'
p5451
sg15
Nsg16
g1
(g17
g3
NtRp5452
(dp5453
g20
(lp5454
(lp5455
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp5456
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp5457
a(g29
I127
g30
S"dtype = theano.config.floatX), name = 'updates')"
tp5458
aasbsg427
g1
(g428
g3
NtRp5459
(dp5460
g32
g5447
sg432
(lp5461
g434
(g435
(I0
tS'b'
tRp5462
(I1
(I16
tg412
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
tbasg437
I00
sg438
I00
sg402
g1
(g403
g3
NtRp5463
(dp5464
g406
(I00
tp5465
sg408
S'float64'
p5466
sg410
g412
sg413
I00
sg32
Nsbsg443
Nsbsg32
g5447
sg34
Nsg402
g5463
sbsg4009
g1
(g414
g3
NtRp5467
(dp5468
g13
S'auto_2379'
p5469
sg15
Nsg16
g1
(g17
g3
NtRp5470
(dp5471
g20
(lp5472
(lp5473
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp5474
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp5475
a(g29
I127
g30
S"dtype = theano.config.floatX), name = 'updates')"
tp5476
aasbsg427
g1
(g428
g3
NtRp5477
(dp5478
g32
g5447
sg432
(lp5479
g434
(g435
(I0
tS'b'
tRp5480
(I1
(I16
I4
tg412
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
tbasg437
I00
sg438
I00
sg402
g1
(g403
g3
NtRp5481
(dp5482
g406
(I00
I00
tp5483
sg408
S'float64'
p5484
sg410
g412
sg413
I00
sg32
Nsbsg443
Nsbsg32
g5447
sg34
Nsg402
g5481
sbsg1554
g1
(g414
g3
NtRp5485
(dp5486
g13
S'auto_2370'
p5487
sg15
Nsg16
g1
(g17
g3
NtRp5488
(dp5489
g20
(lp5490
(lp5491
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp5492
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp5493
a(g29
I127
g30
S"dtype = theano.config.floatX), name = 'updates')"
tp5494
aasbsg427
g1
(g428
g3
NtRp5495
(dp5496
g32
g5447
sg432
(lp5497
g434
(g435
(I0
tS'b'
tRp5498
(I1
(I16
I16
tg412
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
tbasg437
I00
sg438
I00
sg402
g1
(g403
g3
NtRp5499
(dp5500
g406
(I00
I00
tp5501
sg408
S'float64'
p5502
sg410
g412
sg413
I00
sg32
Nsbsg443
Nsbsg32
g5447
sg34
Nsg402
g5499
sbsg699
g1
(g414
g3
NtRp5503
(dp5504
g13
S'auto_2369'
p5505
sg15
Nsg16
g1
(g17
g3
NtRp5506
(dp5507
g20
(lp5508
(lp5509
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp5510
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp5511
a(g29
I127
g30
S"dtype = theano.config.floatX), name = 'updates')"
tp5512
aasbsg427
g1
(g428
g3
NtRp5513
(dp5514
g32
g5447
sg432
(lp5515
g434
(g435
(I0
tS'b'
tRp5516
(I1
(I8
I16
tg412
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
tbasg437
I00
sg438
I00
sg402
g1
(g403
g3
NtRp5517
(dp5518
g406
(I00
I00
tp5519
sg408
S'float64'
p5520
sg410
g412
sg413
I00
sg32
Nsbsg443
Nsbsg32
g5447
sg34
Nsg402
g5517
sbsg1533
g1
(g414
g3
NtRp5521
(dp5522
g13
S'auto_2371'
p5523
sg15
Nsg16
g1
(g17
g3
NtRp5524
(dp5525
g20
(lp5526
(lp5527
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp5528
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp5529
a(g29
I127
g30
S"dtype = theano.config.floatX), name = 'updates')"
tp5530
aasbsg427
g1
(g428
g3
NtRp5531
(dp5532
g32
g5447
sg432
(lp5533
g434
(g435
(I0
tS'b'
tRp5534
(I1
(I16
tg412
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
tbasg437
I00
sg438
I00
sg402
g1
(g403
g3
NtRp5535
(dp5536
g406
(I00
tp5537
sg408
S'float64'
p5538
sg410
g412
sg413
I00
sg32
Nsbsg443
Nsbsg32
g5447
sg34
Nsg402
g5535
sbsg3402
g1
(g414
g3
NtRp5539
(dp5540
g13
S'auto_2378'
p5541
sg15
Nsg16
g1
(g17
g3
NtRp5542
(dp5543
g20
(lp5544
(lp5545
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp5546
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp5547
a(g29
I127
g30
S"dtype = theano.config.floatX), name = 'updates')"
tp5548
aasbsg427
g1
(g428
g3
NtRp5549
(dp5550
g32
g5447
sg432
(lp5551
g434
(g435
(I0
tS'b'
tRp5552
(I1
(I16
tg412
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
tbasg437
I00
sg438
I00
sg402
g1
(g403
g3
NtRp5553
(dp5554
g406
(I00
tp5555
sg408
S'float64'
p5556
sg410
g412
sg413
I00
sg32
Nsbsg443
Nsbsg32
g5447
sg34
Nsg402
g5553
sbsg2448
g1
(g414
g3
NtRp5557
(dp5558
g13
S'auto_2373'
p5559
sg15
Nsg16
g1
(g17
g3
NtRp5560
(dp5561
g20
(lp5562
(lp5563
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp5564
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp5565
a(g29
I127
g30
S"dtype = theano.config.floatX), name = 'updates')"
tp5566
aasbsg427
g1
(g428
g3
NtRp5567
(dp5568
g32
g5447
sg432
(lp5569
g434
(g435
(I0
tS'b'
tRp5570
(I1
(I16
I16
tg412
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
tbasg437
I00
sg438
I00
sg402
g1
(g403
g3
NtRp5571
(dp5572
g406
(I00
I00
tp5573
sg408
S'float64'
p5574
sg410
g412
sg413
I00
sg32
Nsbsg443
Nsbsg32
g5447
sg34
Nsg402
g5571
sbsg4048
g1
(g414
g3
NtRp5575
(dp5576
g13
S'auto_2380'
p5577
sg15
Nsg16
g1
(g17
g3
NtRp5578
(dp5579
g20
(lp5580
(lp5581
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp5582
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp5583
a(g29
I127
g30
S"dtype = theano.config.floatX), name = 'updates')"
tp5584
aasbsg427
g1
(g428
g3
NtRp5585
(dp5586
g32
g5447
sg432
(lp5587
g434
(g435
(I0
tS'b'
tRp5588
(I1
(I4
tg412
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
tbasg437
I00
sg438
I00
sg402
g1
(g403
g3
NtRp5589
(dp5590
g406
(I00
tp5591
sg408
S'float64'
p5592
sg410
g412
sg413
I00
sg32
Nsbsg443
Nsbsg32
g5447
sg34
Nsg402
g5589
sbsg1512
g1
(g414
g3
NtRp5593
(dp5594
g13
S'auto_2368'
p5595
sg15
Nsg16
g1
(g17
g3
NtRp5596
(dp5597
g20
(lp5598
(lp5599
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp5600
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp5601
a(g29
I127
g30
S"dtype = theano.config.floatX), name = 'updates')"
tp5602
aasbsg427
g1
(g428
g3
NtRp5603
(dp5604
g32
g5447
sg432
(lp5605
g434
(g435
(I0
tS'b'
tRp5606
(I1
(I16
I16
tg412
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
tbasg437
I00
sg438
I00
sg402
g1
(g403
g3
NtRp5607
(dp5608
g406
(I00
I00
tp5609
sg408
S'float64'
p5610
sg410
g412
sg413
I00
sg32
Nsbsg443
Nsbsg32
g5447
sg34
Nsg402
g5607
sbsg3382
g1
(g414
g3
NtRp5611
(dp5612
g13
S'auto_2376'
p5613
sg15
Nsg16
g1
(g17
g3
NtRp5614
(dp5615
g20
(lp5616
(lp5617
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp5618
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp5619
a(g29
I127
g30
S"dtype = theano.config.floatX), name = 'updates')"
tp5620
aasbsg427
g1
(g428
g3
NtRp5621
(dp5622
g32
g5447
sg432
(lp5623
g434
(g435
(I0
tS'b'
tRp5624
(I1
(I16
I16
tg412
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
tbasg437
I00
sg438
I00
sg402
g1
(g403
g3
NtRp5625
(dp5626
g406
(I00
I00
tp5627
sg408
S'float64'
p5628
sg410
g412
sg413
I00
sg32
Nsbsg443
Nsbsg32
g5447
sg34
Nsg402
g5625
sbsg2566
g1
(g414
g3
NtRp5629
(dp5630
g13
S'auto_2375'
p5631
sg15
Nsg16
g1
(g17
g3
NtRp5632
(dp5633
g20
(lp5634
(lp5635
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp5636
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp5637
a(g29
I127
g30
S"dtype = theano.config.floatX), name = 'updates')"
tp5638
aasbsg427
g1
(g428
g3
NtRp5639
(dp5640
g32
g5447
sg432
(lp5641
g434
(g435
(I0
tS'b'
tRp5642
(I1
(I16
I16
tg412
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
tbasg437
I00
sg438
I00
sg402
g1
(g403
g3
NtRp5643
(dp5644
g406
(I00
I00
tp5645
sg408
S'float64'
p5646
sg410
g412
sg413
I00
sg32
Nsbsg443
Nsbsg32
g5447
sg34
Nsg402
g5643
sbsg3342
g1
(g414
g3
NtRp5647
(dp5648
g13
S'auto_2374'
p5649
sg15
Nsg16
g1
(g17
g3
NtRp5650
(dp5651
g20
(lp5652
(lp5653
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp5654
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp5655
a(g29
I127
g30
S"dtype = theano.config.floatX), name = 'updates')"
tp5656
aasbsg427
g1
(g428
g3
NtRp5657
(dp5658
g32
g5447
sg432
(lp5659
g434
(g435
(I0
tS'b'
tRp5660
(I1
(I16
I16
tg412
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
tbasg437
I00
sg438
I00
sg402
g1
(g403
g3
NtRp5661
(dp5662
g406
(I00
I00
tp5663
sg408
S'float64'
p5664
sg410
g412
sg413
I00
sg32
Nsbsg443
Nsbsg32
g5447
sg34
Nsg402
g5661
sbsg558
g1
(g414
g3
NtRp5665
(dp5666
g13
S'auto_2367'
p5667
sg15
Nsg16
g1
(g17
g3
NtRp5668
(dp5669
g20
(lp5670
(lp5671
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp5672
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp5673
a(g29
I127
g30
S"dtype = theano.config.floatX), name = 'updates')"
tp5674
aasbsg427
g1
(g428
g3
NtRp5675
(dp5676
g32
g5447
sg432
(lp5677
g434
(g435
(I0
tS'b'
tRp5678
(I1
(I8
I16
tg412
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
tbasg437
I00
sg438
I00
sg402
g1
(g403
g3
NtRp5679
(dp5680
g406
(I00
I00
tp5681
sg408
S'float64'
p5682
sg410
g412
sg413
I00
sg32
Nsbsg443
Nsbsg32
g5447
sg34
Nsg402
g5679
sbsg1575
g1
(g414
g3
NtRp5683
(dp5684
g13
S'auto_2372'
p5685
sg15
Nsg16
g1
(g17
g3
NtRp5686
(dp5687
g20
(lp5688
(lp5689
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp5690
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp5691
a(g29
I127
g30
S"dtype = theano.config.floatX), name = 'updates')"
tp5692
aasbsg427
g1
(g428
g3
NtRp5693
(dp5694
g32
g5447
sg432
(lp5695
g434
(g435
(I0
tS'b'
tRp5696
(I1
(I16
tg412
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
tbasg437
I00
sg438
I00
sg402
g1
(g403
g3
NtRp5697
(dp5698
g406
(I00
tp5699
sg408
S'float64'
p5700
sg410
g412
sg413
I00
sg32
Nsbsg443
Nsbsg32
g5447
sg34
Nsg402
g5697
sbssS'final_layer'
p5701
g1
(clayers.layers
LinearLayer
p5702
g3
NtRp5703
(dp5704
S'b'
g4048
sg6
(lp5705
g1
(g414
g3
NtRp5706
(dp5707
g13
S'auto_2359'
p5708
sg15
Nsg16
g1
(g17
g3
NtRp5709
(dp5710
g20
(lp5711
(lp5712
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp5713
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp5714
a(g29
I115
g30
S'self.final_layer = LinearLayer(rng, self.rnn_layers[-1].output, input_size, self.n_out)'
tp5715
a(g102
I106
g30
S"dtype=theano.config.floatX), name='delta_W')"
tp5716
aasbsg427
g1
(g428
g3
NtRp5717
(dp5718
g32
S'delta_W'
p5719
sg432
(lp5720
g434
(g435
(I0
tS'b'
tRp5721
(I1
(I16
I4
tg412
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
tbasg437
I00
sg438
I00
sg402
g1
(g403
g3
NtRp5722
(dp5723
g406
(I00
I00
tp5724
sg408
S'float64'
p5725
sg410
g412
sg413
I00
sg32
Nsbsg443
Nsbsg32
g5719
sg34
Nsg402
g5722
sbag1
(g414
g3
NtRp5726
(dp5727
g13
S'auto_2360'
p5728
sg15
Nsg16
g1
(g17
g3
NtRp5729
(dp5730
g20
(lp5731
(lp5732
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp5733
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp5734
a(g29
I115
g30
S'self.final_layer = LinearLayer(rng, self.rnn_layers[-1].output, input_size, self.n_out)'
tp5735
a(g102
I109
g30
S"dtype=theano.config.floatX), name='delta_b')"
tp5736
aasbsg427
g1
(g428
g3
NtRp5737
(dp5738
g32
S'delta_b'
p5739
sg432
(lp5740
g434
(g435
(I0
tS'b'
tRp5741
(I1
(I4
tg412
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
tbasg437
I00
sg438
I00
sg402
g1
(g403
g3
NtRp5742
(dp5743
g406
(I00
tp5744
sg408
S'float64'
p5745
sg410
g412
sg413
I00
sg32
Nsbsg443
Nsbsg32
g5739
sg34
Nsg402
g5742
sbasg5719
g5706
sg4380
(lp5746
g4009
ag4048
asS'W'
g4009
sg4774
g92
sg4382
g121
sg5739
g5726
sbsS'y'
g4085
sS'x'
g392
sS'is_train'
p5747
g1
(g10
g3
NtRp5748
(dp5749
g13
S'auto_1516'
p5750
sg15
Nsg16
g1
(g17
g3
NtRp5751
(dp5752
g20
(lp5753
(lp5754
(g23
I52
g24
S"nnmodel = build_model(['SLSTM', 'SLSTM'])"
tp5755
a(g26
I22
g27
S'nnmodel = DeepRecurrentNetwork(8, 16*np.ones(len(hidden_layer_type)), 4, L1_reg=0.0, L2_reg=0.00001, hidden_layer_type=hidden_layer_type)'
tp5756
a(g29
I47
g30
S"self.is_train = T.iscalar('is_train')"
tp5757
aasbsg32
g5747
sg34
Nsg402
g1
(g403
g3
NtRp5758
(dp5759
g406
(tsg408
S'int32'
p5760
sg410
g411
(S'i4'
I0
I1
tRp5761
(I3
S'<'
NNNI-1
I-1
I0
tbsg413
I00
sg32
NsbsbsS'n_out'
p5762
I4
sS'L2_reg'
p5763
F1.0000000000000001e-05
sb.